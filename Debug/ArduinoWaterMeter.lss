
ArduinoWaterMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800100  00002d9a  00002e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040d  0080026e  0080026e  00002f9c  2**0
                  ALLOC
  3 .stab         00009a20  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000af44  00000000  00000000  0000c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c0       	rjmp	.+196    	; 0xc6 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__vector_1>
       8:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_2>
       c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
       e:	00 00       	nop
      10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
      12:	00 00       	nop
      14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
      16:	00 00       	nop
      18:	a8 c7       	rjmp	.+3920   	; 0xf6a <__vector_6>
      1a:	00 00       	nop
      1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
      22:	00 00       	nop
      24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
      26:	00 00       	nop
      28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
      2e:	00 00       	nop
      30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
      32:	00 00       	nop
      34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
      36:	00 00       	nop
      38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__vector_16>
      44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__vector_18>
      4c:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__vector_19>
      50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
      52:	00 00       	nop
      54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
      56:	00 00       	nop
      58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
      62:	00 00       	nop
      64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
	...

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	e7 10       	cpse	r14, r7
      c4:	ea 12       	cpse	r14, r26

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ea e9       	ldi	r30, 0x9A	; 154
      da:	fd e2       	ldi	r31, 0x2D	; 45
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
      e2:	ae 36       	cpi	r26, 0x6E	; 110
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
      e8:	16 e0       	ldi	r17, 0x06	; 6
      ea:	ae e6       	ldi	r26, 0x6E	; 110
      ec:	b2 e0       	ldi	r27, 0x02	; 2
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ab 37       	cpi	r26, 0x7B	; 123
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__tablejump__>

00000108 <.do_global_ctors_start>:
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
     10e:	0e 94 49 14 	call	0x2892	; 0x2892 <main>
     112:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <_exit>

00000116 <__bad_interrupt>:
     116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <strcpy>:
     118:	fb 01       	movw	r30, r22
     11a:	dc 01       	movw	r26, r24
     11c:	01 90       	ld	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	00 20       	and	r0, r0
     122:	e1 f7       	brne	.-8      	; 0x11c <strcpy+0x4>
     124:	08 95       	ret

00000126 <sprintf>:
     126:	ae e0       	ldi	r26, 0x0E	; 14
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x1c>
     132:	0d 89       	ldd	r16, Y+21	; 0x15
     134:	1e 89       	ldd	r17, Y+22	; 0x16
     136:	86 e0       	ldi	r24, 0x06	; 6
     138:	8c 83       	std	Y+4, r24	; 0x04
     13a:	1a 83       	std	Y+2, r17	; 0x02
     13c:	09 83       	std	Y+1, r16	; 0x01
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	9f e7       	ldi	r25, 0x7F	; 127
     142:	9e 83       	std	Y+6, r25	; 0x06
     144:	8d 83       	std	Y+5, r24	; 0x05
     146:	9e 01       	movw	r18, r28
     148:	27 5e       	subi	r18, 0xE7	; 231
     14a:	3f 4f       	sbci	r19, 0xFF	; 255
     14c:	ce 01       	movw	r24, r28
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	6f 89       	ldd	r22, Y+23	; 0x17
     152:	78 8d       	ldd	r23, Y+24	; 0x18
     154:	a9 01       	movw	r20, r18
     156:	0a d0       	rcall	.+20     	; 0x16c <vfprintf>
     158:	2f 81       	ldd	r18, Y+7	; 0x07
     15a:	38 85       	ldd	r19, Y+8	; 0x08
     15c:	02 0f       	add	r16, r18
     15e:	13 1f       	adc	r17, r19
     160:	f8 01       	movw	r30, r16
     162:	10 82       	st	Z, r1
     164:	2e 96       	adiw	r28, 0x0e	; 14
     166:	e4 e0       	ldi	r30, 0x04	; 4
     168:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0x1c>

0000016c <vfprintf>:
     16c:	ab e0       	ldi	r26, 0x0B	; 11
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ec eb       	ldi	r30, 0xBC	; 188
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__>
     178:	3c 01       	movw	r6, r24
     17a:	2b 01       	movw	r4, r22
     17c:	5a 01       	movw	r10, r20
     17e:	fc 01       	movw	r30, r24
     180:	17 82       	std	Z+7, r1	; 0x07
     182:	16 82       	std	Z+6, r1	; 0x06
     184:	83 81       	ldd	r24, Z+3	; 0x03
     186:	81 fd       	sbrc	r24, 1
     188:	03 c0       	rjmp	.+6      	; 0x190 <vfprintf+0x24>
     18a:	6f ef       	ldi	r22, 0xFF	; 255
     18c:	7f ef       	ldi	r23, 0xFF	; 255
     18e:	b9 c1       	rjmp	.+882    	; 0x502 <vfprintf+0x396>
     190:	9a e0       	ldi	r25, 0x0A	; 10
     192:	89 2e       	mov	r8, r25
     194:	1e 01       	movw	r2, r28
     196:	08 94       	sec
     198:	21 1c       	adc	r2, r1
     19a:	31 1c       	adc	r3, r1
     19c:	f3 01       	movw	r30, r6
     19e:	23 81       	ldd	r18, Z+3	; 0x03
     1a0:	f2 01       	movw	r30, r4
     1a2:	23 fd       	sbrc	r18, 3
     1a4:	85 91       	lpm	r24, Z+
     1a6:	23 ff       	sbrs	r18, 3
     1a8:	81 91       	ld	r24, Z+
     1aa:	2f 01       	movw	r4, r30
     1ac:	88 23       	and	r24, r24
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <vfprintf+0x46>
     1b0:	a5 c1       	rjmp	.+842    	; 0x4fc <vfprintf+0x390>
     1b2:	85 32       	cpi	r24, 0x25	; 37
     1b4:	39 f4       	brne	.+14     	; 0x1c4 <vfprintf+0x58>
     1b6:	23 fd       	sbrc	r18, 3
     1b8:	85 91       	lpm	r24, Z+
     1ba:	23 ff       	sbrs	r18, 3
     1bc:	81 91       	ld	r24, Z+
     1be:	2f 01       	movw	r4, r30
     1c0:	85 32       	cpi	r24, 0x25	; 37
     1c2:	21 f4       	brne	.+8      	; 0x1cc <vfprintf+0x60>
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b3 01       	movw	r22, r6
     1c8:	b7 d1       	rcall	.+878    	; 0x538 <fputc>
     1ca:	e8 cf       	rjmp	.-48     	; 0x19c <vfprintf+0x30>
     1cc:	98 2f       	mov	r25, r24
     1ce:	ff 24       	eor	r15, r15
     1d0:	ee 24       	eor	r14, r14
     1d2:	99 24       	eor	r9, r9
     1d4:	ff e1       	ldi	r31, 0x1F	; 31
     1d6:	ff 15       	cp	r31, r15
     1d8:	d0 f0       	brcs	.+52     	; 0x20e <vfprintf+0xa2>
     1da:	9b 32       	cpi	r25, 0x2B	; 43
     1dc:	69 f0       	breq	.+26     	; 0x1f8 <vfprintf+0x8c>
     1de:	9c 32       	cpi	r25, 0x2C	; 44
     1e0:	28 f4       	brcc	.+10     	; 0x1ec <vfprintf+0x80>
     1e2:	90 32       	cpi	r25, 0x20	; 32
     1e4:	59 f0       	breq	.+22     	; 0x1fc <vfprintf+0x90>
     1e6:	93 32       	cpi	r25, 0x23	; 35
     1e8:	91 f4       	brne	.+36     	; 0x20e <vfprintf+0xa2>
     1ea:	0e c0       	rjmp	.+28     	; 0x208 <vfprintf+0x9c>
     1ec:	9d 32       	cpi	r25, 0x2D	; 45
     1ee:	49 f0       	breq	.+18     	; 0x202 <vfprintf+0x96>
     1f0:	90 33       	cpi	r25, 0x30	; 48
     1f2:	69 f4       	brne	.+26     	; 0x20e <vfprintf+0xa2>
     1f4:	41 e0       	ldi	r20, 0x01	; 1
     1f6:	24 c0       	rjmp	.+72     	; 0x240 <vfprintf+0xd4>
     1f8:	52 e0       	ldi	r21, 0x02	; 2
     1fa:	f5 2a       	or	r15, r21
     1fc:	84 e0       	ldi	r24, 0x04	; 4
     1fe:	f8 2a       	or	r15, r24
     200:	28 c0       	rjmp	.+80     	; 0x252 <vfprintf+0xe6>
     202:	98 e0       	ldi	r25, 0x08	; 8
     204:	f9 2a       	or	r15, r25
     206:	25 c0       	rjmp	.+74     	; 0x252 <vfprintf+0xe6>
     208:	e0 e1       	ldi	r30, 0x10	; 16
     20a:	fe 2a       	or	r15, r30
     20c:	22 c0       	rjmp	.+68     	; 0x252 <vfprintf+0xe6>
     20e:	f7 fc       	sbrc	r15, 7
     210:	29 c0       	rjmp	.+82     	; 0x264 <vfprintf+0xf8>
     212:	89 2f       	mov	r24, r25
     214:	80 53       	subi	r24, 0x30	; 48
     216:	8a 30       	cpi	r24, 0x0A	; 10
     218:	70 f4       	brcc	.+28     	; 0x236 <vfprintf+0xca>
     21a:	f6 fe       	sbrs	r15, 6
     21c:	05 c0       	rjmp	.+10     	; 0x228 <vfprintf+0xbc>
     21e:	98 9c       	mul	r9, r8
     220:	90 2c       	mov	r9, r0
     222:	11 24       	eor	r1, r1
     224:	98 0e       	add	r9, r24
     226:	15 c0       	rjmp	.+42     	; 0x252 <vfprintf+0xe6>
     228:	e8 9c       	mul	r14, r8
     22a:	e0 2c       	mov	r14, r0
     22c:	11 24       	eor	r1, r1
     22e:	e8 0e       	add	r14, r24
     230:	f0 e2       	ldi	r31, 0x20	; 32
     232:	ff 2a       	or	r15, r31
     234:	0e c0       	rjmp	.+28     	; 0x252 <vfprintf+0xe6>
     236:	9e 32       	cpi	r25, 0x2E	; 46
     238:	29 f4       	brne	.+10     	; 0x244 <vfprintf+0xd8>
     23a:	f6 fc       	sbrc	r15, 6
     23c:	5f c1       	rjmp	.+702    	; 0x4fc <vfprintf+0x390>
     23e:	40 e4       	ldi	r20, 0x40	; 64
     240:	f4 2a       	or	r15, r20
     242:	07 c0       	rjmp	.+14     	; 0x252 <vfprintf+0xe6>
     244:	9c 36       	cpi	r25, 0x6C	; 108
     246:	19 f4       	brne	.+6      	; 0x24e <vfprintf+0xe2>
     248:	50 e8       	ldi	r21, 0x80	; 128
     24a:	f5 2a       	or	r15, r21
     24c:	02 c0       	rjmp	.+4      	; 0x252 <vfprintf+0xe6>
     24e:	98 36       	cpi	r25, 0x68	; 104
     250:	49 f4       	brne	.+18     	; 0x264 <vfprintf+0xf8>
     252:	f2 01       	movw	r30, r4
     254:	23 fd       	sbrc	r18, 3
     256:	95 91       	lpm	r25, Z+
     258:	23 ff       	sbrs	r18, 3
     25a:	91 91       	ld	r25, Z+
     25c:	2f 01       	movw	r4, r30
     25e:	99 23       	and	r25, r25
     260:	09 f0       	breq	.+2      	; 0x264 <vfprintf+0xf8>
     262:	b8 cf       	rjmp	.-144    	; 0x1d4 <vfprintf+0x68>
     264:	89 2f       	mov	r24, r25
     266:	85 54       	subi	r24, 0x45	; 69
     268:	83 30       	cpi	r24, 0x03	; 3
     26a:	18 f0       	brcs	.+6      	; 0x272 <vfprintf+0x106>
     26c:	80 52       	subi	r24, 0x20	; 32
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	38 f4       	brcc	.+14     	; 0x280 <vfprintf+0x114>
     272:	44 e0       	ldi	r20, 0x04	; 4
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	a4 0e       	add	r10, r20
     278:	b5 1e       	adc	r11, r21
     27a:	5f e3       	ldi	r21, 0x3F	; 63
     27c:	59 83       	std	Y+1, r21	; 0x01
     27e:	0f c0       	rjmp	.+30     	; 0x29e <vfprintf+0x132>
     280:	93 36       	cpi	r25, 0x63	; 99
     282:	31 f0       	breq	.+12     	; 0x290 <vfprintf+0x124>
     284:	93 37       	cpi	r25, 0x73	; 115
     286:	79 f0       	breq	.+30     	; 0x2a6 <vfprintf+0x13a>
     288:	93 35       	cpi	r25, 0x53	; 83
     28a:	09 f0       	breq	.+2      	; 0x28e <vfprintf+0x122>
     28c:	52 c0       	rjmp	.+164    	; 0x332 <vfprintf+0x1c6>
     28e:	1f c0       	rjmp	.+62     	; 0x2ce <vfprintf+0x162>
     290:	f5 01       	movw	r30, r10
     292:	80 81       	ld	r24, Z
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	42 e0       	ldi	r20, 0x02	; 2
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	a4 0e       	add	r10, r20
     29c:	b5 1e       	adc	r11, r21
     29e:	61 01       	movw	r12, r2
     2a0:	01 e0       	ldi	r16, 0x01	; 1
     2a2:	10 e0       	ldi	r17, 0x00	; 0
     2a4:	11 c0       	rjmp	.+34     	; 0x2c8 <vfprintf+0x15c>
     2a6:	f5 01       	movw	r30, r10
     2a8:	c0 80       	ld	r12, Z
     2aa:	d1 80       	ldd	r13, Z+1	; 0x01
     2ac:	f6 fc       	sbrc	r15, 6
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <vfprintf+0x14a>
     2b0:	6f ef       	ldi	r22, 0xFF	; 255
     2b2:	7f ef       	ldi	r23, 0xFF	; 255
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <vfprintf+0x14e>
     2b6:	69 2d       	mov	r22, r9
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	42 e0       	ldi	r20, 0x02	; 2
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	a4 0e       	add	r10, r20
     2c0:	b5 1e       	adc	r11, r21
     2c2:	c6 01       	movw	r24, r12
     2c4:	2e d1       	rcall	.+604    	; 0x522 <strnlen>
     2c6:	8c 01       	movw	r16, r24
     2c8:	5f e7       	ldi	r21, 0x7F	; 127
     2ca:	f5 22       	and	r15, r21
     2cc:	13 c0       	rjmp	.+38     	; 0x2f4 <vfprintf+0x188>
     2ce:	f5 01       	movw	r30, r10
     2d0:	c0 80       	ld	r12, Z
     2d2:	d1 80       	ldd	r13, Z+1	; 0x01
     2d4:	f6 fc       	sbrc	r15, 6
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <vfprintf+0x172>
     2d8:	6f ef       	ldi	r22, 0xFF	; 255
     2da:	7f ef       	ldi	r23, 0xFF	; 255
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <vfprintf+0x176>
     2de:	69 2d       	mov	r22, r9
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	42 e0       	ldi	r20, 0x02	; 2
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	a4 0e       	add	r10, r20
     2e8:	b5 1e       	adc	r11, r21
     2ea:	c6 01       	movw	r24, r12
     2ec:	0f d1       	rcall	.+542    	; 0x50c <strnlen_P>
     2ee:	8c 01       	movw	r16, r24
     2f0:	50 e8       	ldi	r21, 0x80	; 128
     2f2:	f5 2a       	or	r15, r21
     2f4:	f3 fe       	sbrs	r15, 3
     2f6:	06 c0       	rjmp	.+12     	; 0x304 <vfprintf+0x198>
     2f8:	18 c0       	rjmp	.+48     	; 0x32a <vfprintf+0x1be>
     2fa:	80 e2       	ldi	r24, 0x20	; 32
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	b3 01       	movw	r22, r6
     300:	1b d1       	rcall	.+566    	; 0x538 <fputc>
     302:	ea 94       	dec	r14
     304:	8e 2d       	mov	r24, r14
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	08 17       	cp	r16, r24
     30a:	19 07       	cpc	r17, r25
     30c:	b0 f3       	brcs	.-20     	; 0x2fa <vfprintf+0x18e>
     30e:	0d c0       	rjmp	.+26     	; 0x32a <vfprintf+0x1be>
     310:	f6 01       	movw	r30, r12
     312:	f7 fc       	sbrc	r15, 7
     314:	85 91       	lpm	r24, Z+
     316:	f7 fe       	sbrs	r15, 7
     318:	81 91       	ld	r24, Z+
     31a:	6f 01       	movw	r12, r30
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	b3 01       	movw	r22, r6
     320:	0b d1       	rcall	.+534    	; 0x538 <fputc>
     322:	e1 10       	cpse	r14, r1
     324:	ea 94       	dec	r14
     326:	01 50       	subi	r16, 0x01	; 1
     328:	10 40       	sbci	r17, 0x00	; 0
     32a:	01 15       	cp	r16, r1
     32c:	11 05       	cpc	r17, r1
     32e:	81 f7       	brne	.-32     	; 0x310 <vfprintf+0x1a4>
     330:	e2 c0       	rjmp	.+452    	; 0x4f6 <vfprintf+0x38a>
     332:	94 36       	cpi	r25, 0x64	; 100
     334:	11 f0       	breq	.+4      	; 0x33a <vfprintf+0x1ce>
     336:	99 36       	cpi	r25, 0x69	; 105
     338:	61 f5       	brne	.+88     	; 0x392 <vfprintf+0x226>
     33a:	f7 fe       	sbrs	r15, 7
     33c:	08 c0       	rjmp	.+16     	; 0x34e <vfprintf+0x1e2>
     33e:	f5 01       	movw	r30, r10
     340:	20 81       	ld	r18, Z
     342:	31 81       	ldd	r19, Z+1	; 0x01
     344:	42 81       	ldd	r20, Z+2	; 0x02
     346:	53 81       	ldd	r21, Z+3	; 0x03
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0a c0       	rjmp	.+20     	; 0x362 <vfprintf+0x1f6>
     34e:	f5 01       	movw	r30, r10
     350:	80 81       	ld	r24, Z
     352:	91 81       	ldd	r25, Z+1	; 0x01
     354:	9c 01       	movw	r18, r24
     356:	44 27       	eor	r20, r20
     358:	37 fd       	sbrc	r19, 7
     35a:	40 95       	com	r20
     35c:	54 2f       	mov	r21, r20
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a8 0e       	add	r10, r24
     364:	b9 1e       	adc	r11, r25
     366:	9f e6       	ldi	r25, 0x6F	; 111
     368:	f9 22       	and	r15, r25
     36a:	57 ff       	sbrs	r21, 7
     36c:	09 c0       	rjmp	.+18     	; 0x380 <vfprintf+0x214>
     36e:	50 95       	com	r21
     370:	40 95       	com	r20
     372:	30 95       	com	r19
     374:	21 95       	neg	r18
     376:	3f 4f       	sbci	r19, 0xFF	; 255
     378:	4f 4f       	sbci	r20, 0xFF	; 255
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	e0 e8       	ldi	r30, 0x80	; 128
     37e:	fe 2a       	or	r15, r30
     380:	ca 01       	movw	r24, r20
     382:	b9 01       	movw	r22, r18
     384:	a1 01       	movw	r20, r2
     386:	2a e0       	ldi	r18, 0x0A	; 10
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	02 d1       	rcall	.+516    	; 0x590 <__ultoa_invert>
     38c:	d8 2e       	mov	r13, r24
     38e:	d2 18       	sub	r13, r2
     390:	3f c0       	rjmp	.+126    	; 0x410 <vfprintf+0x2a4>
     392:	95 37       	cpi	r25, 0x75	; 117
     394:	29 f4       	brne	.+10     	; 0x3a0 <vfprintf+0x234>
     396:	1f 2d       	mov	r17, r15
     398:	1f 7e       	andi	r17, 0xEF	; 239
     39a:	2a e0       	ldi	r18, 0x0A	; 10
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	1d c0       	rjmp	.+58     	; 0x3da <vfprintf+0x26e>
     3a0:	1f 2d       	mov	r17, r15
     3a2:	19 7f       	andi	r17, 0xF9	; 249
     3a4:	9f 36       	cpi	r25, 0x6F	; 111
     3a6:	61 f0       	breq	.+24     	; 0x3c0 <vfprintf+0x254>
     3a8:	90 37       	cpi	r25, 0x70	; 112
     3aa:	20 f4       	brcc	.+8      	; 0x3b4 <vfprintf+0x248>
     3ac:	98 35       	cpi	r25, 0x58	; 88
     3ae:	09 f0       	breq	.+2      	; 0x3b2 <vfprintf+0x246>
     3b0:	a5 c0       	rjmp	.+330    	; 0x4fc <vfprintf+0x390>
     3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <vfprintf+0x266>
     3b4:	90 37       	cpi	r25, 0x70	; 112
     3b6:	39 f0       	breq	.+14     	; 0x3c6 <vfprintf+0x25a>
     3b8:	98 37       	cpi	r25, 0x78	; 120
     3ba:	09 f0       	breq	.+2      	; 0x3be <vfprintf+0x252>
     3bc:	9f c0       	rjmp	.+318    	; 0x4fc <vfprintf+0x390>
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <vfprintf+0x25c>
     3c0:	28 e0       	ldi	r18, 0x08	; 8
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	0a c0       	rjmp	.+20     	; 0x3da <vfprintf+0x26e>
     3c6:	10 61       	ori	r17, 0x10	; 16
     3c8:	14 fd       	sbrc	r17, 4
     3ca:	14 60       	ori	r17, 0x04	; 4
     3cc:	20 e1       	ldi	r18, 0x10	; 16
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <vfprintf+0x26e>
     3d2:	14 fd       	sbrc	r17, 4
     3d4:	16 60       	ori	r17, 0x06	; 6
     3d6:	20 e1       	ldi	r18, 0x10	; 16
     3d8:	32 e0       	ldi	r19, 0x02	; 2
     3da:	17 ff       	sbrs	r17, 7
     3dc:	08 c0       	rjmp	.+16     	; 0x3ee <vfprintf+0x282>
     3de:	f5 01       	movw	r30, r10
     3e0:	60 81       	ld	r22, Z
     3e2:	71 81       	ldd	r23, Z+1	; 0x01
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	93 81       	ldd	r25, Z+3	; 0x03
     3e8:	44 e0       	ldi	r20, 0x04	; 4
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	08 c0       	rjmp	.+16     	; 0x3fe <vfprintf+0x292>
     3ee:	f5 01       	movw	r30, r10
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	bc 01       	movw	r22, r24
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	42 e0       	ldi	r20, 0x02	; 2
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	a4 0e       	add	r10, r20
     400:	b5 1e       	adc	r11, r21
     402:	a1 01       	movw	r20, r2
     404:	c5 d0       	rcall	.+394    	; 0x590 <__ultoa_invert>
     406:	d8 2e       	mov	r13, r24
     408:	d2 18       	sub	r13, r2
     40a:	8f e7       	ldi	r24, 0x7F	; 127
     40c:	f8 2e       	mov	r15, r24
     40e:	f1 22       	and	r15, r17
     410:	f6 fe       	sbrs	r15, 6
     412:	0b c0       	rjmp	.+22     	; 0x42a <vfprintf+0x2be>
     414:	5e ef       	ldi	r21, 0xFE	; 254
     416:	f5 22       	and	r15, r21
     418:	d9 14       	cp	r13, r9
     41a:	38 f4       	brcc	.+14     	; 0x42a <vfprintf+0x2be>
     41c:	f4 fe       	sbrs	r15, 4
     41e:	07 c0       	rjmp	.+14     	; 0x42e <vfprintf+0x2c2>
     420:	f2 fc       	sbrc	r15, 2
     422:	05 c0       	rjmp	.+10     	; 0x42e <vfprintf+0x2c2>
     424:	8f ee       	ldi	r24, 0xEF	; 239
     426:	f8 22       	and	r15, r24
     428:	02 c0       	rjmp	.+4      	; 0x42e <vfprintf+0x2c2>
     42a:	1d 2d       	mov	r17, r13
     42c:	01 c0       	rjmp	.+2      	; 0x430 <vfprintf+0x2c4>
     42e:	19 2d       	mov	r17, r9
     430:	f4 fe       	sbrs	r15, 4
     432:	0d c0       	rjmp	.+26     	; 0x44e <vfprintf+0x2e2>
     434:	fe 01       	movw	r30, r28
     436:	ed 0d       	add	r30, r13
     438:	f1 1d       	adc	r31, r1
     43a:	80 81       	ld	r24, Z
     43c:	80 33       	cpi	r24, 0x30	; 48
     43e:	19 f4       	brne	.+6      	; 0x446 <vfprintf+0x2da>
     440:	99 ee       	ldi	r25, 0xE9	; 233
     442:	f9 22       	and	r15, r25
     444:	08 c0       	rjmp	.+16     	; 0x456 <vfprintf+0x2ea>
     446:	1f 5f       	subi	r17, 0xFF	; 255
     448:	f2 fe       	sbrs	r15, 2
     44a:	05 c0       	rjmp	.+10     	; 0x456 <vfprintf+0x2ea>
     44c:	03 c0       	rjmp	.+6      	; 0x454 <vfprintf+0x2e8>
     44e:	8f 2d       	mov	r24, r15
     450:	86 78       	andi	r24, 0x86	; 134
     452:	09 f0       	breq	.+2      	; 0x456 <vfprintf+0x2ea>
     454:	1f 5f       	subi	r17, 0xFF	; 255
     456:	0f 2d       	mov	r16, r15
     458:	f3 fc       	sbrc	r15, 3
     45a:	13 c0       	rjmp	.+38     	; 0x482 <vfprintf+0x316>
     45c:	f0 fe       	sbrs	r15, 0
     45e:	0e c0       	rjmp	.+28     	; 0x47c <vfprintf+0x310>
     460:	1e 15       	cp	r17, r14
     462:	10 f0       	brcs	.+4      	; 0x468 <vfprintf+0x2fc>
     464:	9d 2c       	mov	r9, r13
     466:	0a c0       	rjmp	.+20     	; 0x47c <vfprintf+0x310>
     468:	9d 2c       	mov	r9, r13
     46a:	9e 0c       	add	r9, r14
     46c:	91 1a       	sub	r9, r17
     46e:	1e 2d       	mov	r17, r14
     470:	05 c0       	rjmp	.+10     	; 0x47c <vfprintf+0x310>
     472:	80 e2       	ldi	r24, 0x20	; 32
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	b3 01       	movw	r22, r6
     478:	5f d0       	rcall	.+190    	; 0x538 <fputc>
     47a:	1f 5f       	subi	r17, 0xFF	; 255
     47c:	1e 15       	cp	r17, r14
     47e:	c8 f3       	brcs	.-14     	; 0x472 <vfprintf+0x306>
     480:	04 c0       	rjmp	.+8      	; 0x48a <vfprintf+0x31e>
     482:	1e 15       	cp	r17, r14
     484:	10 f4       	brcc	.+4      	; 0x48a <vfprintf+0x31e>
     486:	e1 1a       	sub	r14, r17
     488:	01 c0       	rjmp	.+2      	; 0x48c <vfprintf+0x320>
     48a:	ee 24       	eor	r14, r14
     48c:	04 ff       	sbrs	r16, 4
     48e:	0e c0       	rjmp	.+28     	; 0x4ac <vfprintf+0x340>
     490:	80 e3       	ldi	r24, 0x30	; 48
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	b3 01       	movw	r22, r6
     496:	50 d0       	rcall	.+160    	; 0x538 <fputc>
     498:	02 ff       	sbrs	r16, 2
     49a:	1b c0       	rjmp	.+54     	; 0x4d2 <vfprintf+0x366>
     49c:	01 fd       	sbrc	r16, 1
     49e:	03 c0       	rjmp	.+6      	; 0x4a6 <vfprintf+0x33a>
     4a0:	88 e7       	ldi	r24, 0x78	; 120
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <vfprintf+0x356>
     4a6:	88 e5       	ldi	r24, 0x58	; 88
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <vfprintf+0x356>
     4ac:	80 2f       	mov	r24, r16
     4ae:	86 78       	andi	r24, 0x86	; 134
     4b0:	81 f0       	breq	.+32     	; 0x4d2 <vfprintf+0x366>
     4b2:	01 ff       	sbrs	r16, 1
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <vfprintf+0x34e>
     4b6:	8b e2       	ldi	r24, 0x2B	; 43
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <vfprintf+0x350>
     4ba:	80 e2       	ldi	r24, 0x20	; 32
     4bc:	f7 fc       	sbrc	r15, 7
     4be:	8d e2       	ldi	r24, 0x2D	; 45
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	b3 01       	movw	r22, r6
     4c4:	39 d0       	rcall	.+114    	; 0x538 <fputc>
     4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <vfprintf+0x366>
     4c8:	80 e3       	ldi	r24, 0x30	; 48
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	b3 01       	movw	r22, r6
     4ce:	34 d0       	rcall	.+104    	; 0x538 <fputc>
     4d0:	9a 94       	dec	r9
     4d2:	d9 14       	cp	r13, r9
     4d4:	c8 f3       	brcs	.-14     	; 0x4c8 <vfprintf+0x35c>
     4d6:	da 94       	dec	r13
     4d8:	f1 01       	movw	r30, r2
     4da:	ed 0d       	add	r30, r13
     4dc:	f1 1d       	adc	r31, r1
     4de:	80 81       	ld	r24, Z
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	b3 01       	movw	r22, r6
     4e4:	29 d0       	rcall	.+82     	; 0x538 <fputc>
     4e6:	dd 20       	and	r13, r13
     4e8:	b1 f7       	brne	.-20     	; 0x4d6 <vfprintf+0x36a>
     4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <vfprintf+0x38a>
     4ec:	80 e2       	ldi	r24, 0x20	; 32
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	b3 01       	movw	r22, r6
     4f2:	22 d0       	rcall	.+68     	; 0x538 <fputc>
     4f4:	ea 94       	dec	r14
     4f6:	ee 20       	and	r14, r14
     4f8:	c9 f7       	brne	.-14     	; 0x4ec <vfprintf+0x380>
     4fa:	50 ce       	rjmp	.-864    	; 0x19c <vfprintf+0x30>
     4fc:	f3 01       	movw	r30, r6
     4fe:	66 81       	ldd	r22, Z+6	; 0x06
     500:	77 81       	ldd	r23, Z+7	; 0x07
     502:	cb 01       	movw	r24, r22
     504:	2b 96       	adiw	r28, 0x0b	; 11
     506:	e2 e1       	ldi	r30, 0x12	; 18
     508:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__>

0000050c <strnlen_P>:
     50c:	fc 01       	movw	r30, r24
     50e:	05 90       	lpm	r0, Z+
     510:	61 50       	subi	r22, 0x01	; 1
     512:	70 40       	sbci	r23, 0x00	; 0
     514:	01 10       	cpse	r0, r1
     516:	d8 f7       	brcc	.-10     	; 0x50e <strnlen_P+0x2>
     518:	80 95       	com	r24
     51a:	90 95       	com	r25
     51c:	8e 0f       	add	r24, r30
     51e:	9f 1f       	adc	r25, r31
     520:	08 95       	ret

00000522 <strnlen>:
     522:	fc 01       	movw	r30, r24
     524:	61 50       	subi	r22, 0x01	; 1
     526:	70 40       	sbci	r23, 0x00	; 0
     528:	01 90       	ld	r0, Z+
     52a:	01 10       	cpse	r0, r1
     52c:	d8 f7       	brcc	.-10     	; 0x524 <strnlen+0x2>
     52e:	80 95       	com	r24
     530:	90 95       	com	r25
     532:	8e 0f       	add	r24, r30
     534:	9f 1f       	adc	r25, r31
     536:	08 95       	ret

00000538 <fputc>:
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	8c 01       	movw	r16, r24
     542:	eb 01       	movw	r28, r22
     544:	8b 81       	ldd	r24, Y+3	; 0x03
     546:	81 ff       	sbrs	r24, 1
     548:	1b c0       	rjmp	.+54     	; 0x580 <fputc+0x48>
     54a:	82 ff       	sbrs	r24, 2
     54c:	0d c0       	rjmp	.+26     	; 0x568 <fputc+0x30>
     54e:	2e 81       	ldd	r18, Y+6	; 0x06
     550:	3f 81       	ldd	r19, Y+7	; 0x07
     552:	8c 81       	ldd	r24, Y+4	; 0x04
     554:	9d 81       	ldd	r25, Y+5	; 0x05
     556:	28 17       	cp	r18, r24
     558:	39 07       	cpc	r19, r25
     55a:	64 f4       	brge	.+24     	; 0x574 <fputc+0x3c>
     55c:	e8 81       	ld	r30, Y
     55e:	f9 81       	ldd	r31, Y+1	; 0x01
     560:	01 93       	st	Z+, r16
     562:	f9 83       	std	Y+1, r31	; 0x01
     564:	e8 83       	st	Y, r30
     566:	06 c0       	rjmp	.+12     	; 0x574 <fputc+0x3c>
     568:	e8 85       	ldd	r30, Y+8	; 0x08
     56a:	f9 85       	ldd	r31, Y+9	; 0x09
     56c:	80 2f       	mov	r24, r16
     56e:	09 95       	icall
     570:	89 2b       	or	r24, r25
     572:	31 f4       	brne	.+12     	; 0x580 <fputc+0x48>
     574:	8e 81       	ldd	r24, Y+6	; 0x06
     576:	9f 81       	ldd	r25, Y+7	; 0x07
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	9f 83       	std	Y+7, r25	; 0x07
     57c:	8e 83       	std	Y+6, r24	; 0x06
     57e:	02 c0       	rjmp	.+4      	; 0x584 <fputc+0x4c>
     580:	0f ef       	ldi	r16, 0xFF	; 255
     582:	1f ef       	ldi	r17, 0xFF	; 255
     584:	c8 01       	movw	r24, r16
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <__ultoa_invert>:
     590:	fa 01       	movw	r30, r20
     592:	aa 27       	eor	r26, r26
     594:	28 30       	cpi	r18, 0x08	; 8
     596:	51 f1       	breq	.+84     	; 0x5ec <__ultoa_invert+0x5c>
     598:	20 31       	cpi	r18, 0x10	; 16
     59a:	81 f1       	breq	.+96     	; 0x5fc <__ultoa_invert+0x6c>
     59c:	e8 94       	clt
     59e:	6f 93       	push	r22
     5a0:	6e 7f       	andi	r22, 0xFE	; 254
     5a2:	6e 5f       	subi	r22, 0xFE	; 254
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	8f 4f       	sbci	r24, 0xFF	; 255
     5a8:	9f 4f       	sbci	r25, 0xFF	; 255
     5aa:	af 4f       	sbci	r26, 0xFF	; 255
     5ac:	b1 e0       	ldi	r27, 0x01	; 1
     5ae:	3e d0       	rcall	.+124    	; 0x62c <__ultoa_invert+0x9c>
     5b0:	b4 e0       	ldi	r27, 0x04	; 4
     5b2:	3c d0       	rcall	.+120    	; 0x62c <__ultoa_invert+0x9c>
     5b4:	67 0f       	add	r22, r23
     5b6:	78 1f       	adc	r23, r24
     5b8:	89 1f       	adc	r24, r25
     5ba:	9a 1f       	adc	r25, r26
     5bc:	a1 1d       	adc	r26, r1
     5be:	68 0f       	add	r22, r24
     5c0:	79 1f       	adc	r23, r25
     5c2:	8a 1f       	adc	r24, r26
     5c4:	91 1d       	adc	r25, r1
     5c6:	a1 1d       	adc	r26, r1
     5c8:	6a 0f       	add	r22, r26
     5ca:	71 1d       	adc	r23, r1
     5cc:	81 1d       	adc	r24, r1
     5ce:	91 1d       	adc	r25, r1
     5d0:	a1 1d       	adc	r26, r1
     5d2:	20 d0       	rcall	.+64     	; 0x614 <__ultoa_invert+0x84>
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <__ultoa_invert+0x48>
     5d6:	68 94       	set
     5d8:	3f 91       	pop	r19
     5da:	2a e0       	ldi	r18, 0x0A	; 10
     5dc:	26 9f       	mul	r18, r22
     5de:	11 24       	eor	r1, r1
     5e0:	30 19       	sub	r19, r0
     5e2:	30 5d       	subi	r19, 0xD0	; 208
     5e4:	31 93       	st	Z+, r19
     5e6:	de f6       	brtc	.-74     	; 0x59e <__ultoa_invert+0xe>
     5e8:	cf 01       	movw	r24, r30
     5ea:	08 95       	ret
     5ec:	46 2f       	mov	r20, r22
     5ee:	47 70       	andi	r20, 0x07	; 7
     5f0:	40 5d       	subi	r20, 0xD0	; 208
     5f2:	41 93       	st	Z+, r20
     5f4:	b3 e0       	ldi	r27, 0x03	; 3
     5f6:	0f d0       	rcall	.+30     	; 0x616 <__ultoa_invert+0x86>
     5f8:	c9 f7       	brne	.-14     	; 0x5ec <__ultoa_invert+0x5c>
     5fa:	f6 cf       	rjmp	.-20     	; 0x5e8 <__ultoa_invert+0x58>
     5fc:	46 2f       	mov	r20, r22
     5fe:	4f 70       	andi	r20, 0x0F	; 15
     600:	40 5d       	subi	r20, 0xD0	; 208
     602:	4a 33       	cpi	r20, 0x3A	; 58
     604:	18 f0       	brcs	.+6      	; 0x60c <__ultoa_invert+0x7c>
     606:	49 5d       	subi	r20, 0xD9	; 217
     608:	31 fd       	sbrc	r19, 1
     60a:	40 52       	subi	r20, 0x20	; 32
     60c:	41 93       	st	Z+, r20
     60e:	02 d0       	rcall	.+4      	; 0x614 <__ultoa_invert+0x84>
     610:	a9 f7       	brne	.-22     	; 0x5fc <__ultoa_invert+0x6c>
     612:	ea cf       	rjmp	.-44     	; 0x5e8 <__ultoa_invert+0x58>
     614:	b4 e0       	ldi	r27, 0x04	; 4
     616:	a6 95       	lsr	r26
     618:	97 95       	ror	r25
     61a:	87 95       	ror	r24
     61c:	77 95       	ror	r23
     61e:	67 95       	ror	r22
     620:	ba 95       	dec	r27
     622:	c9 f7       	brne	.-14     	; 0x616 <__ultoa_invert+0x86>
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	61 05       	cpc	r22, r1
     628:	71 05       	cpc	r23, r1
     62a:	08 95       	ret
     62c:	9b 01       	movw	r18, r22
     62e:	ac 01       	movw	r20, r24
     630:	0a 2e       	mov	r0, r26
     632:	06 94       	lsr	r0
     634:	57 95       	ror	r21
     636:	47 95       	ror	r20
     638:	37 95       	ror	r19
     63a:	27 95       	ror	r18
     63c:	ba 95       	dec	r27
     63e:	c9 f7       	brne	.-14     	; 0x632 <__ultoa_invert+0xa2>
     640:	62 0f       	add	r22, r18
     642:	73 1f       	adc	r23, r19
     644:	84 1f       	adc	r24, r20
     646:	95 1f       	adc	r25, r21
     648:	a0 1d       	adc	r26, r0
     64a:	08 95       	ret

0000064c <_ZL13setDayGallonsj>:
	dayGallons += (uint16_t)EEPROM.read(3)*256;
	dayGallons += (uint16_t)EEPROM.read(4);
	return dayGallons;
}

static void setDayGallons(uint16_t DayGallons)
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	8c 01       	movw	r16, r24
{
	uint8_t splitByte;
	splitByte = DayGallons/256;
     65e:	c1 2e       	mov	r12, r17
	EEPROM.write(3,splitByte);
     660:	9a e7       	ldi	r25, 0x7A	; 122
     662:	a9 2e       	mov	r10, r25
     664:	95 e0       	ldi	r25, 0x05	; 5
     666:	b9 2e       	mov	r11, r25
     668:	c5 01       	movw	r24, r10
     66a:	63 e0       	ldi	r22, 0x03	; 3
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	41 2f       	mov	r20, r17
     670:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
	DayGallons -= (uint32_t)(splitByte)*256;
	splitByte = DayGallons;
	EEPROM.write(4,DayGallons);
     674:	dd 24       	eor	r13, r13
     676:	ee 24       	eor	r14, r14
     678:	ff 24       	eor	r15, r15
     67a:	fe 2c       	mov	r15, r14
     67c:	ed 2c       	mov	r14, r13
     67e:	dc 2c       	mov	r13, r12
     680:	cc 24       	eor	r12, r12
     682:	0c 19       	sub	r16, r12
     684:	1d 09       	sbc	r17, r13
     686:	c5 01       	movw	r24, r10
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	40 2f       	mov	r20, r16
     68e:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
}
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	08 95       	ret

000006a4 <_ZL13writeLogEntryhm>:
	t_unix += (uint32_t)EEPROM.read(logStart+2)*256;
	t_unix += (uint32_t)EEPROM.read(logStart+3);
	return t_unix;
}

static void writeLogEntry(uint8_t startPos, uint32_t t_unix)
     6a4:	6f 92       	push	r6
     6a6:	7f 92       	push	r7
     6a8:	8f 92       	push	r8
     6aa:	9f 92       	push	r9
     6ac:	af 92       	push	r10
     6ae:	bf 92       	push	r11
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	5a 01       	movw	r10, r20
     6be:	6b 01       	movw	r12, r22
{
	// stores t_unix as 4 bytes
	uint8_t splitByte;
	splitByte = t_unix/16777216;
     6c0:	27 2f       	mov	r18, r23
     6c2:	33 27       	eor	r19, r19
     6c4:	44 27       	eor	r20, r20
     6c6:	55 27       	eor	r21, r21
     6c8:	e2 2e       	mov	r14, r18
	EEPROM.write(startPos,(char)splitByte);
     6ca:	88 2e       	mov	r8, r24
     6cc:	99 24       	eor	r9, r9
     6ce:	7a e7       	ldi	r23, 0x7A	; 122
     6d0:	67 2e       	mov	r6, r23
     6d2:	75 e0       	ldi	r23, 0x05	; 5
     6d4:	77 2e       	mov	r7, r23
     6d6:	c3 01       	movw	r24, r6
     6d8:	b4 01       	movw	r22, r8
     6da:	42 2f       	mov	r20, r18
     6dc:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
	t_unix -= (uint32_t)(splitByte)*16777216;
     6e0:	ff 24       	eor	r15, r15
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	1e 2d       	mov	r17, r14
     6e8:	00 27       	eor	r16, r16
     6ea:	ff 24       	eor	r15, r15
     6ec:	ee 24       	eor	r14, r14
     6ee:	ae 18       	sub	r10, r14
     6f0:	bf 08       	sbc	r11, r15
     6f2:	c0 0a       	sbc	r12, r16
     6f4:	d1 0a       	sbc	r13, r17
	splitByte = t_unix/65536;
     6f6:	96 01       	movw	r18, r12
     6f8:	44 27       	eor	r20, r20
     6fa:	55 27       	eor	r21, r21
     6fc:	e2 2e       	mov	r14, r18
	EEPROM.write(startPos+1,(char)splitByte);
     6fe:	08 94       	sec
     700:	81 1c       	adc	r8, r1
     702:	91 1c       	adc	r9, r1
     704:	c3 01       	movw	r24, r6
     706:	b4 01       	movw	r22, r8
     708:	42 2f       	mov	r20, r18
     70a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
	t_unix -= (uint32_t)(splitByte)*65536;
     70e:	ff 24       	eor	r15, r15
     710:	00 e0       	ldi	r16, 0x00	; 0
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	87 01       	movw	r16, r14
     716:	ff 24       	eor	r15, r15
     718:	ee 24       	eor	r14, r14
     71a:	ae 18       	sub	r10, r14
     71c:	bf 08       	sbc	r11, r15
     71e:	c0 0a       	sbc	r12, r16
     720:	d1 0a       	sbc	r13, r17
	splitByte = t_unix/256;
     722:	55 27       	eor	r21, r21
     724:	4d 2d       	mov	r20, r13
     726:	3c 2d       	mov	r19, r12
     728:	2b 2d       	mov	r18, r11
     72a:	e2 2e       	mov	r14, r18
	EEPROM.write(startPos+2,(char)splitByte);
     72c:	08 94       	sec
     72e:	81 1c       	adc	r8, r1
     730:	91 1c       	adc	r9, r1
     732:	c3 01       	movw	r24, r6
     734:	b4 01       	movw	r22, r8
     736:	42 2f       	mov	r20, r18
     738:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
	t_unix -= (uint32_t)(splitByte)*256;
	splitByte = t_unix;
	EEPROM.write(startPos+3,t_unix);
     73c:	08 94       	sec
     73e:	81 1c       	adc	r8, r1
     740:	91 1c       	adc	r9, r1
     742:	ff 24       	eor	r15, r15
     744:	00 e0       	ldi	r16, 0x00	; 0
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	10 2f       	mov	r17, r16
     74a:	0f 2d       	mov	r16, r15
     74c:	fe 2c       	mov	r15, r14
     74e:	ee 24       	eor	r14, r14
     750:	ae 18       	sub	r10, r14
     752:	bf 08       	sbc	r11, r15
     754:	c0 0a       	sbc	r12, r16
     756:	d1 0a       	sbc	r13, r17
     758:	c3 01       	movw	r24, r6
     75a:	b4 01       	movw	r22, r8
     75c:	4a 2d       	mov	r20, r10
     75e:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
}
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	8f 90       	pop	r8
     776:	7f 90       	pop	r7
     778:	6f 90       	pop	r6
     77a:	08 95       	ret

0000077c <_ZL9printTimev>:
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
}

static void printTime()
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	df 93       	push	r29
     782:	cf 93       	push	r28
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	2b 97       	sbiw	r28, 0x0b	; 11
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
{
	ts time;
	DS3234_get(DS3234_SS_PIN,&time);
     794:	8a e0       	ldi	r24, 0x0A	; 10
     796:	be 01       	movw	r22, r28
     798:	6f 5f       	subi	r22, 0xFF	; 255
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	fa d3       	rcall	.+2036   	; 0xf92 <_Z10DS3234_gethP2ts>
     79e:	8d b7       	in	r24, 0x3d	; 61
	sprintf(MessageBuffer,"%02u/%02u/%4d %02d:%02d:%02d\t",time.mon,time.mday,time.year,time.hour,time.min,time.sec);
     7a0:	9e b7       	in	r25, 0x3e	; 62
     7a2:	40 97       	sbiw	r24, 0x10	; 16
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	9e bf       	out	0x3e, r25	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	8d bf       	out	0x3d, r24	; 61
     7ae:	ed b7       	in	r30, 0x3d	; 61
     7b0:	fe b7       	in	r31, 0x3e	; 62
     7b2:	31 96       	adiw	r30, 0x01	; 1
     7b4:	00 e7       	ldi	r16, 0x70	; 112
     7b6:	12 e0       	ldi	r17, 0x02	; 2
     7b8:	ad b7       	in	r26, 0x3d	; 61
     7ba:	be b7       	in	r27, 0x3e	; 62
     7bc:	12 96       	adiw	r26, 0x02	; 2
     7be:	1c 93       	st	X, r17
     7c0:	0e 93       	st	-X, r16
     7c2:	11 97       	sbiw	r26, 0x01	; 1
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	93 83       	std	Z+3, r25	; 0x03
     7ca:	82 83       	std	Z+2, r24	; 0x02
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	84 83       	std	Z+4, r24	; 0x04
     7d0:	15 82       	std	Z+5, r1	; 0x05
     7d2:	8c 81       	ldd	r24, Y+4	; 0x04
     7d4:	86 83       	std	Z+6, r24	; 0x06
     7d6:	17 82       	std	Z+7, r1	; 0x07
     7d8:	8e 81       	ldd	r24, Y+6	; 0x06
     7da:	9f 81       	ldd	r25, Y+7	; 0x07
     7dc:	91 87       	std	Z+9, r25	; 0x09
     7de:	80 87       	std	Z+8, r24	; 0x08
     7e0:	8b 81       	ldd	r24, Y+3	; 0x03
     7e2:	82 87       	std	Z+10, r24	; 0x0a
     7e4:	13 86       	std	Z+11, r1	; 0x0b
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	84 87       	std	Z+12, r24	; 0x0c
     7ea:	15 86       	std	Z+13, r1	; 0x0d
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	86 87       	std	Z+14, r24	; 0x0e
     7f0:	17 86       	std	Z+15, r1	; 0x0f
     7f2:	99 dc       	rcall	.-1742   	; 0x126 <sprintf>
     7f4:	8d b7       	in	r24, 0x3d	; 61
     7f6:	9e b7       	in	r25, 0x3e	; 62
	Serial.println(MessageBuffer);
     7f8:	40 96       	adiw	r24, 0x10	; 16
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	9e bf       	out	0x3e, r25	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	8d bf       	out	0x3d, r24	; 61
     804:	8c e4       	ldi	r24, 0x4C	; 76
     806:	96 e0       	ldi	r25, 0x06	; 6
     808:	b8 01       	movw	r22, r16
     80a:	0e 94 a8 13 	call	0x2750	; 0x2750 <_ZN5Print7printlnEPKc>
     80e:	2b 96       	adiw	r28, 0x0b	; 11
     810:	0f b6       	in	r0, 0x3f	; 63
}
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <_ZL11printSerialv>:
uint8_t leak, interruptNo;

// Define Program Functions
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     824:	8c e4       	ldi	r24, 0x4C	; 76
     826:	96 e0       	ldi	r25, 0x06	; 6
     828:	60 e7       	ldi	r22, 0x70	; 112
     82a:	72 e0       	ldi	r23, 0x02	; 2
     82c:	0c 94 a6 13 	jmp	0x274c	; 0x274c <_ZN5Print5printEPKc>

00000830 <_ZL9openValvev>:
	return printSerial();
}

static uint8_t openValve()
{
	digitalWrite(VALVE_ENABLE_PIN,1);
     830:	87 e0       	ldi	r24, 0x07	; 7
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,1);
     838:	88 e0       	ldi	r24, 0x08	; 8
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     840:	89 e0       	ldi	r24, 0x09	; 9
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	delay(5000);
     848:	68 e8       	ldi	r22, 0x88	; 136
     84a:	73 e1       	ldi	r23, 0x13	; 19
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 ac 14 	call	0x2958	; 0x2958 <delay>
	Serial.println(MessageBuffer);
}

static void setValvePos(uint8_t pos)
{
	EEPROM.write(0,pos);
     854:	8a e7       	ldi	r24, 0x7A	; 122
     856:	95 e0       	ldi	r25, 0x05	; 5
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
	digitalWrite(VALVE_ENABLE_PIN,1);
	digitalWrite(VALVE_CONTROL_1_PIN,1);
	digitalWrite(VALVE_CONTROL_2_PIN,0);
	delay(5000);
	setValvePos(1);
	digitalWrite(VALVE_ENABLE_PIN,0);
     862:	87 e0       	ldi	r24, 0x07	; 7
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     86a:	88 e0       	ldi	r24, 0x08	; 8
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	printTime();
     872:	84 df       	rcall	.-248    	; 0x77c <_ZL9printTimev>
     874:	80 e7       	ldi	r24, 0x70	; 112
	sprintf(MessageBuffer,"Valve:\tOpened\n");
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	6e e1       	ldi	r22, 0x1E	; 30
     87a:	71 e0       	ldi	r23, 0x01	; 1
     87c:	4d dc       	rcall	.-1894   	; 0x118 <strcpy>
     87e:	d2 cf       	rjmp	.-92     	; 0x824 <_ZL11printSerialv>

00000880 <_ZL10closeValvev>:
	return EEPROM.read(2);
}

static uint8_t closeValve()
{
	digitalWrite(VALVE_ENABLE_PIN,1);
     880:	87 e0       	ldi	r24, 0x07	; 7
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     888:	88 e0       	ldi	r24, 0x08	; 8
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,1);
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	delay(5000);
     898:	68 e8       	ldi	r22, 0x88	; 136
     89a:	73 e1       	ldi	r23, 0x13	; 19
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 ac 14 	call	0x2958	; 0x2958 <delay>
	Serial.println(MessageBuffer);
}

static void setValvePos(uint8_t pos)
{
	EEPROM.write(0,pos);
     8a4:	8a e7       	ldi	r24, 0x7A	; 122
     8a6:	95 e0       	ldi	r25, 0x05	; 5
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
	digitalWrite(VALVE_ENABLE_PIN,1);
	digitalWrite(VALVE_CONTROL_1_PIN,0);
	digitalWrite(VALVE_CONTROL_2_PIN,1);
	delay(5000);
	setValvePos(0);
	digitalWrite(VALVE_ENABLE_PIN,0);
     8b2:	87 e0       	ldi	r24, 0x07	; 7
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     8ba:	89 e0       	ldi	r24, 0x09	; 9
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	printTime();
     8c2:	5c df       	rcall	.-328    	; 0x77c <_ZL9printTimev>
     8c4:	80 e7       	ldi	r24, 0x70	; 112
	sprintf(MessageBuffer,"Valve:\tClosed\n");
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	6d e2       	ldi	r22, 0x2D	; 45
     8ca:	71 e0       	ldi	r23, 0x01	; 1
     8cc:	25 dc       	rcall	.-1974   	; 0x118 <strcpy>
     8ce:	aa cf       	rjmp	.-172    	; 0x824 <_ZL11printSerialv>

000008d0 <_ZL8clearLogv>:
static void setConsecGallons(uint8_t gals)
{
	EEPROM.write(5,gals);
}

static uint8_t clearLog()
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
	return EEPROM.read(1);
}

static uint8_t getLastLogPos()
{
	return EEPROM.read(2);
     8d4:	8a e7       	ldi	r24, 0x7A	; 122
     8d6:	95 e0       	ldi	r25, 0x05	; 5
     8d8:	62 e0       	ldi	r22, 0x02	; 2
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
}

static uint8_t clearLog()
{
	uint8_t i;
	if (getLastLogPos()!=LOG_START_POS-1)
     8e0:	8f 30       	cpi	r24, 0x0F	; 15
     8e2:	99 f0       	breq	.+38     	; 0x90a <__stack+0xb>
     8e4:	c0 e1       	ldi	r28, 0x10	; 16
     8e6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(i=LOG_START_POS; i<=251; i++)
		{
			EEPROM.write(i,(char)0);
     8e8:	8a e7       	ldi	r24, 0x7A	; 122
     8ea:	95 e0       	ldi	r25, 0x05	; 5
     8ec:	be 01       	movw	r22, r28
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
     8f4:	21 96       	adiw	r28, 0x01	; 1
static uint8_t clearLog()
{
	uint8_t i;
	if (getLastLogPos()!=LOG_START_POS-1)
	{
		for(i=LOG_START_POS; i<=251; i++)
     8f6:	cc 3f       	cpi	r28, 0xFC	; 252
     8f8:	d1 05       	cpc	r29, r1
     8fa:	b1 f7       	brne	.-20     	; 0x8e8 <_ZL8clearLogv+0x18>
		{
			EEPROM.write(i,(char)0);
		}
		EEPROM.write(2,(uint8_t)(LOG_START_POS-1));
     8fc:	8a e7       	ldi	r24, 0x7A	; 122
     8fe:	95 e0       	ldi	r25, 0x05	; 5
     900:	62 e0       	ldi	r22, 0x02	; 2
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	4f e0       	ldi	r20, 0x0F	; 15
     906:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
	}
	printTime();
     90a:	38 df       	rcall	.-400    	; 0x77c <_ZL9printTimev>
     90c:	80 e7       	ldi	r24, 0x70	; 112
	sprintf(MessageBuffer,"Log:\tCleared\n");
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	6c e3       	ldi	r22, 0x3C	; 60
     912:	71 e0       	ldi	r23, 0x01	; 1
     914:	01 dc       	rcall	.-2046   	; 0x118 <strcpy>
     916:	86 df       	rcall	.-244    	; 0x824 <_ZL11printSerialv>
     918:	df 91       	pop	r29
	return printSerial();
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <_ZL11resetSystemv>:
}

static uint8_t resetSystem()
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
{
	openValve();
     922:	86 df       	rcall	.-244    	; 0x830 <_ZL9openValvev>
     924:	d5 df       	rcall	.-86     	; 0x8d0 <_ZL8clearLogv>
	clearLog();
     926:	0a e7       	ldi	r16, 0x7A	; 122
     928:	15 e0       	ldi	r17, 0x05	; 5
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     92a:	c8 01       	movw	r24, r16
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t resetSystem()
{
	openValve();
	clearLog();
	setLeakCondition(0);
	setDayGallons(0);
     93a:	88 de       	rcall	.-752    	; 0x64c <_ZL13setDayGallonsj>
     93c:	c8 01       	movw	r24, r16
     93e:	65 e0       	ldi	r22, 0x05	; 5
     940:	70 e0       	ldi	r23, 0x00	; 0
	return EEPROM.read(5);
}

static void setConsecGallons(uint8_t gals)
{
	EEPROM.write(5,gals);
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
     948:	19 df       	rcall	.-462    	; 0x77c <_ZL9printTimev>
     94a:	80 e7       	ldi	r24, 0x70	; 112
     94c:	92 e0       	ldi	r25, 0x02	; 2
	openValve();
	clearLog();
	setLeakCondition(0);
	setDayGallons(0);
	setConsecGallons(0);
	printTime();
     94e:	6a e4       	ldi	r22, 0x4A	; 74
     950:	71 e0       	ldi	r23, 0x01	; 1
	sprintf(MessageBuffer,"System Reset\n");
     952:	e2 db       	rcall	.-2108   	; 0x118 <strcpy>
     954:	67 df       	rcall	.-306    	; 0x824 <_ZL11printSerialv>
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <_ZL10reportLeakv>:
	return 0;									// no leak detected
}

static uint8_t reportLeak()
{
	printTime();
     95c:	0f df       	rcall	.-482    	; 0x77c <_ZL9printTimev>
     95e:	8a e7       	ldi	r24, 0x7A	; 122
	return EEPROM.read(0);
}

static uint8_t wasLeakDetected()
{
	return EEPROM.read(1);
     960:	95 e0       	ldi	r25, 0x05	; 5
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     96a:	81 30       	cpi	r24, 0x01	; 1
}

static uint8_t reportLeak()
{
	printTime();
	switch (wasLeakDetected())
     96c:	51 f0       	breq	.+20     	; 0x982 <_ZL10reportLeakv+0x26>
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	18 f0       	brcs	.+6      	; 0x978 <_ZL10reportLeakv+0x1c>
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	81 f4       	brne	.+32     	; 0x996 <_ZL10reportLeakv+0x3a>
     976:	0a c0       	rjmp	.+20     	; 0x98c <_ZL10reportLeakv+0x30>
     978:	80 e7       	ldi	r24, 0x70	; 112
	{
		case 0:
			sprintf(MessageBuffer,"Leak:\tNo leaks detected.\n");
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	68 e5       	ldi	r22, 0x58	; 88
     97e:	71 e0       	ldi	r23, 0x01	; 1
     980:	09 c0       	rjmp	.+18     	; 0x994 <_ZL10reportLeakv+0x38>
     982:	80 e7       	ldi	r24, 0x70	; 112
			break;
		case 1:
			sprintf(MessageBuffer,"Leak:\tPossible leak detected: More than 1000 gallons used in a 24 hour period.\n");
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	62 e7       	ldi	r22, 0x72	; 114
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	04 c0       	rjmp	.+8      	; 0x994 <_ZL10reportLeakv+0x38>
     98c:	80 e7       	ldi	r24, 0x70	; 112
			break;
		case 2:
			sprintf(MessageBuffer,"Leak:\tPossible leak detected: Flow rate >=1 GMP for 120 consecutive minutes.\n");
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	62 ec       	ldi	r22, 0xC2	; 194
     992:	71 e0       	ldi	r23, 0x01	; 1
     994:	c1 db       	rcall	.-2174   	; 0x118 <strcpy>
     996:	46 cf       	rjmp	.-372    	; 0x824 <_ZL11printSerialv>

00000998 <_ZL12readLogEntryh>:
	sprintf(MessageBuffer,"Valve:\tOpened\n");
	return printSerial();
}


static uint32_t readLogEntry(uint8_t logStart)
     998:	2f 92       	push	r2
     99a:	3f 92       	push	r3
     99c:	4f 92       	push	r4
     99e:	5f 92       	push	r5
     9a0:	6f 92       	push	r6
     9a2:	7f 92       	push	r7
     9a4:	8f 92       	push	r8
     9a6:	9f 92       	push	r9
     9a8:	af 92       	push	r10
     9aa:	bf 92       	push	r11
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
{
	uint32_t t_unix = 0;
	t_unix += (uint32_t)EEPROM.read(logStart)*16777216;
     9b8:	88 2e       	mov	r8, r24
     9ba:	99 24       	eor	r9, r9
     9bc:	1a e7       	ldi	r17, 0x7A	; 122
     9be:	21 2e       	mov	r2, r17
     9c0:	15 e0       	ldi	r17, 0x05	; 5
     9c2:	31 2e       	mov	r3, r17
     9c4:	c1 01       	movw	r24, r2
     9c6:	b4 01       	movw	r22, r8
     9c8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     9cc:	e8 2e       	mov	r14, r24
	t_unix += (uint32_t)EEPROM.read(logStart+1)*65536;
     9ce:	08 94       	sec
     9d0:	81 1c       	adc	r8, r1
     9d2:	91 1c       	adc	r9, r1
     9d4:	c1 01       	movw	r24, r2
     9d6:	b4 01       	movw	r22, r8
     9d8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     9dc:	48 2e       	mov	r4, r24
	t_unix += (uint32_t)EEPROM.read(logStart+2)*256;
     9de:	08 94       	sec
     9e0:	81 1c       	adc	r8, r1
     9e2:	91 1c       	adc	r9, r1
     9e4:	c1 01       	movw	r24, r2
     9e6:	b4 01       	movw	r22, r8
     9e8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     9ec:	a8 2e       	mov	r10, r24
	t_unix += (uint32_t)EEPROM.read(logStart+3);
     9ee:	08 94       	sec
     9f0:	81 1c       	adc	r8, r1
     9f2:	91 1c       	adc	r9, r1
     9f4:	c1 01       	movw	r24, r2
     9f6:	b4 01       	movw	r22, r8
     9f8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>

static uint32_t readLogEntry(uint8_t logStart)
{
	uint32_t t_unix = 0;
	t_unix += (uint32_t)EEPROM.read(logStart)*16777216;
	t_unix += (uint32_t)EEPROM.read(logStart+1)*65536;
     9fc:	ff 24       	eor	r15, r15
     9fe:	00 e0       	ldi	r16, 0x00	; 0
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	1e 2d       	mov	r17, r14
     a04:	00 27       	eor	r16, r16
     a06:	ff 24       	eor	r15, r15
     a08:	ee 24       	eor	r14, r14
     a0a:	55 24       	eor	r5, r5
     a0c:	66 24       	eor	r6, r6
     a0e:	77 24       	eor	r7, r7
     a10:	32 01       	movw	r6, r4
     a12:	55 24       	eor	r5, r5
     a14:	44 24       	eor	r4, r4
     a16:	e4 0c       	add	r14, r4
     a18:	f5 1c       	adc	r15, r5
     a1a:	06 1d       	adc	r16, r6
     a1c:	17 1d       	adc	r17, r7
	t_unix += (uint32_t)EEPROM.read(logStart+2)*256;
     a1e:	e8 0e       	add	r14, r24
     a20:	f1 1c       	adc	r15, r1
     a22:	01 1d       	adc	r16, r1
     a24:	11 1d       	adc	r17, r1
     a26:	bb 24       	eor	r11, r11
     a28:	cc 24       	eor	r12, r12
     a2a:	dd 24       	eor	r13, r13
     a2c:	dc 2c       	mov	r13, r12
     a2e:	cb 2c       	mov	r12, r11
     a30:	ba 2c       	mov	r11, r10
     a32:	aa 24       	eor	r10, r10
     a34:	ea 0c       	add	r14, r10
     a36:	fb 1c       	adc	r15, r11
     a38:	0c 1d       	adc	r16, r12
     a3a:	1d 1d       	adc	r17, r13
	t_unix += (uint32_t)EEPROM.read(logStart+3);
	return t_unix;
}
     a3c:	b7 01       	movw	r22, r14
     a3e:	c8 01       	movw	r24, r16
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	9f 90       	pop	r9
     a52:	8f 90       	pop	r8
     a54:	7f 90       	pop	r7
     a56:	6f 90       	pop	r6
     a58:	5f 90       	pop	r5
     a5a:	4f 90       	pop	r4
     a5c:	3f 90       	pop	r3
     a5e:	2f 90       	pop	r2
     a60:	08 95       	ret

00000a62 <_ZL9reportLogv>:
	attachInterrupt(0,radioInterrupt,LOW);
	attachInterrupt(1,meterInterrupt,FALLING);		// TODO: fix this falling interrupt wont work, need change interrupt
	LowPower.powerDown(SLEEP_8S,ADC_OFF,BOD_OFF);
}

static uint8_t reportLog()
     a62:	cf 92       	push	r12
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
	return EEPROM.read(1);
}

static uint8_t getLastLogPos()
{
	return EEPROM.read(2);
     a72:	8a e7       	ldi	r24, 0x7A	; 122
     a74:	95 e0       	ldi	r25, 0x05	; 5
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     a7e:	08 2f       	mov	r16, r24

static uint8_t reportLog()
{
	uint8_t lastLog = getLastLogPos();
	uint8_t i;
	printTime();
     a80:	7d de       	rcall	.-774    	; 0x77c <_ZL9printTimev>
     a82:	80 e7       	ldi	r24, 0x70	; 112
	sprintf(MessageBuffer,"Gallon Log:\n");
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	60 e1       	ldi	r22, 0x10	; 16
     a88:	72 e0       	ldi	r23, 0x02	; 2
     a8a:	46 db       	rcall	.-2420   	; 0x118 <strcpy>
     a8c:	cb de       	rcall	.-618    	; 0x824 <_ZL11printSerialv>
     a8e:	0f 30       	cpi	r16, 0x0F	; 15
	printSerial();
     a90:	61 f0       	breq	.+24     	; 0xaaa <_ZL9reportLogv+0x48>
     a92:	10 e1       	ldi	r17, 0x10	; 16
	if (lastLog == LOG_START_POS-1)
     a94:	c4 e0       	ldi	r28, 0x04	; 4
     a96:	d0 e0       	ldi	r29, 0x00	; 0
     a98:	60 e7       	ldi	r22, 0x70	; 112
     a9a:	c6 2e       	mov	r12, r22
     a9c:	62 e0       	ldi	r22, 0x02	; 2
		for (i=LOG_START_POS;i<lastLog;i++)
		{
			if(i%4 == 0)
			{
				printTime();
				sprintf(MessageBuffer,"%u\t%lu\n",(i-12)/4,readLogEntry((i)));
     a9e:	d6 2e       	mov	r13, r22
     aa0:	54 e2       	ldi	r21, 0x24	; 36
     aa2:	e5 2e       	mov	r14, r21
     aa4:	52 e0       	ldi	r21, 0x02	; 2
     aa6:	f5 2e       	mov	r15, r21
     aa8:	3c c0       	rjmp	.+120    	; 0xb22 <_ZL9reportLogv+0xc0>
     aaa:	80 e7       	ldi	r24, 0x70	; 112
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	6d e1       	ldi	r22, 0x1D	; 29
	printTime();
	sprintf(MessageBuffer,"Gallon Log:\n");
	printSerial();
	if (lastLog == LOG_START_POS-1)
	{
		sprintf(MessageBuffer,"Empty\n");
     ab0:	72 e0       	ldi	r23, 0x02	; 2
     ab2:	32 db       	rcall	.-2460   	; 0x118 <strcpy>
     ab4:	b7 de       	rcall	.-658    	; 0x824 <_ZL11printSerialv>
     ab6:	37 c0       	rjmp	.+110    	; 0xb26 <_ZL9reportLogv+0xc4>
     ab8:	81 2f       	mov	r24, r17
     aba:	90 e0       	ldi	r25, 0x00	; 0
		printSerial();
     abc:	83 70       	andi	r24, 0x03	; 3
     abe:	90 70       	andi	r25, 0x00	; 0
     ac0:	89 2b       	or	r24, r25
	}
	else
	{
		for (i=LOG_START_POS;i<lastLog;i++)
		{
			if(i%4 == 0)
     ac2:	69 f5       	brne	.+90     	; 0xb1e <_ZL9reportLogv+0xbc>
     ac4:	5b de       	rcall	.-842    	; 0x77c <_ZL9printTimev>
     ac6:	81 2f       	mov	r24, r17
     ac8:	67 df       	rcall	.-306    	; 0x998 <_ZL12readLogEntryh>
     aca:	2d b7       	in	r18, 0x3d	; 61
     acc:	3e b7       	in	r19, 0x3e	; 62
			{
				printTime();
     ace:	2a 50       	subi	r18, 0x0A	; 10
     ad0:	30 40       	sbci	r19, 0x00	; 0
				sprintf(MessageBuffer,"%u\t%lu\n",(i-12)/4,readLogEntry((i)));
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	3e bf       	out	0x3e, r19	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	2d bf       	out	0x3d, r18	; 61
     adc:	ed b7       	in	r30, 0x3d	; 61
     ade:	fe b7       	in	r31, 0x3e	; 62
     ae0:	31 96       	adiw	r30, 0x01	; 1
     ae2:	ad b7       	in	r26, 0x3d	; 61
     ae4:	be b7       	in	r27, 0x3e	; 62
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	dc 92       	st	X, r13
     aea:	ce 92       	st	-X, r12
     aec:	11 97       	sbiw	r26, 0x01	; 1
     aee:	f3 82       	std	Z+3, r15	; 0x03
     af0:	e2 82       	std	Z+2, r14	; 0x02
     af2:	9e 01       	movw	r18, r28
     af4:	35 95       	asr	r19
     af6:	27 95       	ror	r18
     af8:	35 95       	asr	r19
     afa:	27 95       	ror	r18
     afc:	35 83       	std	Z+5, r19	; 0x05
     afe:	24 83       	std	Z+4, r18	; 0x04
     b00:	66 83       	std	Z+6, r22	; 0x06
     b02:	77 83       	std	Z+7, r23	; 0x07
     b04:	80 87       	std	Z+8, r24	; 0x08
     b06:	91 87       	std	Z+9, r25	; 0x09
     b08:	0e db       	rcall	.-2532   	; 0x126 <sprintf>
     b0a:	2d b7       	in	r18, 0x3d	; 61
     b0c:	3e b7       	in	r19, 0x3e	; 62
     b0e:	26 5f       	subi	r18, 0xF6	; 246
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	3e bf       	out	0x3e, r19	; 62
     b18:	0f be       	out	0x3f, r0	; 63
				printSerial();
     b1a:	2d bf       	out	0x3d, r18	; 61
     b1c:	83 de       	rcall	.-762    	; 0x824 <_ZL11printSerialv>
     b1e:	1f 5f       	subi	r17, 0xFF	; 255
     b20:	21 96       	adiw	r28, 0x01	; 1
     b22:	10 17       	cp	r17, r16
     b24:	48 f2       	brcs	.-110    	; 0xab8 <_ZL9reportLogv+0x56>
     b26:	2a de       	rcall	.-940    	; 0x77c <_ZL9printTimev>
     b28:	80 e7       	ldi	r24, 0x70	; 112
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	6c e2       	ldi	r22, 0x2C	; 44
     b2e:	72 e0       	ldi	r23, 0x02	; 2
		sprintf(MessageBuffer,"Empty\n");
		printSerial();
	}
	else
	{
		for (i=LOG_START_POS;i<lastLog;i++)
     b30:	f3 da       	rcall	.-2586   	; 0x118 <strcpy>
     b32:	78 de       	rcall	.-784    	; 0x824 <_ZL11printSerialv>
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
				printSerial();
			}

		}
	}
	printTime();
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
	sprintf(MessageBuffer,"End Log\n");
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	08 95       	ret

00000b46 <loop>:

	// Set Global Variables
	leak = 0;
}

void loop()
     b46:	3f 92       	push	r3
     b48:	4f 92       	push	r4
     b4a:	5f 92       	push	r5
     b4c:	6f 92       	push	r6
     b4e:	7f 92       	push	r7
     b50:	8f 92       	push	r8
     b52:	9f 92       	push	r9
     b54:	af 92       	push	r10
     b56:	bf 92       	push	r11
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	2b 97       	sbiw	r28, 0x0b	; 11
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
{
	leak = 0;
     b78:	10 92 6e 02 	sts	0x026E, r1
	// TODO: fix logical control
	if (digitalRead(RST_PIN))
     b7c:	86 e0       	ldi	r24, 0x06	; 6
     b7e:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <digitalRead>
     b82:	89 2b       	or	r24, r25
     b84:	09 f0       	breq	.+2      	; 0xb88 <loop+0x42>
	{
		// manually reset system if INPUT 1 is held
		resetSystem();
     b86:	cb de       	rcall	.-618    	; 0x91e <_ZL11resetSystemv>
     b88:	82 e0       	ldi	r24, 0x02	; 2
	}

	if (digitalRead(ALARM_PIN))
     b8a:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <digitalRead>
     b8e:	89 2b       	or	r24, r25
     b90:	09 f0       	breq	.+2      	; 0xb94 <loop+0x4e>
     b92:	ae c0       	rjmp	.+348    	; 0xcf0 <loop+0x1aa>
     b94:	80 91 6f 02 	lds	r24, 0x026F
		reportLog();
		reportLeak();
		clearLog();
	}

	else if (interruptNo == 2)
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	09 f0       	breq	.+2      	; 0xb9e <loop+0x58>
     b9c:	f7 c0       	rjmp	.+494    	; 0xd8c <loop+0x246>
     b9e:	eb d2       	rcall	.+1494   	; 0x1176 <_Z15DS3234_get_unixv>
static void logGallon()
{
	ts time;
	uint32_t t_unix = 0;
	uint8_t lastLog;
	t_unix = DS3234_get_unix();
     ba0:	5b 01       	movw	r10, r22
     ba2:	6c 01       	movw	r12, r24
     ba4:	8a e7       	ldi	r24, 0x7A	; 122
     ba6:	95 e0       	ldi	r25, 0x05	; 5
	return EEPROM.read(1);
}

static uint8_t getLastLogPos()
{
	return EEPROM.read(2);
     ba8:	62 e0       	ldi	r22, 0x02	; 2
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     bb0:	18 2f       	mov	r17, r24
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	be 01       	movw	r22, r28
	ts time;
	uint32_t t_unix = 0;
	uint8_t lastLog;
	t_unix = DS3234_get_unix();
	lastLog = getLastLogPos();
	DS3234_get(DS3234_SS_PIN,&time);
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	eb d1       	rcall	.+982    	; 0xf92 <_Z10DS3234_gethP2ts>
     bbc:	1b 3f       	cpi	r17, 0xFB	; 251
     bbe:	10 f0       	brcs	.+4      	; 0xbc4 <loop+0x7e>
     bc0:	50 df       	rcall	.-352    	; 0xa62 <_ZL9reportLogv>

	if (lastLog>=251)
     bc2:	86 de       	rcall	.-756    	; 0x8d0 <_ZL8clearLogv>
     bc4:	8a e7       	ldi	r24, 0x7A	; 122
	{
		reportLog();
     bc6:	95 e0       	ldi	r25, 0x05	; 5
     bc8:	62 e0       	ldi	r22, 0x02	; 2
		clearLog();
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
	return EEPROM.read(1);
}

static uint8_t getLastLogPos()
{
	return EEPROM.read(2);
     bd0:	18 2f       	mov	r17, r24
     bd2:	8f 5f       	subi	r24, 0xFF	; 255
     bd4:	b6 01       	movw	r22, r12
     bd6:	a5 01       	movw	r20, r10
     bd8:	65 dd       	rcall	.-1334   	; 0x6a4 <_ZL13writeLogEntryhm>
     bda:	1c 5f       	subi	r17, 0xFC	; 252
		reportLog();
		clearLog();
	}

	lastLog = getLastLogPos();
	writeLogEntry(lastLog+1,t_unix);				// writes gallon to log
     bdc:	8a e7       	ldi	r24, 0x7A	; 122
     bde:	95 e0       	ldi	r25, 0x05	; 5
     be0:	62 e0       	ldi	r22, 0x02	; 2
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	41 2f       	mov	r20, r17
	EEPROM.write(2,lastLog+4);						// sets last log position
     be6:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
     bea:	8a e7       	ldi	r24, 0x7A	; 122
     bec:	95 e0       	ldi	r25, 0x05	; 5
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
	return EEPROM.read(0);
}

static uint8_t wasLeakDetected()
{
	return EEPROM.read(1);
     bf6:	88 23       	and	r24, r24
     bf8:	09 f0       	breq	.+2      	; 0xbfc <loop+0xb6>
     bfa:	c8 c0       	rjmp	.+400    	; 0xd8c <loop+0x246>
     bfc:	8a e7       	ldi	r24, 0x7A	; 122
     bfe:	95 e0       	ldi	r25, 0x05	; 5
     c00:	63 e0       	ldi	r22, 0x03	; 3

	else if (interruptNo == 2)
	{
		logGallon();
		// check if a leak was previously detected
		if (wasLeakDetected()==0)
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
}

static uint16_t getDayGallons()
{
	uint16_t dayGallons = 0;
	dayGallons += (uint16_t)EEPROM.read(3)*256;
     c08:	38 2e       	mov	r3, r24
     c0a:	8a e7       	ldi	r24, 0x7A	; 122
     c0c:	95 e0       	ldi	r25, 0x05	; 5
     c0e:	64 e0       	ldi	r22, 0x04	; 4
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
	dayGallons += (uint16_t)EEPROM.read(4);
     c16:	48 2e       	mov	r4, r24
     c18:	8a e7       	ldi	r24, 0x7A	; 122
     c1a:	95 e0       	ldi	r25, 0x05	; 5
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
	return EEPROM.read(1);
}

static uint8_t getLastLogPos()
{
	return EEPROM.read(2);
     c24:	83 50       	subi	r24, 0x03	; 3
     c26:	b8 de       	rcall	.-656    	; 0x998 <_ZL12readLogEntryh>
     c28:	5b 01       	movw	r10, r22
     c2a:	6c 01       	movw	r12, r24
     c2c:	8a e7       	ldi	r24, 0x7A	; 122
     c2e:	95 e0       	ldi	r25, 0x05	; 5
}

static uint8_t checkForLeaks()
{
	uint16_t dayGallons = getDayGallons();
	uint32_t t_lastLog = readLogEntry(getLastLogPos()-3);
     c30:	62 e0       	ldi	r22, 0x02	; 2
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     c38:	87 50       	subi	r24, 0x07	; 7
	return EEPROM.read(1);
}

static uint8_t getLastLogPos()
{
	return EEPROM.read(2);
     c3a:	ae de       	rcall	.-676    	; 0x998 <_ZL12readLogEntryh>
     c3c:	3b 01       	movw	r6, r22
     c3e:	4c 01       	movw	r8, r24
     c40:	88 e0       	ldi	r24, 0x08	; 8
     c42:	aa de       	rcall	.-684    	; 0x998 <_ZL12readLogEntryh>
     c44:	7b 01       	movw	r14, r22

static uint8_t checkForLeaks()
{
	uint16_t dayGallons = getDayGallons();
	uint32_t t_lastLog = readLogEntry(getLastLogPos()-3);
	uint32_t t_prevLog = readLogEntry(getLastLogPos()-7);
     c46:	8c 01       	movw	r16, r24
     c48:	8a e7       	ldi	r24, 0x7A	; 122
     c4a:	95 e0       	ldi	r25, 0x05	; 5
     c4c:	65 e0       	ldi	r22, 0x05	; 5
     c4e:	70 e0       	ldi	r23, 0x00	; 0
	uint32_t t_dayStart = readLogEntry(8);
     c50:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     c54:	58 2e       	mov	r5, r24
     c56:	d6 01       	movw	r26, r12
     c58:	c5 01       	movw	r24, r10
	EEPROM.write(4,DayGallons);
}

static uint8_t getConsecGallons()
{
	return EEPROM.read(5);
     c5a:	8e 19       	sub	r24, r14
     c5c:	9f 09       	sbc	r25, r15
     c5e:	a0 0b       	sbc	r26, r16
     c60:	b1 0b       	sbc	r27, r17
     c62:	80 58       	subi	r24, 0x80	; 128
     c64:	91 45       	sbci	r25, 0x51	; 81
     c66:	a1 40       	sbci	r26, 0x01	; 1
	uint32_t t_lastLog = readLogEntry(getLastLogPos()-3);
	uint32_t t_prevLog = readLogEntry(getLastLogPos()-7);
	uint32_t t_dayStart = readLogEntry(8);
	uint8_t prevConsMins = getConsecGallons();

	if (t_lastLog - t_dayStart >= 86400)		// full day has passed
     c68:	b0 40       	sbci	r27, 0x00	; 0
     c6a:	40 f0       	brcs	.+16     	; 0xc7c <loop+0x136>
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	b6 01       	movw	r22, r12
     c70:	a5 01       	movw	r20, r10
     c72:	18 dd       	rcall	.-1488   	; 0x6a4 <_ZL13writeLogEntryhm>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	e9 dc       	rcall	.-1582   	; 0x64c <_ZL13setDayGallonsj>
     c7a:	0f c0       	rjmp	.+30     	; 0xc9a <loop+0x154>
     c7c:	04 2d       	mov	r16, r4
	{
		writeLogEntry(8,t_lastLog);				// reset day start time
     c7e:	10 e0       	ldi	r17, 0x00	; 0
     c80:	0f 5f       	subi	r16, 0xFF	; 255
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	93 2d       	mov	r25, r3
     c86:	80 e0       	ldi	r24, 0x00	; 0
		setDayGallons(0);						// reset day counter
     c88:	08 0f       	add	r16, r24
     c8a:	19 1f       	adc	r17, r25
     c8c:	c8 01       	movw	r24, r16
     c8e:	de dc       	rcall	.-1604   	; 0x64c <_ZL13setDayGallonsj>
     c90:	08 5e       	subi	r16, 0xE8	; 232

static uint16_t getDayGallons()
{
	uint16_t dayGallons = 0;
	dayGallons += (uint16_t)EEPROM.read(3)*256;
	dayGallons += (uint16_t)EEPROM.read(4);
     c92:	13 40       	sbci	r17, 0x03	; 3
     c94:	10 f0       	brcs	.+4      	; 0xc9a <loop+0x154>
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	1f c0       	rjmp	.+62     	; 0xcd8 <loop+0x192>
		writeLogEntry(8,t_lastLog);				// reset day start time
		setDayGallons(0);						// reset day counter
	}
	else
	{
		setDayGallons(++dayGallons);			// add gallon to daily log
     c9a:	a6 18       	sub	r10, r6
     c9c:	b7 08       	sbc	r11, r7
     c9e:	c8 08       	sbc	r12, r8
     ca0:	d9 08       	sbc	r13, r9
     ca2:	2d e3       	ldi	r18, 0x3D	; 61
     ca4:	a2 16       	cp	r10, r18
     ca6:	b1 04       	cpc	r11, r1
		if (dayGallons >= 1000)
     ca8:	c1 04       	cpc	r12, r1
     caa:	d1 04       	cpc	r13, r1
     cac:	68 f4       	brcc	.+26     	; 0xcc8 <loop+0x182>
     cae:	15 2d       	mov	r17, r5
     cb0:	1f 5f       	subi	r17, 0xFF	; 255
		{
			return 1;							// more than 1000 gallons used in one day
		}
	}

	if (t_lastLog - t_prevLog <= 60)			// check if a minute has passed since last gallon logged
     cb2:	8a e7       	ldi	r24, 0x7A	; 122
     cb4:	95 e0       	ldi	r25, 0x05	; 5
     cb6:	65 e0       	ldi	r22, 0x05	; 5
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	41 2f       	mov	r20, r17
     cbc:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
     cc0:	18 37       	cpi	r17, 0x78	; 120
     cc2:	48 f0       	brcs	.+18     	; 0xcd6 <loop+0x190>
     cc4:	42 e0       	ldi	r20, 0x02	; 2
	{
		setConsecGallons(++prevConsMins);		// log consecutive gallon
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <loop+0x192>
     cc8:	8a e7       	ldi	r24, 0x7A	; 122
	return EEPROM.read(5);
}

static void setConsecGallons(uint8_t gals)
{
	EEPROM.write(5,gals);
     cca:	95 e0       	ldi	r25, 0x05	; 5
     ccc:	65 e0       	ldi	r22, 0x05	; 5
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
     cd6:	40 e0       	ldi	r20, 0x00	; 0
	}

	if (t_lastLog - t_prevLog <= 60)			// check if a minute has passed since last gallon logged
	{
		setConsecGallons(++prevConsMins);		// log consecutive gallon
		if (prevConsMins >= 120)
     cd8:	40 93 6e 02 	sts	0x026E, r20
     cdc:	44 23       	and	r20, r20
     cde:	09 f4       	brne	.+2      	; 0xce2 <loop+0x19c>
	return EEPROM.read(5);
}

static void setConsecGallons(uint8_t gals)
{
	EEPROM.write(5,gals);
     ce0:	55 c0       	rjmp	.+170    	; 0xd8c <loop+0x246>
     ce2:	8a e7       	ldi	r24, 0x7A	; 122
     ce4:	95 e0       	ldi	r25, 0x05	; 5
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
     cee:	c8 dd       	rcall	.-1136   	; 0x880 <_ZL10closeValvev>
		logGallon();
		// check if a leak was previously detected
		if (wasLeakDetected()==0)
		{
			// if a new leak is detected, log it, report it, and turn off the valve
			leak = checkForLeaks();
     cf0:	b8 de       	rcall	.-656    	; 0xa62 <_ZL9reportLogv>
     cf2:	34 de       	rcall	.-920    	; 0x95c <_ZL10reportLeakv>
			if (leak!=0)
     cf4:	ed dd       	rcall	.-1062   	; 0x8d0 <_ZL8clearLogv>
     cf6:	4a c0       	rjmp	.+148    	; 0xd8c <loop+0x246>
     cf8:	8c e4       	ldi	r24, 0x4C	; 76
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     cfa:	96 e0       	ldi	r25, 0x06	; 6
     cfc:	0e 94 6f 12 	call	0x24de	; 0x24de <_ZN14HardwareSerial4readEv>
     d00:	8c 36       	cpi	r24, 0x6C	; 108
     d02:	e1 f0       	breq	.+56     	; 0xd3c <loop+0x1f6>
     d04:	8d 36       	cpi	r24, 0x6D	; 109
			// if a new leak is detected, log it, report it, and turn off the valve
			leak = checkForLeaks();
			if (leak!=0)
			{
				setLeakCondition(leak);
				closeValve();
     d06:	40 f4       	brcc	.+16     	; 0xd18 <loop+0x1d2>
     d08:	88 36       	cpi	r24, 0x68	; 104
				reportLog();
     d0a:	81 f1       	breq	.+96     	; 0xd6c <loop+0x226>
     d0c:	8b 36       	cpi	r24, 0x6B	; 107
				reportLeak();
     d0e:	81 f1       	breq	.+96     	; 0xd70 <loop+0x22a>
     d10:	83 36       	cpi	r24, 0x63	; 99
				clearLog();
     d12:	09 f0       	breq	.+2      	; 0xd16 <loop+0x1d0>
     d14:	3b c0       	rjmp	.+118    	; 0xd8c <loop+0x246>
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <loop+0x1ee>

static void checkRadioCommands()
{
	while(Serial.available())
	{
		processRadio(Serial.read());
     d18:	81 37       	cpi	r24, 0x71	; 113
     d1a:	61 f3       	breq	.-40     	; 0xcf4 <loop+0x1ae>
     d1c:	82 37       	cpi	r24, 0x72	; 114
     d1e:	18 f4       	brcc	.+6      	; 0xd26 <loop+0x1e0>
	return printSerial();
}

static void processRadio(uint8_t Signal)
{
	switch (Signal)
     d20:	8f 36       	cpi	r24, 0x6F	; 111
     d22:	a1 f5       	brne	.+104    	; 0xd8c <loop+0x246>
     d24:	09 c0       	rjmp	.+18     	; 0xd38 <loop+0x1f2>
     d26:	82 37       	cpi	r24, 0x72	; 114
     d28:	19 f0       	breq	.+6      	; 0xd30 <loop+0x1ea>
     d2a:	86 37       	cpi	r24, 0x76	; 118
     d2c:	79 f5       	brne	.+94     	; 0xd8c <loop+0x246>
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <loop+0x1fa>
     d30:	f6 dd       	rcall	.-1044   	; 0x91e <_ZL11resetSystemv>
     d32:	2c c0       	rjmp	.+88     	; 0xd8c <loop+0x246>
     d34:	a5 dd       	rcall	.-1206   	; 0x880 <_ZL10closeValvev>
     d36:	2a c0       	rjmp	.+84     	; 0xd8c <loop+0x246>
     d38:	7b dd       	rcall	.-1290   	; 0x830 <_ZL9openValvev>
     d3a:	28 c0       	rjmp	.+80     	; 0xd8c <loop+0x246>
     d3c:	0f de       	rcall	.-994    	; 0x95c <_ZL10reportLeakv>
     d3e:	26 c0       	rjmp	.+76     	; 0xd8c <loop+0x246>
     d40:	1d dd       	rcall	.-1478   	; 0x77c <_ZL9printTimev>
     d42:	8a e7       	ldi	r24, 0x7A	; 122
     d44:	95 e0       	ldi	r25, 0x05	; 5
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN11EEPROMClass4readEi>
     d4e:	88 23       	and	r24, r24
	{
		case 'r':
			resetSystem();
     d50:	19 f0       	breq	.+6      	; 0xd58 <loop+0x212>
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	d1 f4       	brne	.+52     	; 0xd8a <loop+0x244>
			break;
		case 'c':
			closeValve();
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <loop+0x21c>
     d58:	80 e7       	ldi	r24, 0x70	; 112
     d5a:	92 e0       	ldi	r25, 0x02	; 2
			break;
		case 'o':
			openValve();
     d5c:	6d e2       	ldi	r22, 0x2D	; 45
     d5e:	71 e0       	ldi	r23, 0x01	; 1
     d60:	13 c0       	rjmp	.+38     	; 0xd88 <loop+0x242>
			break;
		case 'l':
			reportLeak();
     d62:	80 e7       	ldi	r24, 0x70	; 112
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	65 e3       	ldi	r22, 0x35	; 53
	return printSerial();
}

static uint8_t reportValve()
{
	printTime();
     d68:	72 e0       	ldi	r23, 0x02	; 2
     d6a:	0e c0       	rjmp	.+28     	; 0xd88 <loop+0x242>
	EEPROM.write(1,cond);
}

static uint8_t isValveOpen()
{
	return EEPROM.read(0);
     d6c:	7a de       	rcall	.-780    	; 0xa62 <_ZL9reportLogv>
     d6e:	0e c0       	rjmp	.+28     	; 0xd8c <loop+0x246>
     d70:	8a e7       	ldi	r24, 0x7A	; 122
     d72:	95 e0       	ldi	r25, 0x05	; 5
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	70 e0       	ldi	r23, 0x00	; 0
}

static uint8_t reportValve()
{
	printTime();
	switch (isValveOpen())
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN11EEPROMClass5writeEih>
     d7e:	fe dc       	rcall	.-1540   	; 0x77c <_ZL9printTimev>
     d80:	80 e7       	ldi	r24, 0x70	; 112
	{
	case 0:
		sprintf(MessageBuffer,"Valve:\tClosed\n");
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	62 e4       	ldi	r22, 0x42	; 66
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	c7 d9       	rcall	.-3186   	; 0x118 <strcpy>
     d8a:	4c dd       	rcall	.-1384   	; 0x824 <_ZL11printSerialv>
		break;
	case 1:
		sprintf(MessageBuffer,"Valve:\tOpen\n");
     d8c:	8c e4       	ldi	r24, 0x4C	; 76
     d8e:	96 e0       	ldi	r25, 0x06	; 6
     d90:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN14HardwareSerial9availableEv>
     d94:	89 2b       	or	r24, r25
			break;
		case 'v':
			reportValve();
			break;
		case 'h':
			reportLog();
     d96:	09 f0       	breq	.+2      	; 0xd9a <loop+0x254>
     d98:	af cf       	rjmp	.-162    	; 0xcf8 <loop+0x1b2>
     d9a:	8c e4       	ldi	r24, 0x4C	; 76
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     d9c:	96 e0       	ldi	r25, 0x06	; 6
     d9e:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN14HardwareSerial5flushEv>
     da2:	10 92 6f 02 	sts	0x026F, r1
     da6:	83 b7       	in	r24, 0x33	; 51
     da8:	81 60       	ori	r24, 0x01	; 1
}

static uint8_t clearLeak()
{
	setLeakCondition(0);
	printTime();
     daa:	83 bf       	out	0x33, r24	; 51
     dac:	80 e0       	ldi	r24, 0x00	; 0
	sprintf(MessageBuffer,"Leak:\tCleared\n");
     dae:	62 e1       	ldi	r22, 0x12	; 18
     db0:	77 e0       	ldi	r23, 0x07	; 7
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	0e 94 b9 13 	call	0x2772	; 0x2772 <attachInterrupt>
	return printSerial();
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	65 e0       	ldi	r22, 0x05	; 5
	}
}

static void checkRadioCommands()
{
	while(Serial.available())
     dbe:	77 e0       	ldi	r23, 0x07	; 7
     dc0:	42 e0       	ldi	r20, 0x02	; 2
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	0e 94 b9 13 	call	0x2772	; 0x2772 <attachInterrupt>
     dc8:	80 e7       	ldi	r24, 0x70	; 112
     dca:	93 e0       	ldi	r25, 0x03	; 3
			}
		}
	}

	checkRadioCommands();
	Serial.flush();
     dcc:	69 e0       	ldi	r22, 0x09	; 9
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	50 e0       	ldi	r21, 0x00	; 0
	interruptNo = 2;
}

static void shutdown()
{
	interruptNo = 0;
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
	sleep_enable();
     dd8:	7a d0       	rcall	.+244    	; 0xece <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>
     dda:	2b 96       	adiw	r28, 0x0b	; 11
     ddc:	0f b6       	in	r0, 0x3f	; 63
	attachInterrupt(0,radioInterrupt,LOW);
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	1f 91       	pop	r17
	attachInterrupt(1,meterInterrupt,FALLING);		// TODO: fix this falling interrupt wont work, need change interrupt
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
	LowPower.powerDown(SLEEP_8S,ADC_OFF,BOD_OFF);
     dfa:	9f 90       	pop	r9
     dfc:	8f 90       	pop	r8
     dfe:	7f 90       	pop	r7
     e00:	6f 90       	pop	r6
     e02:	5f 90       	pop	r5
     e04:	4f 90       	pop	r4
     e06:	3f 90       	pop	r3
     e08:	08 95       	ret

00000e0a <_ZL14meterInterruptv>:
	interruptNo = 1;
}

static void meterInterrupt()
{
	sleep_disable();
     e0a:	83 b7       	in	r24, 0x33	; 51
     e0c:	8e 7f       	andi	r24, 0xFE	; 254
     e0e:	83 bf       	out	0x33, r24	; 51
	detachInterrupt(0);
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <detachInterrupt>
	detachInterrupt(1);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <detachInterrupt>
	interruptNo = 2;
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	80 93 6f 02 	sts	0x026F, r24
}
     e22:	08 95       	ret

00000e24 <_ZL14radioInterruptv>:
	return printSerial();
}

static void radioInterrupt()
{
	sleep_disable();
     e24:	83 b7       	in	r24, 0x33	; 51
     e26:	8e 7f       	andi	r24, 0xFE	; 254
     e28:	83 bf       	out	0x33, r24	; 51
	detachInterrupt(0);
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <detachInterrupt>
	detachInterrupt(1);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <detachInterrupt>
	interruptNo = 1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 6f 02 	sts	0x026F, r24
}
     e3c:	08 95       	ret

00000e3e <setup>:

// Runtime functions
void setup()
{
	// Initialize Pins
	pinMode(VALVE_ENABLE_PIN,OUTPUT);
     e3e:	87 e0       	ldi	r24, 0x07	; 7
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>
	pinMode(VALVE_CONTROL_1_PIN,OUTPUT);
     e46:	88 e0       	ldi	r24, 0x08	; 8
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>
	pinMode(VALVE_CONTROL_2_PIN,OUTPUT);
     e4e:	89 e0       	ldi	r24, 0x09	; 9
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>
	pinMode(SD_SS_PIN,OUTPUT);
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>
	pinMode(DS3234_SS_PIN,OUTPUT);
     e5e:	8a e0       	ldi	r24, 0x0A	; 10
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>

	pinMode(ALARM_PIN,INPUT);
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>
	pinMode(METER_PIN,INPUT);
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>

	digitalWrite(VALVE_ENABLE_PIN,0);
     e76:	87 e0       	ldi	r24, 0x07	; 7
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     e7e:	88 e0       	ldi	r24, 0x08	; 8
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     e86:	89 e0       	ldi	r24, 0x09	; 9
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(SD_SS_PIN,1);
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
	digitalWrite(DS3234_SS_PIN,1);
     e96:	8a e0       	ldi	r24, 0x0A	; 10
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>

	pinMode(RST_PIN,INPUT_PULLUP);
     e9e:	86 e0       	ldi	r24, 0x06	; 6
     ea0:	62 e0       	ldi	r22, 0x02	; 2
     ea2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>

	// Initialize SPI Communication
	DS3234_init(DS3234_SS_PIN);
     ea6:	8a e0       	ldi	r24, 0x0A	; 10
     ea8:	f2 d1       	rcall	.+996    	; 0x128e <_Z11DS3234_inith>
     eaa:	8c e4       	ldi	r24, 0x4C	; 76

	// Initialize Radio Communication
	Serial.begin(9600,SERIAL_8N1);
     eac:	96 e0       	ldi	r25, 0x06	; 6
     eae:	40 e8       	ldi	r20, 0x80	; 128
     eb0:	55 e2       	ldi	r21, 0x25	; 37
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	26 e0       	ldi	r18, 0x06	; 6
     eb8:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN14HardwareSerial5beginEmh>
     ebc:	8c e4       	ldi	r24, 0x4C	; 76
	while(!Serial){;}
     ebe:	96 e0       	ldi	r25, 0x06	; 6
     ec0:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <_ZN14HardwareSerialcvbEv>
     ec4:	88 23       	and	r24, r24
     ec6:	d1 f3       	breq	.-12     	; 0xebc <setup+0x7e>
     ec8:	10 92 6e 02 	sts	0x026E, r1

	// Set Global Variables
	leak = 0;
     ecc:	08 95       	ret

00000ece <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>:
*				(b) BOD_ON - Leave BOD module in its default state
*
*******************************************************************************/
void	LowPowerClass::powerDown(period_t period, adc_t adc, bod_t bod)
{
	if (adc == ADC_OFF)	ADCSRA &= ~(1 << ADEN);
     ece:	41 15       	cp	r20, r1
     ed0:	51 05       	cpc	r21, r1
     ed2:	29 f4       	brne	.+10     	; 0xede <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x10>
     ed4:	80 91 7a 00 	lds	r24, 0x007A
     ed8:	8f 77       	andi	r24, 0x7F	; 127
     eda:	80 93 7a 00 	sts	0x007A, r24
	
	if (period != SLEEP_FOREVER)
     ede:	6a 30       	cpi	r22, 0x0A	; 10
     ee0:	71 05       	cpc	r23, r1
     ee2:	b9 f0       	breq	.+46     	; 0xf12 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x44>
	{
		wdt_enable(period);
     ee4:	63 fd       	sbrc	r22, 3
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1e>
     ee8:	e8 e0       	ldi	r30, 0x08	; 8
     eea:	01 c0       	rjmp	.+2      	; 0xeee <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x20>
     eec:	e8 e2       	ldi	r30, 0x28	; 40
     eee:	86 2f       	mov	r24, r22
     ef0:	87 70       	andi	r24, 0x07	; 7
     ef2:	e8 2b       	or	r30, r24
     ef4:	88 e1       	ldi	r24, 0x18	; 24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	a8 95       	wdr
     efe:	80 93 60 00 	sts	0x0060, r24
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	e0 93 60 00 	sts	0x0060, r30
		WDTCSR |= (1 << WDIE);	
     f08:	80 91 60 00 	lds	r24, 0x0060
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	80 93 60 00 	sts	0x0060, r24
	}
	if (bod == BOD_OFF)	
     f12:	23 2b       	or	r18, r19
     f14:	a1 f4       	brne	.+40     	; 0xf3e <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x70>
	{
		#if defined __AVR_ATmega328P__
			lowPowerBodOff(SLEEP_MODE_PWR_DOWN);
     f16:	83 b7       	in	r24, 0x33	; 51
     f18:	81 7f       	andi	r24, 0xF1	; 241
     f1a:	84 60       	ori	r24, 0x04	; 4
     f1c:	83 bf       	out	0x33, r24	; 51
     f1e:	f8 94       	cli
     f20:	83 b7       	in	r24, 0x33	; 51
     f22:	81 60       	ori	r24, 0x01	; 1
     f24:	83 bf       	out	0x33, r24	; 51
     f26:	85 b7       	in	r24, 0x35	; 53
     f28:	80 66       	ori	r24, 0x60	; 96
     f2a:	85 bf       	out	0x35, r24	; 53
     f2c:	8f 7d       	andi	r24, 0xDF	; 223
     f2e:	85 bf       	out	0x35, r24	; 53
     f30:	78 94       	sei
     f32:	88 95       	sleep
     f34:	83 b7       	in	r24, 0x33	; 51
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	83 bf       	out	0x33, r24	; 51
     f3a:	78 94       	sei
     f3c:	0e c0       	rjmp	.+28     	; 0xf5a <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x8c>
			lowPowerBodOn(SLEEP_MODE_PWR_DOWN);
		#endif
	}
	else	
	{
		lowPowerBodOn(SLEEP_MODE_PWR_DOWN);
     f3e:	83 b7       	in	r24, 0x33	; 51
     f40:	81 7f       	andi	r24, 0xF1	; 241
     f42:	84 60       	ori	r24, 0x04	; 4
     f44:	83 bf       	out	0x33, r24	; 51
     f46:	f8 94       	cli
     f48:	83 b7       	in	r24, 0x33	; 51
     f4a:	81 60       	ori	r24, 0x01	; 1
     f4c:	83 bf       	out	0x33, r24	; 51
     f4e:	78 94       	sei
     f50:	88 95       	sleep
     f52:	83 b7       	in	r24, 0x33	; 51
     f54:	8e 7f       	andi	r24, 0xFE	; 254
     f56:	83 bf       	out	0x33, r24	; 51
     f58:	78 94       	sei
	}
	
	if (adc == ADC_OFF) ADCSRA |= (1 << ADEN);
     f5a:	45 2b       	or	r20, r21
     f5c:	29 f4       	brne	.+10     	; 0xf68 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x9a>
     f5e:	80 91 7a 00 	lds	r24, 0x007A
     f62:	80 68       	ori	r24, 0x80	; 128
     f64:	80 93 7a 00 	sts	0x007A, r24
     f68:	08 95       	ret

00000f6a <__vector_6>:
* Description: Watchdog Timer interrupt service routine. This routine is 
*		           required to allow automatic WDIF and WDIE bit clearance in 
*			         hardware.
*
*******************************************************************************/
ISR (WDT_vect)
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	8f 93       	push	r24
{
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
     f76:	88 e1       	ldi	r24, 0x18	; 24
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	80 93 60 00 	sts	0x0060, r24
     f80:	10 92 60 00 	sts	0x0060, r1
     f84:	0f be       	out	0x3f, r0	; 63
}
     f86:	8f 91       	pop	r24
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti

00000f92 <_Z10DS3234_gethP2ts>:
            SPI.transfer(dectobcd(TimeDate[i]));
        digitalWrite(pin, HIGH);
    }
}

void DS3234_get(const uint8_t pin, struct ts *t)
     f92:	9f 92       	push	r9
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	27 97       	sbiw	r28, 0x07	; 7
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	a8 2e       	mov	r10, r24
     fba:	7b 01       	movw	r14, r22
     fbc:	6e 01       	movw	r12, r28
     fbe:	08 94       	sec
     fc0:	c1 1c       	adc	r12, r1
     fc2:	d1 1c       	adc	r13, r1
     fc4:	bb 24       	eor	r11, r11
     fc6:	00 e0       	ldi	r16, 0x00	; 0
        digitalWrite(pin, HIGH);
        if (i == 5) {           // month address also contains the century on bit7
            TimeDate[5] = bcdtodec(n & 0x1F);
            century = (n & 0x80) >> 7;
        } else {
            TimeDate[i] = bcdtodec(n);
     fc8:	9a e0       	ldi	r25, 0x0A	; 10
     fca:	99 2e       	mov	r9, r25
    uint8_t century = 0;
    uint8_t i, n;
    uint16_t year_full, yday;

    for (i = 0; i <= 6; i++) {
        digitalWrite(pin, LOW);
     fcc:	8a 2d       	mov	r24, r10
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     fd4:	0e bd       	out	0x2e, r16	; 46
  while (!(SPSR & _BV(SPIF)))
     fd6:	0d b4       	in	r0, 0x2d	; 45
     fd8:	07 fe       	sbrs	r0, 7
     fda:	fd cf       	rjmp	.-6      	; 0xfd6 <_Z10DS3234_gethP2ts+0x44>
    ;
  return SPDR;
     fdc:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     fde:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
     fe0:	0d b4       	in	r0, 0x2d	; 45
     fe2:	07 fe       	sbrs	r0, 7
     fe4:	fd cf       	rjmp	.-6      	; 0xfe0 <_Z10DS3234_gethP2ts+0x4e>
    ;
  return SPDR;
     fe6:	1e b5       	in	r17, 0x2e	; 46
        SPI.transfer(i + 0x00);
        n = SPI.transfer(0x00);
        digitalWrite(pin, HIGH);
     fe8:	8a 2d       	mov	r24, r10
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	0e 94 7f 15 	call	0x2afe	; 0x2afe <digitalWrite>
     ff0:	21 2f       	mov	r18, r17
     ff2:	2f 70       	andi	r18, 0x0F	; 15
        if (i == 5) {           // month address also contains the century on bit7
     ff4:	05 30       	cpi	r16, 0x05	; 5
     ff6:	71 f4       	brne	.+28     	; 0x1014 <_Z10DS3234_gethP2ts+0x82>
            TimeDate[5] = bcdtodec(n & 0x1F);
     ff8:	81 2f       	mov	r24, r17
     ffa:	8f 71       	andi	r24, 0x1F	; 31
     ffc:	82 95       	swap	r24
     ffe:	8f 70       	andi	r24, 0x0F	; 15
    1000:	89 9d       	mul	r24, r9
    1002:	c0 01       	movw	r24, r0
    1004:	11 24       	eor	r1, r1
    1006:	28 0f       	add	r18, r24
    1008:	2e 83       	std	Y+6, r18	; 0x06
            century = (n & 0x80) >> 7;
    100a:	b1 2e       	mov	r11, r17
    100c:	bb 1c       	adc	r11, r11
    100e:	bb 24       	eor	r11, r11
    1010:	bb 1c       	adc	r11, r11
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <_Z10DS3234_gethP2ts+0x92>
        } else {
            TimeDate[i] = bcdtodec(n);
    1014:	12 95       	swap	r17
    1016:	1f 70       	andi	r17, 0x0F	; 15
    1018:	19 9d       	mul	r17, r9
    101a:	c0 01       	movw	r24, r0
    101c:	11 24       	eor	r1, r1
    101e:	28 0f       	add	r18, r24
    1020:	d6 01       	movw	r26, r12
    1022:	2c 93       	st	X, r18
    uint8_t TimeDate[7];        //second,minute,hour,dow,day,month,year
    uint8_t century = 0;
    uint8_t i, n;
    uint16_t year_full, yday;

    for (i = 0; i <= 6; i++) {
    1024:	0f 5f       	subi	r16, 0xFF	; 255
    1026:	08 94       	sec
    1028:	c1 1c       	adc	r12, r1
    102a:	d1 1c       	adc	r13, r1
    102c:	07 30       	cpi	r16, 0x07	; 7
    102e:	71 f6       	brne	.-100    	; 0xfcc <_Z10DS3234_gethP2ts+0x3a>
    1030:	8f 81       	ldd	r24, Y+7	; 0x07
        } else {
            TimeDate[i] = bcdtodec(n);
        }
    }

    if (century == 1)
    1032:	b1 e0       	ldi	r27, 0x01	; 1
    1034:	bb 16       	cp	r11, r27
    1036:	29 f4       	brne	.+10     	; 0x1042 <_Z10DS3234_gethP2ts+0xb0>
        year_full = 2000 + TimeDate[6];
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	20 53       	subi	r18, 0x30	; 48
    103e:	38 4f       	sbci	r19, 0xF8	; 248
    1040:	04 c0       	rjmp	.+8      	; 0x104a <_Z10DS3234_gethP2ts+0xb8>
    else
        year_full = 1900 + TimeDate[6];
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	24 59       	subi	r18, 0x94	; 148
    1048:	38 4f       	sbci	r19, 0xF8	; 248

    t->sec = TimeDate[0];
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	f7 01       	movw	r30, r14
    104e:	80 83       	st	Z, r24
    t->min = TimeDate[1];
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	81 83       	std	Z+1, r24	; 0x01
    t->hour = TimeDate[2];
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	82 83       	std	Z+2, r24	; 0x02
    t->mday = TimeDate[4];
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	83 83       	std	Z+3, r24	; 0x03
    t->mon = TimeDate[5];
    105c:	1e 81       	ldd	r17, Y+6	; 0x06
    105e:	14 83       	std	Z+4, r17	; 0x04
    t->year = year_full;
    1060:	36 83       	std	Z+6, r19	; 0x06
    1062:	25 83       	std	Z+5, r18	; 0x05
    t->wday = TimeDate[3];
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	87 83       	std	Z+7, r24	; 0x07
    t->year_s = TimeDate[6];
    1068:	8f 81       	ldd	r24, Y+7	; 0x07
    106a:	82 87       	std	Z+10, r24	; 0x0a

    yday = 0;								// add days from past months
    for (i = 1; i <= t->mon; i++)
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	32 c0       	rjmp	.+100    	; 0x10d8 <_Z10DS3234_gethP2ts+0x146>
    {
    	switch (i-1)
    1074:	84 2f       	mov	r24, r20
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	86 30       	cpi	r24, 0x06	; 6
    107c:	91 05       	cpc	r25, r1
    107e:	31 f1       	breq	.+76     	; 0x10cc <_Z10DS3234_gethP2ts+0x13a>
    1080:	87 30       	cpi	r24, 0x07	; 7
    1082:	91 05       	cpc	r25, r1
    1084:	94 f4       	brge	.+36     	; 0x10aa <_Z10DS3234_gethP2ts+0x118>
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	e9 f0       	breq	.+58     	; 0x10c6 <_Z10DS3234_gethP2ts+0x134>
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	91 05       	cpc	r25, r1
    1090:	34 f4       	brge	.+12     	; 0x109e <_Z10DS3234_gethP2ts+0x10c>
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	91 05       	cpc	r25, r1
    1096:	b9 f0       	breq	.+46     	; 0x10c6 <_Z10DS3234_gethP2ts+0x134>
    1098:	02 97       	sbiw	r24, 0x02	; 2
    109a:	e9 f4       	brne	.+58     	; 0x10d6 <_Z10DS3234_gethP2ts+0x144>
    109c:	1a c0       	rjmp	.+52     	; 0x10d2 <_Z10DS3234_gethP2ts+0x140>
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	91 05       	cpc	r25, r1
    10a2:	a1 f0       	breq	.+40     	; 0x10cc <_Z10DS3234_gethP2ts+0x13a>
    10a4:	05 97       	sbiw	r24, 0x05	; 5
    10a6:	b9 f4       	brne	.+46     	; 0x10d6 <_Z10DS3234_gethP2ts+0x144>
    10a8:	0e c0       	rjmp	.+28     	; 0x10c6 <_Z10DS3234_gethP2ts+0x134>
    10aa:	89 30       	cpi	r24, 0x09	; 9
    10ac:	91 05       	cpc	r25, r1
    10ae:	71 f0       	breq	.+28     	; 0x10cc <_Z10DS3234_gethP2ts+0x13a>
    10b0:	89 30       	cpi	r24, 0x09	; 9
    10b2:	91 05       	cpc	r25, r1
    10b4:	44 f0       	brlt	.+16     	; 0x10c6 <_Z10DS3234_gethP2ts+0x134>
    10b6:	8b 30       	cpi	r24, 0x0B	; 11
    10b8:	91 05       	cpc	r25, r1
    10ba:	41 f0       	breq	.+16     	; 0x10cc <_Z10DS3234_gethP2ts+0x13a>
    10bc:	8b 30       	cpi	r24, 0x0B	; 11
    10be:	91 05       	cpc	r25, r1
    10c0:	14 f0       	brlt	.+4      	; 0x10c6 <_Z10DS3234_gethP2ts+0x134>
    10c2:	0c 97       	sbiw	r24, 0x0c	; 12
    10c4:	41 f4       	brne	.+16     	; 0x10d6 <_Z10DS3234_gethP2ts+0x144>
    	case 5:
    	case 7:
    	case 8:
    	case 10:
    	case 12:
    		yday += 31;
    10c6:	21 5e       	subi	r18, 0xE1	; 225
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <_Z10DS3234_gethP2ts+0x144>
    		break;
    	case 4:
    	case 6:
    	case 9:
    	case 11:
    		yday += 30;
    10cc:	22 5e       	subi	r18, 0xE2	; 226
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <_Z10DS3234_gethP2ts+0x144>
    		break;
    	case 2:
    		yday+= 28;
    10d2:	24 5e       	subi	r18, 0xE4	; 228
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    t->year = year_full;
    t->wday = TimeDate[3];
    t->year_s = TimeDate[6];

    yday = 0;								// add days from past months
    for (i = 1; i <= t->mon; i++)
    10d6:	4f 5f       	subi	r20, 0xFF	; 255
    10d8:	14 17       	cp	r17, r20
    10da:	60 f6       	brcc	.-104    	; 0x1074 <_Z10DS3234_gethP2ts+0xe2>
    		break;
    	}
    }

    // Determine whether a leap day has occurred this year and add it if needed
	if ((t->year%4) == 0)
    10dc:	d7 01       	movw	r26, r14
    10de:	15 96       	adiw	r26, 0x05	; 5
    10e0:	ed 91       	ld	r30, X+
    10e2:	fc 91       	ld	r31, X
    10e4:	16 97       	sbiw	r26, 0x06	; 6
    10e6:	cf 01       	movw	r24, r30
    10e8:	83 70       	andi	r24, 0x03	; 3
    10ea:	90 70       	andi	r25, 0x00	; 0
    10ec:	89 2b       	or	r24, r25
    10ee:	49 f5       	brne	.+82     	; 0x1142 <_Z10DS3234_gethP2ts+0x1b0>
	{
		if (t->year%100 != 0)
    10f0:	cf 01       	movw	r24, r30
    10f2:	64 e6       	ldi	r22, 0x64	; 100
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__divmodhi4>
    10fa:	89 2b       	or	r24, r25
    10fc:	11 f1       	breq	.+68     	; 0x1142 <_Z10DS3234_gethP2ts+0x1b0>
			if ((i == t->year) && ((t->mon > 3) || ((t->mon ==3) && (t->mday == 29))))
    10fe:	c4 2e       	mov	r12, r20
    1100:	dd 24       	eor	r13, r13
    1102:	ce 16       	cp	r12, r30
    1104:	df 06       	cpc	r13, r31
    1106:	49 f4       	brne	.+18     	; 0x111a <_Z10DS3234_gethP2ts+0x188>
    1108:	14 30       	cpi	r17, 0x04	; 4
    110a:	c8 f4       	brcc	.+50     	; 0x113e <_Z10DS3234_gethP2ts+0x1ac>
    110c:	13 30       	cpi	r17, 0x03	; 3
    110e:	29 f4       	brne	.+10     	; 0x111a <_Z10DS3234_gethP2ts+0x188>
    1110:	d7 01       	movw	r26, r14
    1112:	13 96       	adiw	r26, 0x03	; 3
    1114:	8c 91       	ld	r24, X
    1116:	8d 31       	cpi	r24, 0x1D	; 29
    1118:	91 f0       	breq	.+36     	; 0x113e <_Z10DS3234_gethP2ts+0x1ac>
			{
				yday += 1;
			}
		else if (t->year%400 == 0)
    111a:	cf 01       	movw	r24, r30
    111c:	60 e9       	ldi	r22, 0x90	; 144
    111e:	71 e0       	ldi	r23, 0x01	; 1
    1120:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__divmodhi4>
    1124:	89 2b       	or	r24, r25
    1126:	69 f4       	brne	.+26     	; 0x1142 <_Z10DS3234_gethP2ts+0x1b0>
			if ((i == t->year) && ((t->mon > 3) || ((t->mon ==3) && (t->mday == 29))))
    1128:	ce 16       	cp	r12, r30
    112a:	df 06       	cpc	r13, r31
    112c:	51 f4       	brne	.+20     	; 0x1142 <_Z10DS3234_gethP2ts+0x1b0>
    112e:	14 30       	cpi	r17, 0x04	; 4
    1130:	30 f4       	brcc	.+12     	; 0x113e <_Z10DS3234_gethP2ts+0x1ac>
    1132:	13 30       	cpi	r17, 0x03	; 3
    1134:	31 f4       	brne	.+12     	; 0x1142 <_Z10DS3234_gethP2ts+0x1b0>
    1136:	f7 01       	movw	r30, r14
    1138:	83 81       	ldd	r24, Z+3	; 0x03
    113a:	8d 31       	cpi	r24, 0x1D	; 29
    113c:	11 f4       	brne	.+4      	; 0x1142 <_Z10DS3234_gethP2ts+0x1b0>
			{
				yday += 1;
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	// add days from the current month
	yday += t->mday;

	t->yday = yday;
    1142:	d7 01       	movw	r26, r14
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	8c 91       	ld	r24, X
    1148:	13 97       	sbiw	r26, 0x03	; 3
    114a:	28 0f       	add	r18, r24
    114c:	31 1d       	adc	r19, r1
    114e:	18 96       	adiw	r26, 0x08	; 8
    1150:	2c 93       	st	X, r18
}
    1152:	27 96       	adiw	r28, 0x07	; 7
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	08 95       	ret

00001176 <_Z15DS3234_get_unixv>:

uint32_t DS3234_get_unix()
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	2b 97       	sbiw	r28, 0x0b	; 11
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
{
	uint32_t t_unix = 0;
	uint8_t leapDays = 0;
	uint16_t i;
	struct ts t_struct;
	DS3234_get(10,&t_struct);								// TODO: fix this. 10 is used as SS in out project, this is bad practice
    1198:	8a e0       	ldi	r24, 0x0A	; 10
    119a:	be 01       	movw	r22, r28
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	f8 de       	rcall	.-528    	; 0xf92 <_Z10DS3234_gethP2ts>
    11a2:	ce 80       	ldd	r12, Y+6	; 0x06

	// calculate number of leap days to be included
	for (i=1970;i<t_struct.year;i++)
    11a4:	df 80       	ldd	r13, Y+7	; 0x07
    11a6:	bb 24       	eor	r11, r11
    11a8:	22 eb       	ldi	r18, 0xB2	; 178
    11aa:	37 e0       	ldi	r19, 0x07	; 7
    11ac:	16 c0       	rjmp	.+44     	; 0x11da <_Z15DS3234_get_unixv+0x64>
    11ae:	c9 01       	movw	r24, r18
	{
		if ((i%4) == 0)
    11b0:	83 70       	andi	r24, 0x03	; 3
    11b2:	90 70       	andi	r25, 0x00	; 0
    11b4:	89 2b       	or	r24, r25
    11b6:	79 f4       	brne	.+30     	; 0x11d6 <_Z15DS3234_get_unixv+0x60>
    11b8:	c9 01       	movw	r24, r18
		{
			if (i%100 != 0)
    11ba:	64 e6       	ldi	r22, 0x64	; 100
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodhi4>
    11c2:	89 2b       	or	r24, r25
    11c4:	39 f4       	brne	.+14     	; 0x11d4 <_Z15DS3234_get_unixv+0x5e>
    11c6:	c9 01       	movw	r24, r18
			{
				leapDays++;
			}
			else if (i%400 == 0)
    11c8:	60 e9       	ldi	r22, 0x90	; 144
    11ca:	71 e0       	ldi	r23, 0x01	; 1
    11cc:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodhi4>
    11d0:	89 2b       	or	r24, r25
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <_Z15DS3234_get_unixv+0x60>
    11d4:	b3 94       	inc	r11
			{
				leapDays++;
    11d6:	2f 5f       	subi	r18, 0xFF	; 255
	uint16_t i;
	struct ts t_struct;
	DS3234_get(10,&t_struct);								// TODO: fix this. 10 is used as SS in out project, this is bad practice

	// calculate number of leap days to be included
	for (i=1970;i<t_struct.year;i++)
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	2c 15       	cp	r18, r12
    11dc:	3d 05       	cpc	r19, r13
    11de:	38 f3       	brcs	.-50     	; 0x11ae <_Z15DS3234_get_unixv+0x38>
    11e0:	6b 81       	ldd	r22, Y+3	; 0x03
	// for some reason 1 leap day is missing in unix time. I have looked into this and cant figure out why or where it is missing. this is a simple hack for now.
	leapDays--;

	// calculate UNIX time
	t_unix += (uint32_t)(t_struct.year - 1970) * 31536000;											// add years
	t_unix += (uint32_t)(t_struct.yday + leapDays) * 86400;											// add days + leap days
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	20 e1       	ldi	r18, 0x10	; 16
    11ea:	3e e0       	ldi	r19, 0x0E	; 14
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__mulsi3>
    11f4:	7b 01       	movw	r14, r22
    11f6:	8c 01       	movw	r16, r24
    11f8:	6a 81       	ldd	r22, Y+2	; 0x02
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	2c e3       	ldi	r18, 0x3C	; 60
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__mulsi3>
    120c:	e6 0e       	add	r14, r22
    120e:	f7 1e       	adc	r15, r23
    1210:	08 1f       	adc	r16, r24
    1212:	19 1f       	adc	r17, r25
    1214:	89 81       	ldd	r24, Y+1	; 0x01
	t_unix += (uint32_t)(t_struct.hour) * 3600;
    1216:	e8 0e       	add	r14, r24
    1218:	f1 1c       	adc	r15, r1
    121a:	01 1d       	adc	r16, r1
    121c:	11 1d       	adc	r17, r1
    121e:	8e e4       	ldi	r24, 0x4E	; 78
	t_unix += (uint32_t)(t_struct.min) * 60;
    1220:	98 ef       	ldi	r25, 0xF8	; 248
    1222:	c8 0e       	add	r12, r24
    1224:	d9 1e       	adc	r13, r25
    1226:	b6 01       	movw	r22, r12
    1228:	88 27       	eor	r24, r24
    122a:	77 fd       	sbrc	r23, 7
    122c:	80 95       	com	r24
    122e:	98 2f       	mov	r25, r24
    1230:	20 e8       	ldi	r18, 0x80	; 128
    1232:	33 e3       	ldi	r19, 0x33	; 51
    1234:	41 ee       	ldi	r20, 0xE1	; 225
    1236:	51 e0       	ldi	r21, 0x01	; 1
    1238:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__mulsi3>
    123c:	e6 0e       	add	r14, r22
    123e:	f7 1e       	adc	r15, r23
    1240:	08 1f       	adc	r16, r24
    1242:	19 1f       	adc	r17, r25
    1244:	ba 94       	dec	r11
    1246:	69 85       	ldd	r22, Y+9	; 0x09
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	6b 0d       	add	r22, r11
    124c:	71 1d       	adc	r23, r1
    124e:	88 27       	eor	r24, r24
    1250:	77 fd       	sbrc	r23, 7
    1252:	80 95       	com	r24
    1254:	98 2f       	mov	r25, r24
    1256:	20 e8       	ldi	r18, 0x80	; 128
    1258:	31 e5       	ldi	r19, 0x51	; 81
    125a:	41 e0       	ldi	r20, 0x01	; 1
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__mulsi3>
    1262:	e6 0e       	add	r14, r22
    1264:	f7 1e       	adc	r15, r23
    1266:	08 1f       	adc	r16, r24
    1268:	19 1f       	adc	r17, r25
    126a:	b7 01       	movw	r22, r14
	t_unix += (uint32_t)t_struct.sec;
	return t_unix;
}
    126c:	c8 01       	movw	r24, r16
    126e:	2b 96       	adiw	r28, 0x0b	; 11
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	bf 90       	pop	r11
    128c:	08 95       	ret

0000128e <_Z11DS3234_inith>:
bit0 A1IE   Alarm1 interrupt enable (1 to enable)
*/

void DS3234_init(const uint8_t pin)
{
    pinMode(pin, OUTPUT);       // chip select pin
    128e:	61 e0       	ldi	r22, 0x01	; 1
    1290:	0e 94 40 15 	call	0x2a80	; 0x2a80 <pinMode>
    SPI.begin();
    1294:	cd d7       	rcall	.+3994   	; 0x2230 <_ZN8SPIClass5beginEv>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    SPI.setBitOrder(MSBFIRST);
    1298:	bd d7       	rcall	.+3962   	; 0x2214 <_ZN8SPIClass11setBitOrderEh>
    129a:	84 e0       	ldi	r24, 0x04	; 4
    129c:	c4 d7       	rcall	.+3976   	; 0x2226 <_ZN8SPIClass11setDataModeEh>
    SPI.setDataMode(SPI_MODE1);
    129e:	6a e0       	ldi	r22, 0x0A	; 10
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    delay(10);
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <delay>

000012aa <_ZN7Sd2Card11waitNotBusyEj>:
    | (sckRateID & 2 ? (1 << SPR0) : 0);
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	8b 01       	movw	r16, r22
  uint16_t t0 = millis();
    12b6:	0e 94 9e 14 	call	0x293c	; 0x293c <millis>
    12ba:	eb 01       	movw	r28, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    12bc:	ff 24       	eor	r15, r15
    12be:	fa 94       	dec	r15
    12c0:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
    12c2:	0d b4       	in	r0, 0x2d	; 45
    12c4:	07 fe       	sbrs	r0, 7
    12c6:	fd cf       	rjmp	.-6      	; 0x12c2 <_ZN7Sd2Card11waitNotBusyEj+0x18>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    12c8:	8e b5       	in	r24, 0x2e	; 46
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
    12ca:	8f 3f       	cpi	r24, 0xFF	; 255
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <_ZN7Sd2Card11waitNotBusyEj+0x28>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <_ZN7Sd2Card11waitNotBusyEj+0x38>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    12d2:	0e 94 9e 14 	call	0x293c	; 0x293c <millis>
    12d6:	6c 1b       	sub	r22, r28
    12d8:	7d 0b       	sbc	r23, r29
    12da:	60 17       	cp	r22, r16
    12dc:	71 07       	cpc	r23, r17
    12de:	80 f3       	brcs	.-32     	; 0x12c0 <_ZN7Sd2Card11waitNotBusyEj+0x16>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	08 95       	ret

000012ee <_ZN7Sd2Card13chipSelectLowEv>:
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
  digitalWrite(chipSelectPin_, LOW);
    12ee:	fc 01       	movw	r30, r24
    12f0:	84 81       	ldd	r24, Z+4	; 0x04
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <digitalWrite>

000012f8 <_ZN7Sd2Card14chipSelectHighEv>:
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    12f8:	fc 01       	movw	r30, r24
    12fa:	84 81       	ldd	r24, Z+4	; 0x04
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <digitalWrite>

00001302 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    1302:	dc 01       	movw	r26, r24
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
    1304:	6e bd       	out	0x2e, r22	; 46
    1306:	fa 01       	movw	r30, r20
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    130c:	0d b4       	in	r0, 0x2d	; 45
    130e:	07 fe       	sbrs	r0, 7
    1310:	fd cf       	rjmp	.-6      	; 0x130c <_ZN7Sd2Card9writeDataEhPKh+0xa>
    SPDR = src[i];
    1312:	80 81       	ld	r24, Z
    1314:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
    1316:	0d b4       	in	r0, 0x2d	; 45
    1318:	07 fe       	sbrs	r0, 7
    131a:	fd cf       	rjmp	.-6      	; 0x1316 <_ZN7Sd2Card9writeDataEhPKh+0x14>
    SPDR = src[i+1];
    131c:	81 81       	ldd	r24, Z+1	; 0x01
    131e:	8e bd       	out	0x2e, r24	; 46

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    1320:	2e 5f       	subi	r18, 0xFE	; 254
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	32 96       	adiw	r30, 0x02	; 2
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	20 30       	cpi	r18, 0x00	; 0
    132a:	38 07       	cpc	r19, r24
    132c:	79 f7       	brne	.-34     	; 0x130c <_ZN7Sd2Card9writeDataEhPKh+0xa>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
    132e:	0d b4       	in	r0, 0x2d	; 45
    1330:	07 fe       	sbrs	r0, 7
    1332:	fd cf       	rjmp	.-6      	; 0x132e <_ZN7Sd2Card9writeDataEhPKh+0x2c>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    1338:	0d b4       	in	r0, 0x2d	; 45
    133a:	07 fe       	sbrs	r0, 7
    133c:	fd cf       	rjmp	.-6      	; 0x1338 <_ZN7Sd2Card9writeDataEhPKh+0x36>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    1342:	0d b4       	in	r0, 0x2d	; 45
    1344:	07 fe       	sbrs	r0, 7
    1346:	fd cf       	rjmp	.-6      	; 0x1342 <_ZN7Sd2Card9writeDataEhPKh+0x40>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1348:	8f ef       	ldi	r24, 0xFF	; 255
    134a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    134c:	0d b4       	in	r0, 0x2d	; 45
    134e:	07 fe       	sbrs	r0, 7
    1350:	fd cf       	rjmp	.-6      	; 0x134c <_ZN7Sd2Card9writeDataEhPKh+0x4a>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    1352:	8e b5       	in	r24, 0x2e	; 46
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    1354:	1a 96       	adiw	r26, 0x0a	; 10
    1356:	8c 93       	st	X, r24
    1358:	1a 97       	sbiw	r26, 0x0a	; 10
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    135a:	8f 71       	andi	r24, 0x1F	; 31
    135c:	85 30       	cpi	r24, 0x05	; 5
    135e:	11 f4       	brne	.+4      	; 0x1364 <_ZN7Sd2Card9writeDataEhPKh+0x62>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	08 95       	ret
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1364:	81 e1       	ldi	r24, 0x11	; 17
    1366:	15 96       	adiw	r26, 0x05	; 5
    1368:	8c 93       	st	X, r24
    136a:	15 97       	sbiw	r26, 0x05	; 5
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    136c:	cd 01       	movw	r24, r26
    136e:	c4 df       	rcall	.-120    	; 0x12f8 <_ZN7Sd2Card14chipSelectHighEv>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	08 95       	ret

00001374 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
    1380:	0e 94 9e 14 	call	0x293c	; 0x293c <millis>
    1384:	8b 01       	movw	r16, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1386:	ff 24       	eor	r15, r15
    1388:	fa 94       	dec	r15
    138a:	09 c0       	rjmp	.+18     	; 0x139e <_ZN7Sd2Card14waitStartBlockEv+0x2a>
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    138c:	0e 94 9e 14 	call	0x293c	; 0x293c <millis>
    1390:	60 1b       	sub	r22, r16
    1392:	71 0b       	sbc	r23, r17
    1394:	6d 52       	subi	r22, 0x2D	; 45
    1396:	71 40       	sbci	r23, 0x01	; 1
    1398:	10 f0       	brcs	.+4      	; 0x139e <_ZN7Sd2Card14waitStartBlockEv+0x2a>
    139a:	8f e0       	ldi	r24, 0x0F	; 15
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <_ZN7Sd2Card14waitStartBlockEv+0x44>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    139e:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
    13a0:	0d b4       	in	r0, 0x2d	; 45
    13a2:	07 fe       	sbrs	r0, 7
    13a4:	fd cf       	rjmp	.-6      	; 0x13a0 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    13a6:	8e b5       	in	r24, 0x2e	; 46
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    13a8:	8a 87       	std	Y+10, r24	; 0x0a
    13aa:	8f 3f       	cpi	r24, 0xFF	; 255
    13ac:	79 f3       	breq	.-34     	; 0x138c <_ZN7Sd2Card14waitStartBlockEv+0x18>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    13ae:	8e 3f       	cpi	r24, 0xFE	; 254
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <_ZN7Sd2Card14waitStartBlockEv+0x42>
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <_ZN7Sd2Card14waitStartBlockEv+0x4c>
    13b6:	8d e0       	ldi	r24, 0x0D	; 13
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    13ba:	ce 01       	movw	r24, r28
    13bc:	9d df       	rcall	.-198    	; 0x12f8 <_ZN7Sd2Card14chipSelectHighEv>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	df 91       	pop	r29
  return false;
}
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	08 95       	ret

000013cc <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	ec 01       	movw	r28, r24
  if (inBlock_) {
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
    13d4:	88 23       	and	r24, r24
    13d6:	c9 f0       	breq	.+50     	; 0x140a <_ZN7Sd2Card7readEndEv+0x3e>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	8e bd       	out	0x2e, r24	; 46
    13dc:	2f 81       	ldd	r18, Y+7	; 0x07
    13de:	38 85       	ldd	r19, Y+8	; 0x08
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    13e0:	4f ef       	ldi	r20, 0xFF	; 255
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <_ZN7Sd2Card7readEndEv+0x20>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
    13e4:	0d b4       	in	r0, 0x2d	; 45
    13e6:	07 fe       	sbrs	r0, 7
    13e8:	fd cf       	rjmp	.-6      	; 0x13e4 <_ZN7Sd2Card7readEndEv+0x18>
      SPDR = 0XFF;
    13ea:	4e bd       	out	0x2e, r20	; 46
    13ec:	2f 5f       	subi	r18, 0xFF	; 255
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
    13f0:	c9 01       	movw	r24, r18
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	81 50       	subi	r24, 0x01	; 1
    13f6:	92 40       	sbci	r25, 0x02	; 2
    13f8:	a8 f3       	brcs	.-22     	; 0x13e4 <_ZN7Sd2Card7readEndEv+0x18>
    13fa:	38 87       	std	Y+8, r19	; 0x08
    13fc:	2f 83       	std	Y+7, r18	; 0x07
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
    13fe:	0d b4       	in	r0, 0x2d	; 45
    1400:	07 fe       	sbrs	r0, 7
    1402:	fd cf       	rjmp	.-6      	; 0x13fe <_ZN7Sd2Card7readEndEv+0x32>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    1404:	ce 01       	movw	r24, r28
    1406:	78 df       	rcall	.-272    	; 0x12f8 <_ZN7Sd2Card14chipSelectHighEv>
    1408:	1e 82       	std	Y+6, r1	; 0x06
    inBlock_ = 0;
    140a:	df 91       	pop	r29
  }
}
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    1410:	df 92       	push	r13
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
    1420:	d6 2e       	mov	r13, r22
    1422:	79 01       	movw	r14, r18
    1424:	8a 01       	movw	r16, r20
  // end read if in partialBlockRead mode
  readEnd();
    1426:	d2 df       	rcall	.-92     	; 0x13cc <_ZN7Sd2Card7readEndEv>
    1428:	ce 01       	movw	r24, r28

  // select card
  chipSelectLow();
    142a:	61 df       	rcall	.-318    	; 0x12ee <_ZN7Sd2Card13chipSelectLowEv>
    142c:	ce 01       	movw	r24, r28
    142e:	6c e2       	ldi	r22, 0x2C	; 44

  // wait up to 300 ms if busy
  waitNotBusy(300);
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	3b df       	rcall	.-394    	; 0x12aa <_ZN7Sd2Card11waitNotBusyEj>
    1434:	8d 2d       	mov	r24, r13
    1436:	80 64       	ori	r24, 0x40	; 64
    1438:	8e bd       	out	0x2e, r24	; 46

  // send command
  spiSend(cmd | 0x40);
    143a:	0d b4       	in	r0, 0x2d	; 45
    143c:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    143e:	fd cf       	rjmp	.-6      	; 0x143a <_ZN7Sd2Card11cardCommandEhm+0x2a>
  while (!(SPSR & (1 << SPIF)));
    1440:	28 e1       	ldi	r18, 0x18	; 24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	d8 01       	movw	r26, r16
    1446:	c7 01       	movw	r24, r14
    1448:	02 2e       	mov	r0, r18

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <_ZN7Sd2Card11cardCommandEhm+0x44>
    144c:	b6 95       	lsr	r27
    144e:	a7 95       	ror	r26
    1450:	97 95       	ror	r25
    1452:	87 95       	ror	r24
    1454:	0a 94       	dec	r0
    1456:	d2 f7       	brpl	.-12     	; 0x144c <_ZN7Sd2Card11cardCommandEhm+0x3c>
    1458:	8e bd       	out	0x2e, r24	; 46
    145a:	0d b4       	in	r0, 0x2d	; 45
    145c:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    145e:	fd cf       	rjmp	.-6      	; 0x145a <_ZN7Sd2Card11cardCommandEhm+0x4a>
  while (!(SPSR & (1 << SPIF)));
    1460:	28 50       	subi	r18, 0x08	; 8
    1462:	30 40       	sbci	r19, 0x00	; 0
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	28 3f       	cpi	r18, 0xF8	; 248
    1468:	38 07       	cpc	r19, r24

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    146a:	61 f7       	brne	.-40     	; 0x1444 <_ZN7Sd2Card11cardCommandEhm+0x34>
    146c:	dd 20       	and	r13, r13
    146e:	11 f4       	brne	.+4      	; 0x1474 <_ZN7Sd2Card11cardCommandEhm+0x64>
    1470:	85 e9       	ldi	r24, 0x95	; 149

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <_ZN7Sd2Card11cardCommandEhm+0x70>
    1474:	88 e0       	ldi	r24, 0x08	; 8
    1476:	d8 16       	cp	r13, r24
    1478:	11 f4       	brne	.+4      	; 0x147e <_ZN7Sd2Card11cardCommandEhm+0x6e>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    147a:	87 e8       	ldi	r24, 0x87	; 135
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <_ZN7Sd2Card11cardCommandEhm+0x70>
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	8e bd       	out	0x2e, r24	; 46
    1482:	0d b4       	in	r0, 0x2d	; 45
    1484:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1486:	fd cf       	rjmp	.-6      	; 0x1482 <_ZN7Sd2Card11cardCommandEhm+0x72>
  while (!(SPSR & (1 << SPIF)));
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	2f ef       	ldi	r18, 0xFF	; 255
    148c:	2e bd       	out	0x2e, r18	; 46
    148e:	0d b4       	in	r0, 0x2d	; 45
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1490:	07 fe       	sbrs	r0, 7
    1492:	fd cf       	rjmp	.-6      	; 0x148e <_ZN7Sd2Card11cardCommandEhm+0x7e>
  while (!(SPSR & (1 << SPIF)));
    1494:	8e b5       	in	r24, 0x2e	; 46
    1496:	87 ff       	sbrs	r24, 7
    1498:	02 c0       	rjmp	.+4      	; 0x149e <_ZN7Sd2Card11cardCommandEhm+0x8e>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    149a:	91 50       	subi	r25, 0x01	; 1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    149c:	b9 f7       	brne	.-18     	; 0x148c <_ZN7Sd2Card11cardCommandEhm+0x7c>
    149e:	8a 87       	std	Y+10, r24	; 0x0a
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
  return status_;
}
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	08 95       	ret

000014b0 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	ec 01       	movw	r28, r24
    14c2:	7a 01       	movw	r14, r20
    14c4:	8b 01       	movw	r16, r22
    14c6:	69 01       	movw	r12, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    14c8:	41 15       	cp	r20, r1
    14ca:	51 05       	cpc	r21, r1
    14cc:	61 05       	cpc	r22, r1
    14ce:	71 05       	cpc	r23, r1
    14d0:	11 f4       	brne	.+4      	; 0x14d6 <_ZN7Sd2Card10writeBlockEmPKh+0x26>
    14d2:	82 e1       	ldi	r24, 0x12	; 18
    14d4:	33 c0       	rjmp	.+102    	; 0x153c <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    14d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	39 f0       	breq	.+14     	; 0x14ea <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
    14dc:	29 e0       	ldi	r18, 0x09	; 9
    14de:	ee 0c       	add	r14, r14
    14e0:	ff 1c       	adc	r15, r15
    14e2:	00 1f       	adc	r16, r16
    14e4:	11 1f       	adc	r17, r17
    14e6:	2a 95       	dec	r18
    14e8:	d1 f7       	brne	.-12     	; 0x14de <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
  if (cardCommand(CMD24, blockNumber)) {
    14ea:	ce 01       	movw	r24, r28
    14ec:	68 e1       	ldi	r22, 0x18	; 24
    14ee:	a8 01       	movw	r20, r16
    14f0:	97 01       	movw	r18, r14
    14f2:	8e df       	rcall	.-228    	; 0x1410 <_ZN7Sd2Card11cardCommandEhm>
    14f4:	88 23       	and	r24, r24
    14f6:	11 f0       	breq	.+4      	; 0x14fc <_ZN7Sd2Card10writeBlockEmPKh+0x4c>
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	20 c0       	rjmp	.+64     	; 0x153c <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    14fc:	ce 01       	movw	r24, r28
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    14fe:	6e ef       	ldi	r22, 0xFE	; 254
    1500:	a6 01       	movw	r20, r12
    1502:	ff de       	rcall	.-514    	; 0x1302 <_ZN7Sd2Card9writeDataEhPKh>
    1504:	88 23       	and	r24, r24
    1506:	d9 f0       	breq	.+54     	; 0x153e <_ZN7Sd2Card10writeBlockEmPKh+0x8e>
    1508:	ce 01       	movw	r24, r28
    150a:	68 e5       	ldi	r22, 0x58	; 88

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    150c:	72 e0       	ldi	r23, 0x02	; 2
    150e:	cd de       	rcall	.-614    	; 0x12aa <_ZN7Sd2Card11waitNotBusyEj>
    1510:	88 23       	and	r24, r24
    1512:	11 f4       	brne	.+4      	; 0x1518 <_ZN7Sd2Card10writeBlockEmPKh+0x68>
    1514:	85 e1       	ldi	r24, 0x15	; 21
    1516:	12 c0       	rjmp	.+36     	; 0x153c <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    1518:	ce 01       	movw	r24, r28
    151a:	6d e0       	ldi	r22, 0x0D	; 13
    151c:	20 e0       	ldi	r18, 0x00	; 0
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	75 df       	rcall	.-278    	; 0x1410 <_ZN7Sd2Card11cardCommandEhm>
    1526:	88 23       	and	r24, r24
    1528:	41 f4       	brne	.+16     	; 0x153a <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	8e bd       	out	0x2e, r24	; 46
    152e:	0d b4       	in	r0, 0x2d	; 45
    1530:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1532:	fd cf       	rjmp	.-6      	; 0x152e <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1534:	8e b5       	in	r24, 0x2e	; 46
  while (!(SPSR & (1 << SPIF)));
    1536:	88 23       	and	r24, r24
    1538:	71 f0       	breq	.+28     	; 0x1556 <_ZN7Sd2Card10writeBlockEmPKh+0xa6>
    153a:	84 e1       	ldi	r24, 0x14	; 20
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	ce 01       	movw	r24, r28
    1540:	db de       	rcall	.-586    	; 0x12f8 <_ZN7Sd2Card14chipSelectHighEv>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	df 91       	pop	r29
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
  return false;
}
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	08 95       	ret
    1556:	ce 01       	movw	r24, r28
    1558:	cf de       	rcall	.-610    	; 0x12f8 <_ZN7Sd2Card14chipSelectHighEv>
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	f3 cf       	rjmp	.-26     	; 0x1544 <_ZN7Sd2Card10writeBlockEmPKh+0x94>

0000155e <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	ec 01       	movw	r28, r24
    1578:	5a 01       	movw	r10, r20
    157a:	6b 01       	movw	r12, r22
    157c:	49 01       	movw	r8, r18
  uint16_t n;
  if (count == 0) return true;
    157e:	01 15       	cp	r16, r1
    1580:	11 05       	cpc	r17, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <_ZN7Sd2Card8readDataEmjjPh+0x28>
    1584:	77 c0       	rjmp	.+238    	; 0x1674 <_ZN7Sd2Card8readDataEmjjPh+0x116>
  if ((count + offset) > 512) {
    1586:	c8 01       	movw	r24, r16
    1588:	82 0f       	add	r24, r18
    158a:	93 1f       	adc	r25, r19
    158c:	81 50       	subi	r24, 0x01	; 1
    158e:	92 40       	sbci	r25, 0x02	; 2
    1590:	08 f0       	brcs	.+2      	; 0x1594 <_ZN7Sd2Card8readDataEmjjPh+0x36>
    1592:	6c c0       	rjmp	.+216    	; 0x166c <_ZN7Sd2Card8readDataEmjjPh+0x10e>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	88 23       	and	r24, r24
    1598:	71 f0       	breq	.+28     	; 0x15b6 <_ZN7Sd2Card8readDataEmjjPh+0x58>
    159a:	88 81       	ld	r24, Y
    159c:	99 81       	ldd	r25, Y+1	; 0x01
    159e:	aa 81       	ldd	r26, Y+2	; 0x02
    15a0:	bb 81       	ldd	r27, Y+3	; 0x03
    15a2:	48 17       	cp	r20, r24
    15a4:	59 07       	cpc	r21, r25
    15a6:	6a 07       	cpc	r22, r26
    15a8:	7b 07       	cpc	r23, r27
    15aa:	29 f4       	brne	.+10     	; 0x15b6 <_ZN7Sd2Card8readDataEmjjPh+0x58>
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	88 16       	cp	r8, r24
    15b2:	99 06       	cpc	r9, r25
    15b4:	08 f5       	brcc	.+66     	; 0x15f8 <_ZN7Sd2Card8readDataEmjjPh+0x9a>
    block_ = block;
    15b6:	a8 82       	st	Y, r10
    15b8:	b9 82       	std	Y+1, r11	; 0x01
    15ba:	ca 82       	std	Y+2, r12	; 0x02
    15bc:	db 82       	std	Y+3, r13	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    15be:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	39 f0       	breq	.+14     	; 0x15d2 <_ZN7Sd2Card8readDataEmjjPh+0x74>
    15c4:	69 e0       	ldi	r22, 0x09	; 9
    15c6:	aa 0c       	add	r10, r10
    15c8:	bb 1c       	adc	r11, r11
    15ca:	cc 1c       	adc	r12, r12
    15cc:	dd 1c       	adc	r13, r13
    15ce:	6a 95       	dec	r22
    15d0:	d1 f7       	brne	.-12     	; 0x15c6 <_ZN7Sd2Card8readDataEmjjPh+0x68>
    if (cardCommand(CMD17, block)) {
    15d2:	ce 01       	movw	r24, r28
    15d4:	61 e1       	ldi	r22, 0x11	; 17
    15d6:	a6 01       	movw	r20, r12
    15d8:	95 01       	movw	r18, r10
    15da:	1a df       	rcall	.-460    	; 0x1410 <_ZN7Sd2Card11cardCommandEhm>
    15dc:	88 23       	and	r24, r24
    15de:	19 f0       	breq	.+6      	; 0x15e6 <_ZN7Sd2Card8readDataEmjjPh+0x88>
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	43 c0       	rjmp	.+134    	; 0x166c <_ZN7Sd2Card8readDataEmjjPh+0x10e>
    15e6:	ce 01       	movw	r24, r28
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    15e8:	c5 de       	rcall	.-630    	; 0x1374 <_ZN7Sd2Card14waitStartBlockEv>
    15ea:	88 23       	and	r24, r24
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <_ZN7Sd2Card8readDataEmjjPh+0x92>
    15ee:	3e c0       	rjmp	.+124    	; 0x166c <_ZN7Sd2Card8readDataEmjjPh+0x10e>
    15f0:	18 86       	std	Y+8, r1	; 0x08
    15f2:	1f 82       	std	Y+7, r1	; 0x07
      goto fail;
    }
    offset_ = 0;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	8e 83       	std	Y+6, r24	; 0x06
    inBlock_ = 1;
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	8e bd       	out	0x2e, r24	; 46
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
    15fc:	8f 81       	ldd	r24, Y+7	; 0x07
    15fe:	98 85       	ldd	r25, Y+8	; 0x08
    1600:	2f ef       	ldi	r18, 0xFF	; 255
    1602:	05 c0       	rjmp	.+10     	; 0x160e <_ZN7Sd2Card8readDataEmjjPh+0xb0>

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
    1604:	0d b4       	in	r0, 0x2d	; 45
    1606:	07 fe       	sbrs	r0, 7
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    1608:	fd cf       	rjmp	.-6      	; 0x1604 <_ZN7Sd2Card8readDataEmjjPh+0xa6>
    160a:	2e bd       	out	0x2e, r18	; 46
    160c:	01 96       	adiw	r24, 0x01	; 1
    SPDR = 0XFF;
    160e:	88 15       	cp	r24, r8
    1610:	99 05       	cpc	r25, r9
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    1612:	c0 f3       	brcs	.-16     	; 0x1604 <_ZN7Sd2Card8readDataEmjjPh+0xa6>
    1614:	98 87       	std	Y+8, r25	; 0x08
    1616:	8f 83       	std	Y+7, r24	; 0x07
    1618:	d8 01       	movw	r26, r16
    161a:	11 97       	sbiw	r26, 0x01	; 1
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	9f ef       	ldi	r25, 0xFF	; 255
    1622:	0b c0       	rjmp	.+22     	; 0x163a <_ZN7Sd2Card8readDataEmjjPh+0xdc>
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
    1624:	0d b4       	in	r0, 0x2d	; 45
    1626:	07 fe       	sbrs	r0, 7
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
    1628:	fd cf       	rjmp	.-6      	; 0x1624 <_ZN7Sd2Card8readDataEmjjPh+0xc6>
    162a:	8e b5       	in	r24, 0x2e	; 46
    162c:	f7 01       	movw	r30, r14
    dst[i] = SPDR;
    162e:	e2 0f       	add	r30, r18
    1630:	f3 1f       	adc	r31, r19
    1632:	80 83       	st	Z, r24
    1634:	9e bd       	out	0x2e, r25	; 46
    1636:	2f 5f       	subi	r18, 0xFF	; 255
    SPDR = 0XFF;
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    163a:	2a 17       	cp	r18, r26
    163c:	3b 07       	cpc	r19, r27
    163e:	90 f3       	brcs	.-28     	; 0x1624 <_ZN7Sd2Card8readDataEmjjPh+0xc6>
    1640:	0d b4       	in	r0, 0x2d	; 45
    1642:	07 fe       	sbrs	r0, 7
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
    1644:	fd cf       	rjmp	.-6      	; 0x1640 <_ZN7Sd2Card8readDataEmjjPh+0xe2>
    1646:	8e b5       	in	r24, 0x2e	; 46
    1648:	ae 0d       	add	r26, r14
  dst[n] = SPDR;
    164a:	bf 1d       	adc	r27, r15
    164c:	8c 93       	st	X, r24
    164e:	2f 81       	ldd	r18, Y+7	; 0x07
    1650:	38 85       	ldd	r19, Y+8	; 0x08
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    1652:	20 0f       	add	r18, r16
    1654:	31 1f       	adc	r19, r17
    1656:	38 87       	std	Y+8, r19	; 0x08
    1658:	2f 83       	std	Y+7, r18	; 0x07
    165a:	89 85       	ldd	r24, Y+9	; 0x09
    165c:	88 23       	and	r24, r24
  if (!partialBlockRead_ || offset_ >= 512) {
    165e:	19 f0       	breq	.+6      	; 0x1666 <_ZN7Sd2Card8readDataEmjjPh+0x108>
    1660:	20 50       	subi	r18, 0x00	; 0
    1662:	32 40       	sbci	r19, 0x02	; 2
    1664:	38 f0       	brcs	.+14     	; 0x1674 <_ZN7Sd2Card8readDataEmjjPh+0x116>
    1666:	ce 01       	movw	r24, r28
    1668:	b1 de       	rcall	.-670    	; 0x13cc <_ZN7Sd2Card7readEndEv>
    // read rest of data, checksum and set chip select high
    readEnd();
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <_ZN7Sd2Card8readDataEmjjPh+0x116>
    166c:	ce 01       	movw	r24, r28
    166e:	44 de       	rcall	.-888    	; 0x12f8 <_ZN7Sd2Card14chipSelectHighEv>
    1670:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  chipSelectHigh();
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <_ZN7Sd2Card8readDataEmjjPh+0x118>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
  return false;
    167c:	0f 91       	pop	r16
}
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	08 95       	ret

00001690 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	79 01       	movw	r14, r18
  return readData(block, 0, 512, dst);
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	00 e0       	ldi	r16, 0x00	; 0
    16a0:	12 e0       	ldi	r17, 0x02	; 2
    16a2:	5d df       	rcall	.-326    	; 0x155e <_ZN7Sd2Card8readDataEmjjPh>
    16a4:	1f 91       	pop	r17
}
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	08 95       	ret

000016ae <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    16ae:	6f 92       	push	r6
    16b0:	7f 92       	push	r7
    16b2:	8f 92       	push	r8
    16b4:	9f 92       	push	r9
    16b6:	af 92       	push	r10
    16b8:	bf 92       	push	r11
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	ec 01       	movw	r28, r24
    16cc:	7a 01       	movw	r14, r20
    16ce:	8b 01       	movw	r16, r22
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    16d0:	2d 81       	ldd	r18, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    16d2:	22 23       	and	r18, r18
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <_ZN6SdFile7seekSetEm+0x2a>
    16d6:	7f c0       	rjmp	.+254    	; 0x17d6 <_ZN6SdFile7seekSetEm+0x128>
    16d8:	8b 89       	ldd	r24, Y+19	; 0x13
    16da:	9c 89       	ldd	r25, Y+20	; 0x14
    16dc:	ad 89       	ldd	r26, Y+21	; 0x15
    16de:	be 89       	ldd	r27, Y+22	; 0x16
    16e0:	84 17       	cp	r24, r20
    16e2:	95 07       	cpc	r25, r21
    16e4:	a6 07       	cpc	r26, r22
    16e6:	b7 07       	cpc	r27, r23
    16e8:	08 f4       	brcc	.+2      	; 0x16ec <_ZN6SdFile7seekSetEm+0x3e>
    16ea:	75 c0       	rjmp	.+234    	; 0x17d6 <_ZN6SdFile7seekSetEm+0x128>
    16ec:	84 c0       	rjmp	.+264    	; 0x17f6 <_ZN6SdFile7seekSetEm+0x148>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	01 05       	cpc	r16, r1
    16f4:	11 05       	cpc	r17, r1
    16f6:	49 f4       	brne	.+18     	; 0x170a <_ZN6SdFile7seekSetEm+0x5c>
    // set position to start of file
    curCluster_ = 0;
    16f8:	1e 82       	std	Y+6, r1	; 0x06
    16fa:	1f 82       	std	Y+7, r1	; 0x07
    16fc:	18 86       	std	Y+8, r1	; 0x08
    16fe:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
    1700:	1a 86       	std	Y+10, r1	; 0x0a
    1702:	1b 86       	std	Y+11, r1	; 0x0b
    1704:	1c 86       	std	Y+12, r1	; 0x0c
    1706:	1d 86       	std	Y+13, r1	; 0x0d
    1708:	64 c0       	rjmp	.+200    	; 0x17d2 <_ZN6SdFile7seekSetEm+0x124>
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    170a:	2a 85       	ldd	r18, Y+10	; 0x0a
    170c:	3b 85       	ldd	r19, Y+11	; 0x0b
    170e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1710:	5d 85       	ldd	r21, Y+13	; 0x0d
    1712:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1714:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1716:	85 85       	ldd	r24, Z+13	; 0x0d
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	09 96       	adiw	r24, 0x09	; 9
    171c:	21 50       	subi	r18, 0x01	; 1
    171e:	30 40       	sbci	r19, 0x00	; 0
    1720:	40 40       	sbci	r20, 0x00	; 0
    1722:	50 40       	sbci	r21, 0x00	; 0
    1724:	39 01       	movw	r6, r18
    1726:	4a 01       	movw	r8, r20
    1728:	08 2e       	mov	r0, r24
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <_ZN6SdFile7seekSetEm+0x86>
    172c:	96 94       	lsr	r9
    172e:	87 94       	ror	r8
    1730:	77 94       	ror	r7
    1732:	67 94       	ror	r6
    1734:	0a 94       	dec	r0
    1736:	d2 f7       	brpl	.-12     	; 0x172c <_ZN6SdFile7seekSetEm+0x7e>
    1738:	2f 5f       	subi	r18, 0xFF	; 255
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	4f 4f       	sbci	r20, 0xFF	; 255
    173e:	5f 4f       	sbci	r21, 0xFF	; 255
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    1740:	08 94       	sec
    1742:	e1 08       	sbc	r14, r1
    1744:	f1 08       	sbc	r15, r1
    1746:	01 09       	sbc	r16, r1
    1748:	11 09       	sbc	r17, r1
    174a:	57 01       	movw	r10, r14
    174c:	68 01       	movw	r12, r16
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <_ZN6SdFile7seekSetEm+0xaa>
    1750:	d6 94       	lsr	r13
    1752:	c7 94       	ror	r12
    1754:	b7 94       	ror	r11
    1756:	a7 94       	ror	r10
    1758:	8a 95       	dec	r24
    175a:	d2 f7       	brpl	.-12     	; 0x1750 <_ZN6SdFile7seekSetEm+0xa2>
    175c:	08 94       	sec
    175e:	e1 1c       	adc	r14, r1
    1760:	f1 1c       	adc	r15, r1
    1762:	01 1d       	adc	r16, r1
    1764:	11 1d       	adc	r17, r1

  if (nNew < nCur || curPosition_ == 0) {
    1766:	a6 14       	cp	r10, r6
    1768:	b7 04       	cpc	r11, r7
    176a:	c8 04       	cpc	r12, r8
    176c:	d9 04       	cpc	r13, r9
    176e:	28 f0       	brcs	.+10     	; 0x177a <_ZN6SdFile7seekSetEm+0xcc>
    1770:	21 15       	cp	r18, r1
    1772:	31 05       	cpc	r19, r1
    1774:	41 05       	cpc	r20, r1
    1776:	51 05       	cpc	r21, r1
    1778:	49 f4       	brne	.+18     	; 0x178c <_ZN6SdFile7seekSetEm+0xde>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    177a:	8f 89       	ldd	r24, Y+23	; 0x17
    177c:	98 8d       	ldd	r25, Y+24	; 0x18
    177e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1780:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1782:	8e 83       	std	Y+6, r24	; 0x06
    1784:	9f 83       	std	Y+7, r25	; 0x07
    1786:	a8 87       	std	Y+8, r26	; 0x08
    1788:	b9 87       	std	Y+9, r27	; 0x09
    178a:	15 c0       	rjmp	.+42     	; 0x17b6 <_ZN6SdFile7seekSetEm+0x108>
  } else {
    // advance from curPosition
    nNew -= nCur;
    178c:	a6 18       	sub	r10, r6
    178e:	b7 08       	sbc	r11, r7
    1790:	c8 08       	sbc	r12, r8
    1792:	d9 08       	sbc	r13, r9
    1794:	10 c0       	rjmp	.+32     	; 0x17b6 <_ZN6SdFile7seekSetEm+0x108>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    1796:	4e 81       	ldd	r20, Y+6	; 0x06
    1798:	5f 81       	ldd	r21, Y+7	; 0x07
    179a:	68 85       	ldd	r22, Y+8	; 0x08
    179c:	79 85       	ldd	r23, Y+9	; 0x09
    179e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a2:	94 01       	movw	r18, r8
    17a4:	84 d3       	rcall	.+1800   	; 0x1eae <_ZNK8SdVolume6fatGetEmPm>
    17a6:	08 94       	sec
    17a8:	a1 08       	sbc	r10, r1
    17aa:	b1 08       	sbc	r11, r1
    17ac:	c1 08       	sbc	r12, r1
    17ae:	d1 08       	sbc	r13, r1
    17b0:	88 23       	and	r24, r24
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <_ZN6SdFile7seekSetEm+0x112>
    17b4:	10 c0       	rjmp	.+32     	; 0x17d6 <_ZN6SdFile7seekSetEm+0x128>
    17b6:	86 e0       	ldi	r24, 0x06	; 6
    17b8:	88 2e       	mov	r8, r24
    17ba:	91 2c       	mov	r9, r1
    17bc:	8c 0e       	add	r8, r28
    17be:	9d 1e       	adc	r9, r29
    17c0:	a1 14       	cp	r10, r1
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    17c2:	b1 04       	cpc	r11, r1
    17c4:	c1 04       	cpc	r12, r1
    17c6:	d1 04       	cpc	r13, r1
    17c8:	31 f7       	brne	.-52     	; 0x1796 <_ZN6SdFile7seekSetEm+0xe8>
    17ca:	ea 86       	std	Y+10, r14	; 0x0a
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    17cc:	fb 86       	std	Y+11, r15	; 0x0b
    17ce:	0c 87       	std	Y+12, r16	; 0x0c
    17d0:	1d 87       	std	Y+13, r17	; 0x0d
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <_ZN6SdFile7seekSetEm+0x12a>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
  return true;
    17d8:	df 91       	pop	r29
}
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	9f 90       	pop	r9
    17ee:	8f 90       	pop	r8
    17f0:	7f 90       	pop	r7
    17f2:	6f 90       	pop	r6
    17f4:	08 95       	ret
    17f6:	22 30       	cpi	r18, 0x02	; 2
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    17f8:	09 f0       	breq	.+2      	; 0x17fc <_ZN6SdFile7seekSetEm+0x14e>
    17fa:	79 cf       	rjmp	.-270    	; 0x16ee <_ZN6SdFile7seekSetEm+0x40>
    17fc:	e6 cf       	rjmp	.-52     	; 0x17ca <_ZN6SdFile7seekSetEm+0x11c>

000017fe <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	ec 01       	movw	r28, r24
    1804:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    1806:	6e 85       	ldd	r22, Y+14	; 0x0e
    1808:	7f 85       	ldd	r23, Y+15	; 0x0f
    180a:	88 89       	ldd	r24, Y+16	; 0x10
    180c:	99 89       	ldd	r25, Y+17	; 0x11
    180e:	7b d2       	rcall	.+1270   	; 0x1d06 <_ZN8SdVolume13cacheRawBlockEmh>
    1810:	88 23       	and	r24, r24
    1812:	19 f4       	brne	.+6      	; 0x181a <_ZN6SdFile13cacheDirEntryEh+0x1c>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	0a c0       	rjmp	.+20     	; 0x182e <_ZN6SdFile13cacheDirEntryEh+0x30>
    181a:	8a 89       	ldd	r24, Y+18	; 0x12
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	95 e0       	ldi	r25, 0x05	; 5
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	9a 95       	dec	r25
    1828:	e1 f7       	brne	.-8      	; 0x1822 <_ZN6SdFile13cacheDirEntryEh+0x24>
    182a:	2d 58       	subi	r18, 0x8D	; 141
    182c:	3c 4f       	sbci	r19, 0xFC	; 252
    182e:	c9 01       	movw	r24, r18
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    1840:	fc 01       	movw	r30, r24
    1842:	85 81       	ldd	r24, Z+5	; 0x05
    1844:	88 23       	and	r24, r24
    1846:	c9 f1       	breq	.+114    	; 0x18ba <_ZN6SdFile4syncEv+0x84>

  if (flags_ & F_FILE_DIR_DIRTY) {
    1848:	84 81       	ldd	r24, Z+4	; 0x04
    184a:	87 ff       	sbrs	r24, 7
    184c:	34 c0       	rjmp	.+104    	; 0x18b6 <_ZN6SdFile4syncEv+0x80>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    184e:	c8 01       	movw	r24, r16
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	d5 df       	rcall	.-86     	; 0x17fe <_ZN6SdFile13cacheDirEntryEh>
    1854:	ec 01       	movw	r28, r24
    1856:	00 97       	sbiw	r24, 0x00	; 0
    if (!d) return false;
    1858:	81 f1       	breq	.+96     	; 0x18ba <_ZN6SdFile4syncEv+0x84>
    185a:	f8 01       	movw	r30, r16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    185c:	85 81       	ldd	r24, Z+5	; 0x05
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	40 f4       	brcc	.+16     	; 0x1872 <_ZN6SdFile4syncEv+0x3c>
    1862:	83 89       	ldd	r24, Z+19	; 0x13
    1864:	94 89       	ldd	r25, Z+20	; 0x14
    1866:	a5 89       	ldd	r26, Z+21	; 0x15
    1868:	b6 89       	ldd	r27, Z+22	; 0x16
    186a:	8c 8f       	std	Y+28, r24	; 0x1c
    186c:	9d 8f       	std	Y+29, r25	; 0x1d
    186e:	ae 8f       	std	Y+30, r26	; 0x1e
    1870:	bf 8f       	std	Y+31, r27	; 0x1f
    1872:	f8 01       	movw	r30, r16

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    1874:	87 89       	ldd	r24, Z+23	; 0x17
    1876:	90 8d       	ldd	r25, Z+24	; 0x18
    1878:	9b 8f       	std	Y+27, r25	; 0x1b
    187a:	8a 8f       	std	Y+26, r24	; 0x1a
    187c:	87 89       	ldd	r24, Z+23	; 0x17
    d->firstClusterHigh = firstCluster_ >> 16;
    187e:	90 8d       	ldd	r25, Z+24	; 0x18
    1880:	a1 8d       	ldd	r26, Z+25	; 0x19
    1882:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1884:	cd 01       	movw	r24, r26
    1886:	aa 27       	eor	r26, r26
    1888:	bb 27       	eor	r27, r27
    188a:	9d 8b       	std	Y+21, r25	; 0x15
    188c:	8c 8b       	std	Y+20, r24	; 0x14
    188e:	e0 91 71 03 	lds	r30, 0x0371

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1892:	f0 91 72 03 	lds	r31, 0x0372
    1896:	30 97       	sbiw	r30, 0x00	; 0
    1898:	51 f0       	breq	.+20     	; 0x18ae <_ZN6SdFile4syncEv+0x78>
    189a:	be 01       	movw	r22, r28
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    189c:	6a 5e       	subi	r22, 0xEA	; 234
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	ce 01       	movw	r24, r28
    18a2:	48 96       	adiw	r24, 0x18	; 24
    18a4:	09 95       	icall
    18a6:	88 8d       	ldd	r24, Y+24	; 0x18
      d->lastAccessDate = d->lastWriteDate;
    18a8:	99 8d       	ldd	r25, Y+25	; 0x19
    18aa:	9b 8b       	std	Y+19, r25	; 0x13
    18ac:	8a 8b       	std	Y+18, r24	; 0x12
    18ae:	f8 01       	movw	r30, r16
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    18b0:	84 81       	ldd	r24, Z+4	; 0x04
    18b2:	8f 77       	andi	r24, 0x7F	; 127
    18b4:	84 83       	std	Z+4, r24	; 0x04
    18b6:	ee d1       	rcall	.+988    	; 0x1c94 <_ZN8SdVolume10cacheFlushEv>
  }
  return SdVolume::cacheFlush();
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <_ZN6SdFile4syncEv+0x86>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
}
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    18cc:	9c 01       	movw	r18, r24
    18ce:	2a 5f       	subi	r18, 0xFA	; 250
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	59 d3       	rcall	.+1714   	; 0x1f92 <_ZN8SdVolume15allocContiguousEmPm>
    18e0:	88 23       	and	r24, r24
    18e2:	a1 f0       	breq	.+40     	; 0x190c <_ZN6SdFile10addClusterEv+0x46>
    18e4:	8f 89       	ldd	r24, Y+23	; 0x17

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    18e6:	98 8d       	ldd	r25, Y+24	; 0x18
    18e8:	a9 8d       	ldd	r26, Y+25	; 0x19
    18ea:	ba 8d       	ldd	r27, Y+26	; 0x1a
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	a1 05       	cpc	r26, r1
    18f0:	b1 05       	cpc	r27, r1
    18f2:	59 f4       	brne	.+22     	; 0x190a <_ZN6SdFile10addClusterEv+0x44>
    18f4:	8e 81       	ldd	r24, Y+6	; 0x06
    firstCluster_ = curCluster_;
    18f6:	9f 81       	ldd	r25, Y+7	; 0x07
    18f8:	a8 85       	ldd	r26, Y+8	; 0x08
    18fa:	b9 85       	ldd	r27, Y+9	; 0x09
    18fc:	8f 8b       	std	Y+23, r24	; 0x17
    18fe:	98 8f       	std	Y+24, r25	; 0x18
    1900:	a9 8f       	std	Y+25, r26	; 0x19
    1902:	ba 8f       	std	Y+26, r27	; 0x1a
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    flags_ |= F_FILE_DIR_DIRTY;
    1906:	80 68       	ori	r24, 0x80	; 128
    1908:	8c 83       	std	Y+4, r24	; 0x04
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	df 91       	pop	r29
  }
  return true;
}
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    1912:	2f 92       	push	r2
    1914:	3f 92       	push	r3
    1916:	4f 92       	push	r4
    1918:	5f 92       	push	r5
    191a:	7f 92       	push	r7
    191c:	8f 92       	push	r8
    191e:	9f 92       	push	r9
    1920:	af 92       	push	r10
    1922:	bf 92       	push	r11
    1924:	cf 92       	push	r12
    1926:	df 92       	push	r13
    1928:	ef 92       	push	r14
    192a:	ff 92       	push	r15
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <_ZN6SdFile5writeEPKvj+0x24>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <_ZN6SdFile5writeEPKvj+0x26>
    1938:	00 d0       	rcall	.+0      	; 0x193a <_ZN6SdFile5writeEPKvj+0x28>
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	6c 01       	movw	r12, r24
    1940:	16 2f       	mov	r17, r22
    1942:	07 2f       	mov	r16, r23
    1944:	5e 83       	std	Y+6, r21	; 0x06
    1946:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1948:	dc 01       	movw	r26, r24
    194a:	15 96       	adiw	r26, 0x05	; 5
    194c:	8c 91       	ld	r24, X
    194e:	15 97       	sbiw	r26, 0x05	; 5
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	09 f0       	breq	.+2      	; 0x1956 <_ZN6SdFile5writeEPKvj+0x44>
    1954:	69 c1       	rjmp	.+722    	; 0x1c28 <_ZN6SdFile5writeEPKvj+0x316>
    1956:	14 96       	adiw	r26, 0x04	; 4
    1958:	8c 91       	ld	r24, X
    195a:	81 ff       	sbrs	r24, 1
    195c:	65 c1       	rjmp	.+714    	; 0x1c28 <_ZN6SdFile5writeEPKvj+0x316>
    195e:	87 c1       	rjmp	.+782    	; 0x1c6e <_ZN6SdFile5writeEPKvj+0x35c>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1960:	f6 01       	movw	r30, r12
    1962:	43 89       	ldd	r20, Z+19	; 0x13
    1964:	54 89       	ldd	r21, Z+20	; 0x14
    1966:	65 89       	ldd	r22, Z+21	; 0x15
    1968:	76 89       	ldd	r23, Z+22	; 0x16
    196a:	82 85       	ldd	r24, Z+10	; 0x0a
    196c:	93 85       	ldd	r25, Z+11	; 0x0b
    196e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1970:	b5 85       	ldd	r27, Z+13	; 0x0d
    1972:	84 17       	cp	r24, r20
    1974:	95 07       	cpc	r25, r21
    1976:	a6 07       	cpc	r26, r22
    1978:	b7 07       	cpc	r27, r23
    197a:	29 f0       	breq	.+10     	; 0x1986 <_ZN6SdFile5writeEPKvj+0x74>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    197c:	c6 01       	movw	r24, r12
    197e:	97 de       	rcall	.-722    	; 0x16ae <_ZN6SdFile7seekSetEm>
    1980:	88 23       	and	r24, r24
    if (!seekEnd()) goto writeErrorReturn;
    1982:	09 f4       	brne	.+2      	; 0x1986 <_ZN6SdFile5writeEPKvj+0x74>
    1984:	51 c1       	rjmp	.+674    	; 0x1c28 <_ZN6SdFile5writeEPKvj+0x316>
    1986:	81 2f       	mov	r24, r17
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    1988:	90 2f       	mov	r25, r16
    198a:	9c 01       	movw	r18, r24
    198c:	29 01       	movw	r4, r18
    198e:	2d 80       	ldd	r2, Y+5	; 0x05
    1990:	3e 80       	ldd	r3, Y+6	; 0x06
    1992:	12 c1       	rjmp	.+548    	; 0x1bb8 <_ZN6SdFile5writeEPKvj+0x2a6>
    1994:	d6 01       	movw	r26, r12
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    1996:	5b 96       	adiw	r26, 0x1b	; 27
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	5c 97       	sbiw	r26, 0x1c	; 28
    199e:	da 01       	movw	r26, r20
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    19a0:	c9 01       	movw	r24, r18
    19a2:	19 e0       	ldi	r17, 0x09	; 9
    19a4:	b6 95       	lsr	r27
    19a6:	a7 95       	ror	r26
    19a8:	97 95       	ror	r25
    19aa:	87 95       	ror	r24
    19ac:	1a 95       	dec	r17
    19ae:	d1 f7       	brne	.-12     	; 0x19a4 <_ZN6SdFile5writeEPKvj+0x92>
    19b0:	74 80       	ldd	r7, Z+4	; 0x04
    19b2:	7a 94       	dec	r7
    19b4:	78 22       	and	r7, r24
    19b6:	7f ef       	ldi	r23, 0xFF	; 255
    uint16_t blockOffset = curPosition_ & 0X1FF;
    19b8:	87 2e       	mov	r8, r23
    19ba:	71 e0       	ldi	r23, 0x01	; 1
    19bc:	97 2e       	mov	r9, r23
    19be:	82 22       	and	r8, r18
    19c0:	93 22       	and	r9, r19
    19c2:	77 20       	and	r7, r7
    if (blockOfCluster == 0 && blockOffset == 0) {
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <_ZN6SdFile5writeEPKvj+0xb6>
    19c6:	4c c0       	rjmp	.+152    	; 0x1a60 <_ZN6SdFile5writeEPKvj+0x14e>
    19c8:	81 14       	cp	r8, r1
    19ca:	91 04       	cpc	r9, r1
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <_ZN6SdFile5writeEPKvj+0xbe>
    19ce:	48 c0       	rjmp	.+144    	; 0x1a60 <_ZN6SdFile5writeEPKvj+0x14e>
    19d0:	d6 01       	movw	r26, r12
      // start of new cluster
      if (curCluster_ == 0) {
    19d2:	16 96       	adiw	r26, 0x06	; 6
    19d4:	4d 91       	ld	r20, X+
    19d6:	5d 91       	ld	r21, X+
    19d8:	6d 91       	ld	r22, X+
    19da:	7c 91       	ld	r23, X
    19dc:	19 97       	sbiw	r26, 0x09	; 9
    19de:	41 15       	cp	r20, r1
    19e0:	51 05       	cpc	r21, r1
    19e2:	61 05       	cpc	r22, r1
    19e4:	71 05       	cpc	r23, r1
    19e6:	81 f4       	brne	.+32     	; 0x1a08 <_ZN6SdFile5writeEPKvj+0xf6>
    19e8:	57 96       	adiw	r26, 0x17	; 23
        if (firstCluster_ == 0) {
    19ea:	8d 91       	ld	r24, X+
    19ec:	9d 91       	ld	r25, X+
    19ee:	0d 90       	ld	r0, X+
    19f0:	bc 91       	ld	r27, X
    19f2:	a0 2d       	mov	r26, r0
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	a1 05       	cpc	r26, r1
    19f8:	b1 05       	cpc	r27, r1
    19fa:	41 f1       	breq	.+80     	; 0x1a4c <_ZN6SdFile5writeEPKvj+0x13a>
    19fc:	f6 01       	movw	r30, r12
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = firstCluster_;
    19fe:	86 83       	std	Z+6, r24	; 0x06
    1a00:	97 83       	std	Z+7, r25	; 0x07
    1a02:	a0 87       	std	Z+8, r26	; 0x08
    1a04:	b1 87       	std	Z+9, r27	; 0x09
    1a06:	2c c0       	rjmp	.+88     	; 0x1a60 <_ZN6SdFile5writeEPKvj+0x14e>
    1a08:	cf 01       	movw	r24, r30
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1a0a:	9e 01       	movw	r18, r28
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	4e d2       	rcall	.+1180   	; 0x1eae <_ZNK8SdVolume6fatGetEmPm>
    1a12:	88 23       	and	r24, r24
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <_ZN6SdFile5writeEPKvj+0x106>
    1a16:	0f c1       	rjmp	.+542    	; 0x1c36 <_ZN6SdFile5writeEPKvj+0x324>
    1a18:	29 81       	ldd	r18, Y+1	; 0x01
    1a1a:	3a 81       	ldd	r19, Y+2	; 0x02
        if (vol_->isEOC(next)) {
    1a1c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a1e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a20:	d6 01       	movw	r26, r12
    1a22:	5b 96       	adiw	r26, 0x1b	; 27
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1a24:	ed 91       	ld	r30, X+
    1a26:	fc 91       	ld	r31, X
    1a28:	5c 97       	sbiw	r26, 0x1c	; 28
    1a2a:	87 89       	ldd	r24, Z+23	; 0x17
    1a2c:	80 31       	cpi	r24, 0x10	; 16
    1a2e:	29 f0       	breq	.+10     	; 0x1a3a <_ZN6SdFile5writeEPKvj+0x128>
    1a30:	88 ef       	ldi	r24, 0xF8	; 248
    1a32:	9f ef       	ldi	r25, 0xFF	; 255
    1a34:	af ef       	ldi	r26, 0xFF	; 255
    1a36:	bf e0       	ldi	r27, 0x0F	; 15
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <_ZN6SdFile5writeEPKvj+0x130>
    1a3a:	88 ef       	ldi	r24, 0xF8	; 248
    1a3c:	9f ef       	ldi	r25, 0xFF	; 255
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	28 17       	cp	r18, r24
    1a44:	39 07       	cpc	r19, r25
    1a46:	4a 07       	cpc	r20, r26
    1a48:	5b 07       	cpc	r21, r27
    1a4a:	28 f0       	brcs	.+10     	; 0x1a56 <_ZN6SdFile5writeEPKvj+0x144>
    1a4c:	c6 01       	movw	r24, r12
    1a4e:	3b df       	rcall	.-394    	; 0x18c6 <_ZN6SdFile10addClusterEv>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1a50:	88 23       	and	r24, r24
    1a52:	31 f4       	brne	.+12     	; 0x1a60 <_ZN6SdFile5writeEPKvj+0x14e>
    1a54:	e9 c0       	rjmp	.+466    	; 0x1c28 <_ZN6SdFile5writeEPKvj+0x316>
    1a56:	f6 01       	movw	r30, r12
    1a58:	26 83       	std	Z+6, r18	; 0x06
    1a5a:	37 83       	std	Z+7, r19	; 0x07
        } else {
          curCluster_ = next;
    1a5c:	40 87       	std	Z+8, r20	; 0x08
    1a5e:	51 87       	std	Z+9, r21	; 0x09
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	88 19       	sub	r24, r8
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1a66:	99 09       	sbc	r25, r9
    1a68:	51 01       	movw	r10, r2
    1a6a:	82 15       	cp	r24, r2
    1a6c:	93 05       	cpc	r25, r3
    1a6e:	08 f4       	brcc	.+2      	; 0x1a72 <_ZN6SdFile5writeEPKvj+0x160>
    1a70:	5c 01       	movw	r10, r24
    1a72:	d6 01       	movw	r26, r12
    1a74:	5b 96       	adiw	r26, 0x1b	; 27
    1a76:	ed 91       	ld	r30, X+

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1a78:	fc 91       	ld	r31, X
    1a7a:	5c 97       	sbiw	r26, 0x1c	; 28
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	ed 90       	ld	r14, X+
    1a80:	fd 90       	ld	r15, X+
    1a82:	0d 91       	ld	r16, X+
    1a84:	1c 91       	ld	r17, X
    1a86:	19 97       	sbiw	r26, 0x09	; 9
    1a88:	8e ef       	ldi	r24, 0xFE	; 254
    1a8a:	9f ef       	ldi	r25, 0xFF	; 255
    1a8c:	af ef       	ldi	r26, 0xFF	; 255
    1a8e:	bf ef       	ldi	r27, 0xFF	; 255
    1a90:	e8 0e       	add	r14, r24
    1a92:	f9 1e       	adc	r15, r25
    1a94:	0a 1f       	adc	r16, r26
    1a96:	1b 1f       	adc	r17, r27
    1a98:	05 84       	ldd	r0, Z+13	; 0x0d
    1a9a:	04 c0       	rjmp	.+8      	; 0x1aa4 <_ZN6SdFile5writeEPKvj+0x192>
    1a9c:	ee 0c       	add	r14, r14
    1a9e:	ff 1c       	adc	r15, r15
    1aa0:	00 1f       	adc	r16, r16
    1aa2:	11 1f       	adc	r17, r17
    1aa4:	0a 94       	dec	r0
    1aa6:	d2 f7       	brpl	.-12     	; 0x1a9c <_ZN6SdFile5writeEPKvj+0x18a>
    1aa8:	86 85       	ldd	r24, Z+14	; 0x0e
    1aaa:	97 85       	ldd	r25, Z+15	; 0x0f
    1aac:	a0 89       	ldd	r26, Z+16	; 0x10
    1aae:	b1 89       	ldd	r27, Z+17	; 0x11
    1ab0:	e8 0e       	add	r14, r24
    1ab2:	f9 1e       	adc	r15, r25
    1ab4:	0a 1f       	adc	r16, r26
    1ab6:	1b 1f       	adc	r17, r27
    1ab8:	e7 0c       	add	r14, r7
    1aba:	f1 1c       	adc	r15, r1
    1abc:	01 1d       	adc	r16, r1
    1abe:	11 1d       	adc	r17, r1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 16       	cp	r10, r25
    1ac4:	92 e0       	ldi	r25, 0x02	; 2
    if (n == 512) {
    1ac6:	b9 06       	cpc	r11, r25
    1ac8:	49 f5       	brne	.+82     	; 0x1b1c <_ZN6SdFile5writeEPKvj+0x20a>
    1aca:	80 91 51 02 	lds	r24, 0x0251
    1ace:	90 91 52 02 	lds	r25, 0x0252
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    1ad2:	a0 91 53 02 	lds	r26, 0x0253
    1ad6:	b0 91 54 02 	lds	r27, 0x0254
    1ada:	8e 15       	cp	r24, r14
    1adc:	9f 05       	cpc	r25, r15
    1ade:	a0 07       	cpc	r26, r16
    1ae0:	b1 07       	cpc	r27, r17
    1ae2:	61 f4       	brne	.+24     	; 0x1afc <_ZN6SdFile5writeEPKvj+0x1ea>
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	9f ef       	ldi	r25, 0xFF	; 255
    1ae8:	af ef       	ldi	r26, 0xFF	; 255
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    1aea:	bf ef       	ldi	r27, 0xFF	; 255
    1aec:	80 93 51 02 	sts	0x0251, r24
    1af0:	90 93 52 02 	sts	0x0252, r25
    1af4:	a0 93 53 02 	sts	0x0253, r26
    1af8:	b0 93 54 02 	sts	0x0254, r27
    1afc:	80 91 73 05 	lds	r24, 0x0573
    1b00:	90 91 74 05 	lds	r25, 0x0574
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1b04:	b8 01       	movw	r22, r16
    1b06:	a7 01       	movw	r20, r14
    1b08:	92 01       	movw	r18, r4
    1b0a:	d2 dc       	rcall	.-1628   	; 0x14b0 <_ZN7Sd2Card10writeBlockEmPKh>
    1b0c:	88 23       	and	r24, r24
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <_ZN6SdFile5writeEPKvj+0x200>
    1b10:	8b c0       	rjmp	.+278    	; 0x1c28 <_ZN6SdFile5writeEPKvj+0x316>
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1b14:	b2 e0       	ldi	r27, 0x02	; 2
    1b16:	4a 0e       	add	r4, r26
    1b18:	5b 1e       	adc	r5, r27
      src += 512;
    1b1a:	3c c0       	rjmp	.+120    	; 0x1b94 <_ZN6SdFile5writeEPKvj+0x282>
    1b1c:	81 14       	cp	r8, r1
    1b1e:	91 04       	cpc	r9, r1
    1b20:	01 f5       	brne	.+64     	; 0x1b62 <_ZN6SdFile5writeEPKvj+0x250>
    1b22:	f6 01       	movw	r30, r12
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1b24:	22 85       	ldd	r18, Z+10	; 0x0a
    1b26:	33 85       	ldd	r19, Z+11	; 0x0b
    1b28:	44 85       	ldd	r20, Z+12	; 0x0c
    1b2a:	55 85       	ldd	r21, Z+13	; 0x0d
    1b2c:	83 89       	ldd	r24, Z+19	; 0x13
    1b2e:	94 89       	ldd	r25, Z+20	; 0x14
    1b30:	a5 89       	ldd	r26, Z+21	; 0x15
    1b32:	b6 89       	ldd	r27, Z+22	; 0x16
    1b34:	28 17       	cp	r18, r24
    1b36:	39 07       	cpc	r19, r25
    1b38:	4a 07       	cpc	r20, r26
    1b3a:	5b 07       	cpc	r21, r27
    1b3c:	90 f0       	brcs	.+36     	; 0x1b62 <_ZN6SdFile5writeEPKvj+0x250>
    1b3e:	aa d0       	rcall	.+340    	; 0x1c94 <_ZN8SdVolume10cacheFlushEv>
    1b40:	88 23       	and	r24, r24
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <_ZN6SdFile5writeEPKvj+0x234>
    1b44:	71 c0       	rjmp	.+226    	; 0x1c28 <_ZN6SdFile5writeEPKvj+0x316>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1b46:	e0 92 51 02 	sts	0x0251, r14
    1b4a:	f0 92 52 02 	sts	0x0252, r15
    1b4e:	00 93 53 02 	sts	0x0253, r16
        SdVolume::cacheBlockNumber_ = block;
    1b52:	10 93 54 02 	sts	0x0254, r17
    1b56:	80 91 75 05 	lds	r24, 0x0575
    1b5a:	81 60       	ori	r24, 0x01	; 1
    1b5c:	80 93 75 05 	sts	0x0575, r24
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1b60:	07 c0       	rjmp	.+14     	; 0x1b70 <_ZN6SdFile5writeEPKvj+0x25e>
    1b62:	c8 01       	movw	r24, r16
    1b64:	b7 01       	movw	r22, r14
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	ce d0       	rcall	.+412    	; 0x1d06 <_ZN8SdVolume13cacheRawBlockEmh>
    1b6a:	88 23       	and	r24, r24
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <_ZN6SdFile5writeEPKvj+0x25e>
    1b6e:	5c c0       	rjmp	.+184    	; 0x1c28 <_ZN6SdFile5writeEPKvj+0x316>
    1b70:	94 01       	movw	r18, r8
    1b72:	2d 58       	subi	r18, 0x8D	; 141
    1b74:	3c 4f       	sbci	r19, 0xFC	; 252
    1b76:	a9 01       	movw	r20, r18
    1b78:	4a 0d       	add	r20, r10
    1b7a:	5b 1d       	adc	r21, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    1b7c:	d2 01       	movw	r26, r4
    1b7e:	f9 01       	movw	r30, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <_ZN6SdFile5writeEPKvj+0x274>
      uint8_t* end = dst + n;
    1b82:	8d 91       	ld	r24, X+
    1b84:	81 93       	st	Z+, r24
    1b86:	e4 17       	cp	r30, r20
    1b88:	f5 07       	cpc	r31, r21
    1b8a:	d9 f7       	brne	.-10     	; 0x1b82 <_ZN6SdFile5writeEPKvj+0x270>
    1b8c:	e2 1b       	sub	r30, r18
      while (dst != end) *dst++ = *src++;
    1b8e:	f3 0b       	sbc	r31, r19
    1b90:	4e 0e       	add	r4, r30
    1b92:	5f 1e       	adc	r5, r31
    1b94:	2a 18       	sub	r2, r10
    1b96:	3b 08       	sbc	r3, r11
    1b98:	95 01       	movw	r18, r10
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	f6 01       	movw	r30, r12
    }
    nToWrite -= n;
    1ba0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ba2:	93 85       	ldd	r25, Z+11	; 0x0b
    curPosition_ += n;
    1ba4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ba6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ba8:	82 0f       	add	r24, r18
    1baa:	93 1f       	adc	r25, r19
    1bac:	a4 1f       	adc	r26, r20
    1bae:	b5 1f       	adc	r27, r21
    1bb0:	82 87       	std	Z+10, r24	; 0x0a
    1bb2:	93 87       	std	Z+11, r25	; 0x0b
    1bb4:	a4 87       	std	Z+12, r26	; 0x0c
    1bb6:	b5 87       	std	Z+13, r27	; 0x0d
    1bb8:	d6 01       	movw	r26, r12
    1bba:	1a 96       	adiw	r26, 0x0a	; 10
    1bbc:	2d 91       	ld	r18, X+
    1bbe:	3d 91       	ld	r19, X+
    1bc0:	4d 91       	ld	r20, X+
    1bc2:	5c 91       	ld	r21, X
    1bc4:	1d 97       	sbiw	r26, 0x0d	; 13
    1bc6:	21 14       	cp	r2, r1
    1bc8:	31 04       	cpc	r3, r1
    1bca:	09 f0       	breq	.+2      	; 0x1bce <_ZN6SdFile5writeEPKvj+0x2bc>
    1bcc:	e3 ce       	rjmp	.-570    	; 0x1994 <_ZN6SdFile5writeEPKvj+0x82>
    1bce:	53 96       	adiw	r26, 0x13	; 19
    1bd0:	8d 91       	ld	r24, X+
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1bd2:	9d 91       	ld	r25, X+
    1bd4:	0d 90       	ld	r0, X+
    1bd6:	bc 91       	ld	r27, X
    1bd8:	a0 2d       	mov	r26, r0
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1bda:	82 17       	cp	r24, r18
    1bdc:	93 07       	cpc	r25, r19
    1bde:	a4 07       	cpc	r26, r20
    1be0:	b5 07       	cpc	r27, r21
    1be2:	48 f4       	brcc	.+18     	; 0x1bf6 <_ZN6SdFile5writeEPKvj+0x2e4>
    1be4:	f6 01       	movw	r30, r12
    1be6:	23 8b       	std	Z+19, r18	; 0x13
    1be8:	34 8b       	std	Z+20, r19	; 0x14
    1bea:	45 8b       	std	Z+21, r20	; 0x15
    1bec:	56 8b       	std	Z+22, r21	; 0x16
    1bee:	84 81       	ldd	r24, Z+4	; 0x04
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    1bf0:	80 68       	ori	r24, 0x80	; 128
    1bf2:	84 83       	std	Z+4, r24	; 0x04
    1bf4:	11 c0       	rjmp	.+34     	; 0x1c18 <_ZN6SdFile5writeEPKvj+0x306>
    1bf6:	80 91 71 03 	lds	r24, 0x0371
    flags_ |= F_FILE_DIR_DIRTY;
    1bfa:	90 91 72 03 	lds	r25, 0x0372
    1bfe:	89 2b       	or	r24, r25
    1c00:	59 f0       	breq	.+22     	; 0x1c18 <_ZN6SdFile5writeEPKvj+0x306>
  } else if (dateTime_ && nbyte) {
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	89 2b       	or	r24, r25
    1c08:	39 f0       	breq	.+14     	; 0x1c18 <_ZN6SdFile5writeEPKvj+0x306>
    1c0a:	d6 01       	movw	r26, r12
    1c0c:	14 96       	adiw	r26, 0x04	; 4
    1c0e:	8c 91       	ld	r24, X
    1c10:	14 97       	sbiw	r26, 0x04	; 4
    1c12:	80 68       	ori	r24, 0x80	; 128
    1c14:	14 96       	adiw	r26, 0x04	; 4
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1c16:	8c 93       	st	X, r24
    1c18:	f6 01       	movw	r30, r12
    1c1a:	84 81       	ldd	r24, Z+4	; 0x04
    1c1c:	83 ff       	sbrs	r24, 3
    1c1e:	0d c0       	rjmp	.+26     	; 0x1c3a <_ZN6SdFile5writeEPKvj+0x328>
    1c20:	c6 01       	movw	r24, r12
    1c22:	09 de       	rcall	.-1006   	; 0x1836 <_ZN6SdFile4syncEv>
  }

  if (flags_ & O_SYNC) {
    1c24:	88 23       	and	r24, r24
    1c26:	49 f4       	brne	.+18     	; 0x1c3a <_ZN6SdFile5writeEPKvj+0x328>
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	d6 01       	movw	r26, r12
    1c2e:	13 96       	adiw	r26, 0x03	; 3
    1c30:	9c 93       	st	X, r25
    1c32:	8e 93       	st	-X, r24
    1c34:	12 97       	sbiw	r26, 0x02	; 2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1c36:	1e 82       	std	Y+6, r1	; 0x06
    1c38:	1d 82       	std	Y+5, r1	; 0x05
    1c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3e:	26 96       	adiw	r28, 0x06	; 6
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	9f 90       	pop	r9
    1c60:	8f 90       	pop	r8
    1c62:	7f 90       	pop	r7
    1c64:	5f 90       	pop	r5
    1c66:	4f 90       	pop	r4
    1c68:	3f 90       	pop	r3
    1c6a:	2f 90       	pop	r2
    1c6c:	08 95       	ret
    1c6e:	82 fd       	sbrc	r24, 2
    1c70:	77 ce       	rjmp	.-786    	; 0x1960 <_ZN6SdFile5writeEPKvj+0x4e>
    1c72:	89 ce       	rjmp	.-750    	; 0x1986 <_ZN6SdFile5writeEPKvj+0x74>

00001c74 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	0f 92       	push	r0
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    1c80:	be 01       	movw	r22, r28
    1c82:	6f 5f       	subi	r22, 0xFF	; 255
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	43 de       	rcall	.-890    	; 0x1912 <_ZN6SdFile5writeEPKvj>
    1c8c:	0f 90       	pop	r0
}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    1c94:	80 91 75 05 	lds	r24, 0x0575
    1c98:	88 23       	and	r24, r24
    1c9a:	89 f1       	breq	.+98     	; 0x1cfe <_ZN8SdVolume10cacheFlushEv+0x6a>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    1c9c:	40 91 51 02 	lds	r20, 0x0251
    1ca0:	50 91 52 02 	lds	r21, 0x0252
    1ca4:	60 91 53 02 	lds	r22, 0x0253
    1ca8:	70 91 54 02 	lds	r23, 0x0254
    1cac:	80 91 73 05 	lds	r24, 0x0573
    1cb0:	90 91 74 05 	lds	r25, 0x0574
    1cb4:	23 e7       	ldi	r18, 0x73	; 115
    1cb6:	33 e0       	ldi	r19, 0x03	; 3
    1cb8:	fb db       	rcall	.-2058   	; 0x14b0 <_ZN7Sd2Card10writeBlockEmPKh>
    1cba:	88 23       	and	r24, r24
    1cbc:	11 f1       	breq	.+68     	; 0x1d02 <_ZN8SdVolume10cacheFlushEv+0x6e>
    1cbe:	40 91 76 05 	lds	r20, 0x0576
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    1cc2:	50 91 77 05 	lds	r21, 0x0577
    1cc6:	60 91 78 05 	lds	r22, 0x0578
    1cca:	70 91 79 05 	lds	r23, 0x0579
    1cce:	41 15       	cp	r20, r1
    1cd0:	51 05       	cpc	r21, r1
    1cd2:	61 05       	cpc	r22, r1
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	89 f0       	breq	.+34     	; 0x1cfa <_ZN8SdVolume10cacheFlushEv+0x66>
    1cd8:	80 91 73 05 	lds	r24, 0x0573
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1cdc:	90 91 74 05 	lds	r25, 0x0574
    1ce0:	23 e7       	ldi	r18, 0x73	; 115
    1ce2:	33 e0       	ldi	r19, 0x03	; 3
    1ce4:	e5 db       	rcall	.-2102   	; 0x14b0 <_ZN7Sd2Card10writeBlockEmPKh>
    1ce6:	88 23       	and	r24, r24
    1ce8:	61 f0       	breq	.+24     	; 0x1d02 <_ZN8SdVolume10cacheFlushEv+0x6e>
    1cea:	10 92 76 05 	sts	0x0576, r1
        return false;
      }
      cacheMirrorBlock_ = 0;
    1cee:	10 92 77 05 	sts	0x0577, r1
    1cf2:	10 92 78 05 	sts	0x0578, r1
    1cf6:	10 92 79 05 	sts	0x0579, r1
    1cfa:	10 92 75 05 	sts	0x0575, r1
    }
    cacheDirty_ = 0;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	08 95       	ret
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	08 95       	ret

00001d06 <_ZN8SdVolume13cacheRawBlockEmh>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	7b 01       	movw	r14, r22
    1d12:	8c 01       	movw	r16, r24
    1d14:	d4 2e       	mov	r13, r20
  if (cacheBlockNumber_ != blockNumber) {
    1d16:	80 91 51 02 	lds	r24, 0x0251
    1d1a:	90 91 52 02 	lds	r25, 0x0252
    1d1e:	a0 91 53 02 	lds	r26, 0x0253
    1d22:	b0 91 54 02 	lds	r27, 0x0254
    1d26:	8e 15       	cp	r24, r14
    1d28:	9f 05       	cpc	r25, r15
    1d2a:	a0 07       	cpc	r26, r16
    1d2c:	b1 07       	cpc	r27, r17
    1d2e:	b1 f0       	breq	.+44     	; 0x1d5c <_ZN8SdVolume13cacheRawBlockEmh+0x56>
    if (!cacheFlush()) return false;
    1d30:	b1 df       	rcall	.-158    	; 0x1c94 <_ZN8SdVolume10cacheFlushEv>
    1d32:	88 23       	and	r24, r24
    1d34:	d1 f0       	breq	.+52     	; 0x1d6a <_ZN8SdVolume13cacheRawBlockEmh+0x64>
    1d36:	80 91 73 05 	lds	r24, 0x0573
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    1d3a:	90 91 74 05 	lds	r25, 0x0574
    1d3e:	b8 01       	movw	r22, r16
    1d40:	a7 01       	movw	r20, r14
    1d42:	23 e7       	ldi	r18, 0x73	; 115
    1d44:	33 e0       	ldi	r19, 0x03	; 3
    1d46:	a4 dc       	rcall	.-1720   	; 0x1690 <_ZN7Sd2Card9readBlockEmPh>
    1d48:	88 23       	and	r24, r24
    1d4a:	79 f0       	breq	.+30     	; 0x1d6a <_ZN8SdVolume13cacheRawBlockEmh+0x64>
    1d4c:	e0 92 51 02 	sts	0x0251, r14
    cacheBlockNumber_ = blockNumber;
    1d50:	f0 92 52 02 	sts	0x0252, r15
    1d54:	00 93 53 02 	sts	0x0253, r16
    1d58:	10 93 54 02 	sts	0x0254, r17
    1d5c:	80 91 75 05 	lds	r24, 0x0575
  }
  cacheDirty_ |= action;
    1d60:	8d 29       	or	r24, r13
    1d62:	80 93 75 05 	sts	0x0575, r24
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	1f 91       	pop	r17
  return true;
    1d6e:	0f 91       	pop	r16
}
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	08 95       	ret

00001d78 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    1d78:	4f 92       	push	r4
    1d7a:	5f 92       	push	r5
    1d7c:	6f 92       	push	r6
    1d7e:	7f 92       	push	r7
    1d80:	8f 92       	push	r8
    1d82:	9f 92       	push	r9
    1d84:	af 92       	push	r10
    1d86:	bf 92       	push	r11
    1d88:	cf 92       	push	r12
    1d8a:	df 92       	push	r13
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	ec 01       	movw	r28, r24
    1d9a:	6a 01       	movw	r12, r20
    1d9c:	7b 01       	movw	r14, r22
    1d9e:	28 01       	movw	r4, r16
    1da0:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    1da2:	42 30       	cpi	r20, 0x02	; 2
    1da4:	51 05       	cpc	r21, r1
    1da6:	61 05       	cpc	r22, r1
    1da8:	71 05       	cpc	r23, r1
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <_ZN8SdVolume6fatPutEmm+0x36>
    1dac:	6e c0       	rjmp	.+220    	; 0x1e8a <_ZN8SdVolume6fatPutEmm+0x112>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1db4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	a1 1d       	adc	r26, r1
    1dba:	b1 1d       	adc	r27, r1
    1dbc:	84 17       	cp	r24, r20
    1dbe:	95 07       	cpc	r25, r21
    1dc0:	a6 07       	cpc	r26, r22
    1dc2:	b7 07       	cpc	r27, r23
    1dc4:	08 f4       	brcc	.+2      	; 0x1dc8 <_ZN8SdVolume6fatPutEmm+0x50>
    1dc6:	61 c0       	rjmp	.+194    	; 0x1e8a <_ZN8SdVolume6fatPutEmm+0x112>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    1dc8:	2b 89       	ldd	r18, Y+19	; 0x13
    1dca:	3c 89       	ldd	r19, Y+20	; 0x14
    1dcc:	4d 89       	ldd	r20, Y+21	; 0x15
    1dce:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd2:	80 31       	cpi	r24, 0x10	; 16
    1dd4:	29 f4       	brne	.+10     	; 0x1de0 <_ZN8SdVolume6fatPutEmm+0x68>
    1dd6:	99 27       	eor	r25, r25
    1dd8:	8f 2d       	mov	r24, r15
    1dda:	7e 2d       	mov	r23, r14
    1ddc:	6d 2d       	mov	r22, r13
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <_ZN8SdVolume6fatPutEmm+0x7a>
    1de0:	c7 01       	movw	r24, r14
    1de2:	b6 01       	movw	r22, r12
    1de4:	17 e0       	ldi	r17, 0x07	; 7
    1de6:	96 95       	lsr	r25
    1de8:	87 95       	ror	r24
    1dea:	77 95       	ror	r23
    1dec:	67 95       	ror	r22
    1dee:	1a 95       	dec	r17
    1df0:	d1 f7       	brne	.-12     	; 0x1de6 <_ZN8SdVolume6fatPutEmm+0x6e>
    1df2:	4b 01       	movw	r8, r22
    1df4:	5c 01       	movw	r10, r24
    1df6:	82 0e       	add	r8, r18
    1df8:	93 1e       	adc	r9, r19
    1dfa:	a4 1e       	adc	r10, r20
    1dfc:	b5 1e       	adc	r11, r21

  if (lba != cacheBlockNumber_) {
    1dfe:	80 91 51 02 	lds	r24, 0x0251
    1e02:	90 91 52 02 	lds	r25, 0x0252
    1e06:	a0 91 53 02 	lds	r26, 0x0253
    1e0a:	b0 91 54 02 	lds	r27, 0x0254
    1e0e:	88 16       	cp	r8, r24
    1e10:	99 06       	cpc	r9, r25
    1e12:	aa 06       	cpc	r10, r26
    1e14:	bb 06       	cpc	r11, r27
    1e16:	31 f0       	breq	.+12     	; 0x1e24 <_ZN8SdVolume6fatPutEmm+0xac>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1e18:	c5 01       	movw	r24, r10
    1e1a:	b4 01       	movw	r22, r8
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	73 df       	rcall	.-282    	; 0x1d06 <_ZN8SdVolume13cacheRawBlockEmh>
    1e20:	88 23       	and	r24, r24
    1e22:	99 f1       	breq	.+102    	; 0x1e8a <_ZN8SdVolume6fatPutEmm+0x112>
    1e24:	8f 89       	ldd	r24, Y+23	; 0x17
  }
  // store entry
  if (fatType_ == 16) {
    1e26:	80 31       	cpi	r24, 0x10	; 16
    1e28:	49 f4       	brne	.+18     	; 0x1e3c <_ZN8SdVolume6fatPutEmm+0xc4>
    1e2a:	f6 01       	movw	r30, r12
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    1e2c:	f0 70       	andi	r31, 0x00	; 0
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	ed 58       	subi	r30, 0x8D	; 141
    1e34:	fc 4f       	sbci	r31, 0xFC	; 252
    1e36:	51 82       	std	Z+1, r5	; 0x01
    1e38:	40 82       	st	Z, r4
    1e3a:	0d c0       	rjmp	.+26     	; 0x1e56 <_ZN8SdVolume6fatPutEmm+0xde>
    1e3c:	f6 01       	movw	r30, r12
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    1e3e:	ef 77       	andi	r30, 0x7F	; 127
    1e40:	f0 70       	andi	r31, 0x00	; 0
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	ed 58       	subi	r30, 0x8D	; 141
    1e4c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e4e:	40 82       	st	Z, r4
    1e50:	51 82       	std	Z+1, r5	; 0x01
    1e52:	62 82       	std	Z+2, r6	; 0x02
    1e54:	73 82       	std	Z+3, r7	; 0x03
    1e56:	80 91 75 05 	lds	r24, 0x0575
    1e5a:	81 60       	ori	r24, 0x01	; 1
    1e5c:	80 93 75 05 	sts	0x0575, r24
    1e60:	8a 89       	ldd	r24, Y+18	; 0x12
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    1e62:	82 30       	cpi	r24, 0x02	; 2
    1e64:	80 f0       	brcs	.+32     	; 0x1e86 <_ZN8SdVolume6fatPutEmm+0x10e>
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	af 81       	ldd	r26, Y+7	; 0x07
    1e6c:	b8 85       	ldd	r27, Y+8	; 0x08
    1e6e:	88 0e       	add	r8, r24
    1e70:	99 1e       	adc	r9, r25
    1e72:	aa 1e       	adc	r10, r26
    1e74:	bb 1e       	adc	r11, r27
    1e76:	80 92 76 05 	sts	0x0576, r8
    1e7a:	90 92 77 05 	sts	0x0577, r9
    1e7e:	a0 92 78 05 	sts	0x0578, r10
    1e82:	b0 92 79 05 	sts	0x0579, r11
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <_ZN8SdVolume6fatPutEmm+0x114>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	df 91       	pop	r29
  return true;
}
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	5f 90       	pop	r5
    1eaa:	4f 90       	pop	r4
    1eac:	08 95       	ret

00001eae <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	ec 01       	movw	r28, r24
    1ec0:	7a 01       	movw	r14, r20
    1ec2:	8b 01       	movw	r16, r22
    1ec4:	69 01       	movw	r12, r18
  if (cluster > (clusterCount_ + 1)) return false;
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eca:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ecc:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	a1 1d       	adc	r26, r1
    1ed2:	b1 1d       	adc	r27, r1
    1ed4:	84 17       	cp	r24, r20
    1ed6:	95 07       	cpc	r25, r21
    1ed8:	a6 07       	cpc	r26, r22
    1eda:	b7 07       	cpc	r27, r23
    1edc:	08 f4       	brcc	.+2      	; 0x1ee0 <_ZNK8SdVolume6fatGetEmPm+0x32>
    1ede:	4f c0       	rjmp	.+158    	; 0x1f7e <_ZNK8SdVolume6fatGetEmPm+0xd0>
  uint32_t lba = fatStartBlock_;
    1ee0:	2b 89       	ldd	r18, Y+19	; 0x13
    1ee2:	3c 89       	ldd	r19, Y+20	; 0x14
    1ee4:	4d 89       	ldd	r20, Y+21	; 0x15
    1ee6:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eea:	80 31       	cpi	r24, 0x10	; 16
    1eec:	29 f4       	brne	.+10     	; 0x1ef8 <_ZNK8SdVolume6fatGetEmPm+0x4a>
    1eee:	99 27       	eor	r25, r25
    1ef0:	81 2f       	mov	r24, r17
    1ef2:	70 2f       	mov	r23, r16
    1ef4:	6f 2d       	mov	r22, r15
    1ef6:	09 c0       	rjmp	.+18     	; 0x1f0a <_ZNK8SdVolume6fatGetEmPm+0x5c>
    1ef8:	c8 01       	movw	r24, r16
    1efa:	b7 01       	movw	r22, r14
    1efc:	e7 e0       	ldi	r30, 0x07	; 7
    1efe:	96 95       	lsr	r25
    1f00:	87 95       	ror	r24
    1f02:	77 95       	ror	r23
    1f04:	67 95       	ror	r22
    1f06:	ea 95       	dec	r30
    1f08:	d1 f7       	brne	.-12     	; 0x1efe <_ZNK8SdVolume6fatGetEmPm+0x50>
    1f0a:	26 0f       	add	r18, r22
    1f0c:	37 1f       	adc	r19, r23
    1f0e:	48 1f       	adc	r20, r24
    1f10:	59 1f       	adc	r21, r25
  if (lba != cacheBlockNumber_) {
    1f12:	80 91 51 02 	lds	r24, 0x0251
    1f16:	90 91 52 02 	lds	r25, 0x0252
    1f1a:	a0 91 53 02 	lds	r26, 0x0253
    1f1e:	b0 91 54 02 	lds	r27, 0x0254
    1f22:	28 17       	cp	r18, r24
    1f24:	39 07       	cpc	r19, r25
    1f26:	4a 07       	cpc	r20, r26
    1f28:	5b 07       	cpc	r21, r27
    1f2a:	31 f0       	breq	.+12     	; 0x1f38 <_ZNK8SdVolume6fatGetEmPm+0x8a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1f2c:	ca 01       	movw	r24, r20
    1f2e:	b9 01       	movw	r22, r18
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	e9 de       	rcall	.-558    	; 0x1d06 <_ZN8SdVolume13cacheRawBlockEmh>
    1f34:	88 23       	and	r24, r24
    1f36:	19 f1       	breq	.+70     	; 0x1f7e <_ZNK8SdVolume6fatGetEmPm+0xd0>
    1f38:	8f 89       	ldd	r24, Y+23	; 0x17
  }
  if (fatType_ == 16) {
    1f3a:	80 31       	cpi	r24, 0x10	; 16
    1f3c:	59 f4       	brne	.+22     	; 0x1f54 <_ZNK8SdVolume6fatGetEmPm+0xa6>
    1f3e:	f7 01       	movw	r30, r14
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    1f40:	f0 70       	andi	r31, 0x00	; 0
    1f42:	ee 0f       	add	r30, r30
    1f44:	ff 1f       	adc	r31, r31
    1f46:	ed 58       	subi	r30, 0x8D	; 141
    1f48:	fc 4f       	sbci	r31, 0xFC	; 252
    1f4a:	80 81       	ld	r24, Z
    1f4c:	91 81       	ldd	r25, Z+1	; 0x01
    1f4e:	a0 e0       	ldi	r26, 0x00	; 0
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	0e c0       	rjmp	.+28     	; 0x1f70 <_ZNK8SdVolume6fatGetEmPm+0xc2>
    1f54:	f7 01       	movw	r30, r14
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    1f56:	ef 77       	andi	r30, 0x7F	; 127
    1f58:	f0 70       	andi	r31, 0x00	; 0
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	ed 58       	subi	r30, 0x8D	; 141
    1f64:	fc 4f       	sbci	r31, 0xFC	; 252
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	a2 81       	ldd	r26, Z+2	; 0x02
    1f6c:	b3 81       	ldd	r27, Z+3	; 0x03
    1f6e:	bf 70       	andi	r27, 0x0F	; 15
    1f70:	f6 01       	movw	r30, r12
    1f72:	80 83       	st	Z, r24
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	a2 83       	std	Z+2, r26	; 0x02
    1f78:	b3 83       	std	Z+3, r27	; 0x03
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <_ZNK8SdVolume6fatGetEmPm+0xd2>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	df 91       	pop	r29
  }
  return true;
}
    1f82:	cf 91       	pop	r28
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	ff 90       	pop	r15
    1f8a:	ef 90       	pop	r14
    1f8c:	df 90       	pop	r13
    1f8e:	cf 90       	pop	r12
    1f90:	08 95       	ret

00001f92 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    1f92:	2f 92       	push	r2
    1f94:	3f 92       	push	r3
    1f96:	4f 92       	push	r4
    1f98:	5f 92       	push	r5
    1f9a:	6f 92       	push	r6
    1f9c:	7f 92       	push	r7
    1f9e:	8f 92       	push	r8
    1fa0:	9f 92       	push	r9
    1fa2:	af 92       	push	r10
    1fa4:	bf 92       	push	r11
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	2f 97       	sbiw	r28, 0x0f	; 15
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	1c 01       	movw	r2, r24
    1fc8:	4a 87       	std	Y+10, r20	; 0x0a
    1fca:	5b 87       	std	Y+11, r21	; 0x0b
    1fcc:	6c 87       	std	Y+12, r22	; 0x0c
    1fce:	7d 87       	std	Y+13, r23	; 0x0d
    1fd0:	3f 87       	std	Y+15, r19	; 0x0f
    1fd2:	2e 87       	std	Y+14, r18	; 0x0e

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    1fd4:	d9 01       	movw	r26, r18
    1fd6:	0d 91       	ld	r16, X+
    1fd8:	1d 91       	ld	r17, X+
    1fda:	2d 91       	ld	r18, X+
    1fdc:	3c 91       	ld	r19, X
    1fde:	01 15       	cp	r16, r1
    1fe0:	11 05       	cpc	r17, r1
    1fe2:	21 05       	cpc	r18, r1
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	49 f0       	breq	.+18     	; 0x1ffa <_ZN8SdVolume15allocContiguousEmPm+0x68>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    1fe8:	48 01       	movw	r8, r16
    1fea:	59 01       	movw	r10, r18
    1fec:	08 94       	sec
    1fee:	81 1c       	adc	r8, r1
    1ff0:	91 1c       	adc	r9, r1
    1ff2:	a1 1c       	adc	r10, r1
    1ff4:	b1 1c       	adc	r11, r1
    1ff6:	19 86       	std	Y+9, r1	; 0x09
    1ff8:	10 c0       	rjmp	.+32     	; 0x201a <_ZN8SdVolume15allocContiguousEmPm+0x88>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	80 80       	ld	r8, Z
    1ffe:	91 80       	ldd	r9, Z+1	; 0x01
    2000:	a2 80       	ldd	r10, Z+2	; 0x02
    2002:	b3 80       	ldd	r11, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2004:	19 86       	std	Y+9, r1	; 0x09
    2006:	8a 85       	ldd	r24, Y+10	; 0x0a
    2008:	9b 85       	ldd	r25, Y+11	; 0x0b
    200a:	ac 85       	ldd	r26, Y+12	; 0x0c
    200c:	bd 85       	ldd	r27, Y+13	; 0x0d
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	a1 05       	cpc	r26, r1
    2012:	b1 05       	cpc	r27, r1
    2014:	11 f4       	brne	.+4      	; 0x201a <_ZN8SdVolume15allocContiguousEmPm+0x88>
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	99 87       	std	Y+9, r25	; 0x09
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    201a:	d1 01       	movw	r26, r2
    201c:	19 96       	adiw	r26, 0x09	; 9
    201e:	8d 91       	ld	r24, X+
    2020:	9d 91       	ld	r25, X+
    2022:	0d 90       	ld	r0, X+
    2024:	bc 91       	ld	r27, X
    2026:	a0 2d       	mov	r26, r0
    2028:	01 96       	adiw	r24, 0x01	; 1
    202a:	a1 1d       	adc	r26, r1
    202c:	b1 1d       	adc	r27, r1
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	af 83       	std	Y+7, r26	; 0x07
    2034:	b8 87       	std	Y+8, r27	; 0x08
    2036:	75 01       	movw	r14, r10
    2038:	64 01       	movw	r12, r8
    203a:	44 24       	eor	r4, r4
    203c:	55 24       	eor	r5, r5
    203e:	32 01       	movw	r6, r4
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2040:	8e 01       	movw	r16, r28
    2042:	0f 5f       	subi	r16, 0xFF	; 255
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2046:	f1 01       	movw	r30, r2
    2048:	81 85       	ldd	r24, Z+9	; 0x09
    204a:	92 85       	ldd	r25, Z+10	; 0x0a
    204c:	a3 85       	ldd	r26, Z+11	; 0x0b
    204e:	b4 85       	ldd	r27, Z+12	; 0x0c
    2050:	48 16       	cp	r4, r24
    2052:	59 06       	cpc	r5, r25
    2054:	6a 06       	cpc	r6, r26
    2056:	7b 06       	cpc	r7, r27
    2058:	08 f0       	brcs	.+2      	; 0x205c <_ZN8SdVolume15allocContiguousEmPm+0xca>
    205a:	8c c0       	rjmp	.+280    	; 0x2174 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	af 81       	ldd	r26, Y+7	; 0x07
    2062:	b8 85       	ldd	r27, Y+8	; 0x08
    2064:	8c 15       	cp	r24, r12
    2066:	9d 05       	cpc	r25, r13
    2068:	ae 05       	cpc	r26, r14
    206a:	bf 05       	cpc	r27, r15
    206c:	50 f4       	brcc	.+20     	; 0x2082 <_ZN8SdVolume15allocContiguousEmPm+0xf0>
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	88 2e       	mov	r8, r24
    2072:	91 2c       	mov	r9, r1
    2074:	a1 2c       	mov	r10, r1
    2076:	b1 2c       	mov	r11, r1
    2078:	b2 e0       	ldi	r27, 0x02	; 2
    207a:	cb 2e       	mov	r12, r27
    207c:	d1 2c       	mov	r13, r1
    207e:	e1 2c       	mov	r14, r1
    2080:	f1 2c       	mov	r15, r1
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2082:	c1 01       	movw	r24, r2
    2084:	b7 01       	movw	r22, r14
    2086:	a6 01       	movw	r20, r12
    2088:	98 01       	movw	r18, r16
    208a:	11 df       	rcall	.-478    	; 0x1eae <_ZNK8SdVolume6fatGetEmPm>
    208c:	88 23       	and	r24, r24
    208e:	09 f4       	brne	.+2      	; 0x2092 <_ZN8SdVolume15allocContiguousEmPm+0x100>
    2090:	71 c0       	rjmp	.+226    	; 0x2174 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    2092:	89 81       	ldd	r24, Y+1	; 0x01

    if (f != 0) {
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	ab 81       	ldd	r26, Y+3	; 0x03
    2098:	bc 81       	ldd	r27, Y+4	; 0x04
    209a:	a7 01       	movw	r20, r14
    209c:	96 01       	movw	r18, r12
    209e:	2f 5f       	subi	r18, 0xFF	; 255
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	4f 4f       	sbci	r20, 0xFF	; 255
    20a4:	5f 4f       	sbci	r21, 0xFF	; 255
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	a1 05       	cpc	r26, r1
    20aa:	b1 05       	cpc	r27, r1
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <_ZN8SdVolume15allocContiguousEmPm+0x122>
    20ae:	49 01       	movw	r8, r18
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    20b0:	5a 01       	movw	r10, r20
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <_ZN8SdVolume15allocContiguousEmPm+0x13c>
    20b4:	28 19       	sub	r18, r8
    } else if ((endCluster - bgnCluster + 1) == count) {
    20b6:	39 09       	sbc	r19, r9
    20b8:	4a 09       	sbc	r20, r10
    20ba:	5b 09       	sbc	r21, r11
    20bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20be:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c0:	ac 85       	ldd	r26, Y+12	; 0x0c
    20c2:	bd 85       	ldd	r27, Y+13	; 0x0d
    20c4:	28 17       	cp	r18, r24
    20c6:	39 07       	cpc	r19, r25
    20c8:	4a 07       	cpc	r20, r26
    20ca:	5b 07       	cpc	r21, r27
    20cc:	59 f0       	breq	.+22     	; 0x20e4 <_ZN8SdVolume15allocContiguousEmPm+0x152>
    20ce:	08 94       	sec

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    20d0:	41 1c       	adc	r4, r1
    20d2:	51 1c       	adc	r5, r1
    20d4:	61 1c       	adc	r6, r1
    20d6:	71 1c       	adc	r7, r1
    20d8:	08 94       	sec
    20da:	c1 1c       	adc	r12, r1
    20dc:	d1 1c       	adc	r13, r1
    20de:	e1 1c       	adc	r14, r1
    20e0:	f1 1c       	adc	r15, r1
    20e2:	b1 cf       	rjmp	.-158    	; 0x2046 <_ZN8SdVolume15allocContiguousEmPm+0xb4>
    20e4:	c1 01       	movw	r24, r2
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    20e6:	a6 01       	movw	r20, r12
    20e8:	b7 01       	movw	r22, r14
    20ea:	0f ef       	ldi	r16, 0xFF	; 255
    20ec:	1f ef       	ldi	r17, 0xFF	; 255
    20ee:	2f ef       	ldi	r18, 0xFF	; 255
    20f0:	3f e0       	ldi	r19, 0x0F	; 15
    20f2:	42 de       	rcall	.-892    	; 0x1d78 <_ZN8SdVolume6fatPutEmm>
    20f4:	88 23       	and	r24, r24
    20f6:	91 f4       	brne	.+36     	; 0x211c <_ZN8SdVolume15allocContiguousEmPm+0x18a>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    20f8:	3d c0       	rjmp	.+122    	; 0x2174 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    20fa:	26 01       	movw	r4, r12
    20fc:	37 01       	movw	r6, r14

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    20fe:	08 94       	sec
    2100:	41 08       	sbc	r4, r1
    2102:	51 08       	sbc	r5, r1
    2104:	61 08       	sbc	r6, r1
    2106:	71 08       	sbc	r7, r1
    2108:	c1 01       	movw	r24, r2
    210a:	b3 01       	movw	r22, r6
    210c:	a2 01       	movw	r20, r4
    210e:	97 01       	movw	r18, r14
    2110:	86 01       	movw	r16, r12
    2112:	32 de       	rcall	.-924    	; 0x1d78 <_ZN8SdVolume6fatPutEmm>
    2114:	88 23       	and	r24, r24
    2116:	71 f1       	breq	.+92     	; 0x2174 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    2118:	73 01       	movw	r14, r6
    211a:	62 01       	movw	r12, r4
    211c:	8c 14       	cp	r8, r12
    211e:	9d 04       	cpc	r9, r13
    2120:	ae 04       	cpc	r10, r14
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2122:	bf 04       	cpc	r11, r15
    2124:	50 f3       	brcs	.-44     	; 0x20fa <_ZN8SdVolume15allocContiguousEmPm+0x168>
    2126:	ae 85       	ldd	r26, Y+14	; 0x0e
    2128:	bf 85       	ldd	r27, Y+15	; 0x0f
    212a:	4d 91       	ld	r20, X+
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    212c:	5d 91       	ld	r21, X+
    212e:	6d 91       	ld	r22, X+
    2130:	7c 91       	ld	r23, X
    2132:	41 15       	cp	r20, r1
    2134:	51 05       	cpc	r21, r1
    2136:	61 05       	cpc	r22, r1
    2138:	71 05       	cpc	r23, r1
    213a:	31 f0       	breq	.+12     	; 0x2148 <_ZN8SdVolume15allocContiguousEmPm+0x1b6>
    213c:	c1 01       	movw	r24, r2
    213e:	95 01       	movw	r18, r10
    2140:	84 01       	movw	r16, r8
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2142:	1a de       	rcall	.-972    	; 0x1d78 <_ZN8SdVolume6fatPutEmm>
    2144:	88 23       	and	r24, r24
    2146:	b1 f0       	breq	.+44     	; 0x2174 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    2148:	ee 85       	ldd	r30, Y+14	; 0x0e
    214a:	ff 85       	ldd	r31, Y+15	; 0x0f
    214c:	80 82       	st	Z, r8
    214e:	91 82       	std	Z+1, r9	; 0x01
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2150:	a2 82       	std	Z+2, r10	; 0x02
    2152:	b3 82       	std	Z+3, r11	; 0x03
    2154:	f9 85       	ldd	r31, Y+9	; 0x09
    2156:	ff 23       	and	r31, r31
    2158:	59 f0       	breq	.+22     	; 0x2170 <_ZN8SdVolume15allocContiguousEmPm+0x1de>
    215a:	08 94       	sec

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    215c:	81 1c       	adc	r8, r1
    215e:	91 1c       	adc	r9, r1
    2160:	a1 1c       	adc	r10, r1
    2162:	b1 1c       	adc	r11, r1
    2164:	d1 01       	movw	r26, r2
    2166:	8d 92       	st	X+, r8
    2168:	9d 92       	st	X+, r9
    216a:	ad 92       	st	X+, r10
    216c:	bc 92       	st	X, r11
    216e:	13 97       	sbiw	r26, 0x03	; 3
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	2f 96       	adiw	r28, 0x0f	; 15
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62

  return true;
}
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	bf 90       	pop	r11
    2194:	af 90       	pop	r10
    2196:	9f 90       	pop	r9
    2198:	8f 90       	pop	r8
    219a:	7f 90       	pop	r7
    219c:	6f 90       	pop	r6
    219e:	5f 90       	pop	r5
    21a0:	4f 90       	pop	r4
    21a2:	3f 90       	pop	r3
    21a4:	2f 90       	pop	r2
    21a6:	08 95       	ret

000021a8 <_ZN11EEPROMClass4readEi>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21a8:	f9 99       	sbic	0x1f, 1	; 31
    21aa:	fe cf       	rjmp	.-4      	; 0x21a8 <_ZN11EEPROMClass4readEi>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    21ac:	72 bd       	out	0x22, r23	; 34
    21ae:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    21b0:	f8 9a       	sbi	0x1f, 0	; 31
    21b2:	80 b5       	in	r24, 0x20	; 32
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
    21b4:	08 95       	ret

000021b6 <_ZN11EEPROMClass5writeEih>:
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    21b6:	f9 99       	sbic	0x1f, 1	; 31
    21b8:	fe cf       	rjmp	.-4      	; 0x21b6 <_ZN11EEPROMClass5writeEih>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    21ba:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    21bc:	72 bd       	out	0x22, r23	; 34
    21be:	61 bd       	out	0x21, r22	; 33
#endif
    EEDR = __value;
    21c0:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	fa 9a       	sbi	0x1f, 2	; 31
    21c8:	f9 9a       	sbi	0x1f, 1	; 31
    21ca:	0f be       	out	0x3f, r0	; 63

void EEPROMClass::write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
}
    21cc:	08 95       	ret

000021ce <_GLOBAL__I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    21ce:	10 92 80 05 	sts	0x0580, r1
    21d2:	10 92 81 05 	sts	0x0581, r1
    21d6:	10 92 84 05 	sts	0x0584, r1
    21da:	10 92 86 05 	sts	0x0586, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e0       	ldi	r26, 0x00	; 0
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	80 93 87 05 	sts	0x0587, r24
    21ea:	90 93 88 05 	sts	0x0588, r25
    21ee:	a0 93 89 05 	sts	0x0589, r26
    21f2:	b0 93 8a 05 	sts	0x058A, r27
    21f6:	10 92 9e 05 	sts	0x059E, r1
  public:
    Print() : write_error(0) {}
    21fa:	10 92 a8 05 	sts	0x05A8, r1
    21fe:	10 92 a7 05 	sts	0x05A7, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2202:	89 e5       	ldi	r24, 0x59	; 89
    2204:	92 e0       	ldi	r25, 0x02	; 2
    2206:	90 93 a6 05 	sts	0x05A6, r25
    220a:	80 93 a5 05 	sts	0x05A5, r24
    220e:	10 92 aa 05 	sts	0x05AA, r1
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
    2212:	08 95       	ret

00002214 <_ZN8SPIClass11setBitOrderEh>:
  SPCR &= ~_BV(SPE);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    2214:	88 23       	and	r24, r24
    2216:	19 f4       	brne	.+6      	; 0x221e <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
    2218:	8c b5       	in	r24, 0x2c	; 44
    221a:	80 62       	ori	r24, 0x20	; 32
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
    221e:	8c b5       	in	r24, 0x2c	; 44
    2220:	8f 7d       	andi	r24, 0xDF	; 223
    2222:	8c bd       	out	0x2c, r24	; 44
    2224:	08 95       	ret

00002226 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    2226:	9c b5       	in	r25, 0x2c	; 44
    2228:	93 7f       	andi	r25, 0xF3	; 243
    222a:	98 2b       	or	r25, r24
    222c:	9c bd       	out	0x2c, r25	; 44
}
    222e:	08 95       	ret

00002230 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
    2230:	8a e0       	ldi	r24, 0x0A	; 10
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	64 d4       	rcall	.+2248   	; 0x2afe <digitalWrite>
    2236:	8a e0       	ldi	r24, 0x0A	; 10

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	22 d4       	rcall	.+2116   	; 0x2a80 <pinMode>
    223c:	8c b5       	in	r24, 0x2c	; 44
    223e:	80 61       	ori	r24, 0x10	; 16

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    2240:	8c bd       	out	0x2c, r24	; 44
    2242:	8c b5       	in	r24, 0x2c	; 44
    2244:	80 64       	ori	r24, 0x40	; 64
  SPCR |= _BV(SPE);
    2246:	8c bd       	out	0x2c, r24	; 44
    2248:	8d e0       	ldi	r24, 0x0D	; 13
    224a:	61 e0       	ldi	r22, 0x01	; 1
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
    224c:	19 d4       	rcall	.+2098   	; 0x2a80 <pinMode>
    224e:	8b e0       	ldi	r24, 0x0B	; 11
    2250:	61 e0       	ldi	r22, 0x01	; 1
    2252:	16 c4       	rjmp	.+2092   	; 0x2a80 <pinMode>

00002254 <_Z11serialEventv>:
    2254:	08 95       	ret

00002256 <__vector_18>:
    2256:	1f 92       	push	r1
    2258:	0f 92       	push	r0
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	0f 92       	push	r0
    225e:	11 24       	eor	r1, r1
    2260:	2f 93       	push	r18
    2262:	3f 93       	push	r19
    2264:	4f 93       	push	r20
    2266:	8f 93       	push	r24
    2268:	9f 93       	push	r25
    226a:	ef 93       	push	r30
    226c:	ff 93       	push	r31
    226e:	80 91 c0 00 	lds	r24, 0x00C0
    2272:	82 fd       	sbrc	r24, 2
    2274:	1d c0       	rjmp	.+58     	; 0x22b0 <__vector_18+0x5a>
    2276:	40 91 c6 00 	lds	r20, 0x00C6
    227a:	20 91 04 06 	lds	r18, 0x0604
    227e:	30 91 05 06 	lds	r19, 0x0605
    2282:	2f 5f       	subi	r18, 0xFF	; 255
    2284:	3f 4f       	sbci	r19, 0xFF	; 255
    2286:	2f 73       	andi	r18, 0x3F	; 63
    2288:	30 70       	andi	r19, 0x00	; 0
    228a:	80 91 06 06 	lds	r24, 0x0606
    228e:	90 91 07 06 	lds	r25, 0x0607
    2292:	28 17       	cp	r18, r24
    2294:	39 07       	cpc	r19, r25
    2296:	71 f0       	breq	.+28     	; 0x22b4 <__vector_18+0x5e>
    2298:	e0 91 04 06 	lds	r30, 0x0604
    229c:	f0 91 05 06 	lds	r31, 0x0605
    22a0:	ec 53       	subi	r30, 0x3C	; 60
    22a2:	fa 4f       	sbci	r31, 0xFA	; 250
    22a4:	40 83       	st	Z, r20
    22a6:	30 93 05 06 	sts	0x0605, r19
    22aa:	20 93 04 06 	sts	0x0604, r18
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <__vector_18+0x5e>
    22b0:	80 91 c6 00 	lds	r24, 0x00C6
    22b4:	ff 91       	pop	r31
    22b6:	ef 91       	pop	r30
    22b8:	9f 91       	pop	r25
    22ba:	8f 91       	pop	r24
    22bc:	4f 91       	pop	r20
    22be:	3f 91       	pop	r19
    22c0:	2f 91       	pop	r18
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	0f 90       	pop	r0
    22c8:	1f 90       	pop	r1
    22ca:	18 95       	reti

000022cc <_Z14serialEventRunv>:
    22cc:	e0 91 58 06 	lds	r30, 0x0658
    22d0:	f0 91 59 06 	lds	r31, 0x0659
    22d4:	e0 5c       	subi	r30, 0xC0	; 192
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	81 91       	ld	r24, Z+
    22da:	91 91       	ld	r25, Z+
    22dc:	20 81       	ld	r18, Z
    22de:	31 81       	ldd	r19, Z+1	; 0x01
    22e0:	82 1b       	sub	r24, r18
    22e2:	93 0b       	sbc	r25, r19
    22e4:	8f 73       	andi	r24, 0x3F	; 63
    22e6:	90 70       	andi	r25, 0x00	; 0
    22e8:	89 2b       	or	r24, r25
    22ea:	09 f0       	breq	.+2      	; 0x22ee <_Z14serialEventRunv+0x22>
    22ec:	b3 cf       	rjmp	.-154    	; 0x2254 <_Z11serialEventv>
    22ee:	08 95       	ret

000022f0 <__vector_19>:
    22f0:	1f 92       	push	r1
    22f2:	0f 92       	push	r0
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	8f 93       	push	r24
    2300:	9f 93       	push	r25
    2302:	ef 93       	push	r30
    2304:	ff 93       	push	r31
    2306:	20 91 48 06 	lds	r18, 0x0648
    230a:	30 91 49 06 	lds	r19, 0x0649
    230e:	80 91 4a 06 	lds	r24, 0x064A
    2312:	90 91 4b 06 	lds	r25, 0x064B
    2316:	28 17       	cp	r18, r24
    2318:	39 07       	cpc	r19, r25
    231a:	31 f4       	brne	.+12     	; 0x2328 <__vector_19+0x38>
    231c:	80 91 c1 00 	lds	r24, 0x00C1
    2320:	8f 7d       	andi	r24, 0xDF	; 223
    2322:	80 93 c1 00 	sts	0x00C1, r24
    2326:	14 c0       	rjmp	.+40     	; 0x2350 <__vector_19+0x60>
    2328:	e0 91 4a 06 	lds	r30, 0x064A
    232c:	f0 91 4b 06 	lds	r31, 0x064B
    2330:	e8 5f       	subi	r30, 0xF8	; 248
    2332:	f9 4f       	sbci	r31, 0xF9	; 249
    2334:	20 81       	ld	r18, Z
    2336:	80 91 4a 06 	lds	r24, 0x064A
    233a:	90 91 4b 06 	lds	r25, 0x064B
    233e:	01 96       	adiw	r24, 0x01	; 1
    2340:	8f 73       	andi	r24, 0x3F	; 63
    2342:	90 70       	andi	r25, 0x00	; 0
    2344:	90 93 4b 06 	sts	0x064B, r25
    2348:	80 93 4a 06 	sts	0x064A, r24
    234c:	20 93 c6 00 	sts	0x00C6, r18
    2350:	ff 91       	pop	r31
    2352:	ef 91       	pop	r30
    2354:	9f 91       	pop	r25
    2356:	8f 91       	pop	r24
    2358:	3f 91       	pop	r19
    235a:	2f 91       	pop	r18
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <_ZN14HardwareSerial5beginEmh>:
    2366:	af 92       	push	r10
    2368:	bf 92       	push	r11
    236a:	cf 92       	push	r12
    236c:	df 92       	push	r13
    236e:	ef 92       	push	r14
    2370:	ff 92       	push	r15
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	ec 01       	movw	r28, r24
    237c:	7a 01       	movw	r14, r20
    237e:	8b 01       	movw	r16, r22
    2380:	c2 2e       	mov	r12, r18
    2382:	dd 24       	eor	r13, r13
    2384:	40 30       	cpi	r20, 0x00	; 0
    2386:	81 ee       	ldi	r24, 0xE1	; 225
    2388:	58 07       	cpc	r21, r24
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	68 07       	cpc	r22, r24
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	78 07       	cpc	r23, r24
    2392:	11 f0       	breq	.+4      	; 0x2398 <_ZN14HardwareSerial5beginEmh+0x32>
    2394:	dd 24       	eor	r13, r13
    2396:	d3 94       	inc	r13
    2398:	71 e0       	ldi	r23, 0x01	; 1
    239a:	a7 2e       	mov	r10, r23
    239c:	b1 2c       	mov	r11, r1
    239e:	ec 89       	ldd	r30, Y+20	; 0x14
    23a0:	fd 89       	ldd	r31, Y+21	; 0x15
    23a2:	dd 20       	and	r13, r13
    23a4:	69 f0       	breq	.+26     	; 0x23c0 <_ZN14HardwareSerial5beginEmh+0x5a>
    23a6:	c5 01       	movw	r24, r10
    23a8:	08 a0       	ldd	r0, Y+32	; 0x20
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <_ZN14HardwareSerial5beginEmh+0x4a>
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	0a 94       	dec	r0
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <_ZN14HardwareSerial5beginEmh+0x46>
    23b4:	80 83       	st	Z, r24
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	79 e0       	ldi	r23, 0x09	; 9
    23ba:	8d e3       	ldi	r24, 0x3D	; 61
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <_ZN14HardwareSerial5beginEmh+0x64>
    23c0:	10 82       	st	Z, r1
    23c2:	60 e8       	ldi	r22, 0x80	; 128
    23c4:	74 e8       	ldi	r23, 0x84	; 132
    23c6:	8e e1       	ldi	r24, 0x1E	; 30
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	a8 01       	movw	r20, r16
    23cc:	97 01       	movw	r18, r14
    23ce:	84 d4       	rcall	.+2312   	; 0x2cd8 <__udivmodsi4>
    23d0:	21 50       	subi	r18, 0x01	; 1
    23d2:	30 40       	sbci	r19, 0x00	; 0
    23d4:	40 40       	sbci	r20, 0x00	; 0
    23d6:	50 40       	sbci	r21, 0x00	; 0
    23d8:	56 95       	lsr	r21
    23da:	47 95       	ror	r20
    23dc:	37 95       	ror	r19
    23de:	27 95       	ror	r18
    23e0:	80 e1       	ldi	r24, 0x10	; 16
    23e2:	20 30       	cpi	r18, 0x00	; 0
    23e4:	38 07       	cpc	r19, r24
    23e6:	20 f0       	brcs	.+8      	; 0x23f0 <_ZN14HardwareSerial5beginEmh+0x8a>
    23e8:	dd 20       	and	r13, r13
    23ea:	11 f0       	breq	.+4      	; 0x23f0 <_ZN14HardwareSerial5beginEmh+0x8a>
    23ec:	dd 24       	eor	r13, r13
    23ee:	d7 cf       	rjmp	.-82     	; 0x239e <_ZN14HardwareSerial5beginEmh+0x38>
    23f0:	e8 89       	ldd	r30, Y+16	; 0x10
    23f2:	f9 89       	ldd	r31, Y+17	; 0x11
    23f4:	30 83       	st	Z, r19
    23f6:	ea 89       	ldd	r30, Y+18	; 0x12
    23f8:	fb 89       	ldd	r31, Y+19	; 0x13
    23fa:	20 83       	st	Z, r18
    23fc:	e8 8d       	ldd	r30, Y+24	; 0x18
    23fe:	f9 8d       	ldd	r31, Y+25	; 0x19
    2400:	c0 82       	st	Z, r12
    2402:	ee 89       	ldd	r30, Y+22	; 0x16
    2404:	ff 89       	ldd	r31, Y+23	; 0x17
    2406:	40 81       	ld	r20, Z
    2408:	21 e0       	ldi	r18, 0x01	; 1
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	c9 01       	movw	r24, r18
    240e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <_ZN14HardwareSerial5beginEmh+0xb0>
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	0a 94       	dec	r0
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <_ZN14HardwareSerial5beginEmh+0xac>
    241a:	48 2b       	or	r20, r24
    241c:	40 83       	st	Z, r20
    241e:	ee 89       	ldd	r30, Y+22	; 0x16
    2420:	ff 89       	ldd	r31, Y+23	; 0x17
    2422:	40 81       	ld	r20, Z
    2424:	c9 01       	movw	r24, r18
    2426:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2428:	02 c0       	rjmp	.+4      	; 0x242e <_ZN14HardwareSerial5beginEmh+0xc8>
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <_ZN14HardwareSerial5beginEmh+0xc4>
    2432:	48 2b       	or	r20, r24
    2434:	40 83       	st	Z, r20
    2436:	ee 89       	ldd	r30, Y+22	; 0x16
    2438:	ff 89       	ldd	r31, Y+23	; 0x17
    243a:	40 81       	ld	r20, Z
    243c:	c9 01       	movw	r24, r18
    243e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <_ZN14HardwareSerial5beginEmh+0xe0>
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	0a 94       	dec	r0
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <_ZN14HardwareSerial5beginEmh+0xdc>
    244a:	48 2b       	or	r20, r24
    244c:	40 83       	st	Z, r20
    244e:	ee 89       	ldd	r30, Y+22	; 0x16
    2450:	ff 89       	ldd	r31, Y+23	; 0x17
    2452:	80 81       	ld	r24, Z
    2454:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2456:	02 c0       	rjmp	.+4      	; 0x245c <_ZN14HardwareSerial5beginEmh+0xf6>
    2458:	22 0f       	add	r18, r18
    245a:	33 1f       	adc	r19, r19
    245c:	0a 94       	dec	r0
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <_ZN14HardwareSerial5beginEmh+0xf2>
    2460:	20 95       	com	r18
    2462:	28 23       	and	r18, r24
    2464:	20 83       	st	Z, r18
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	ff 90       	pop	r15
    2470:	ef 90       	pop	r14
    2472:	df 90       	pop	r13
    2474:	cf 90       	pop	r12
    2476:	bf 90       	pop	r11
    2478:	af 90       	pop	r10
    247a:	08 95       	ret

0000247c <_ZN14HardwareSerial9availableEv>:
    247c:	dc 01       	movw	r26, r24
    247e:	1c 96       	adiw	r26, 0x0c	; 12
    2480:	ed 91       	ld	r30, X+
    2482:	fc 91       	ld	r31, X
    2484:	1d 97       	sbiw	r26, 0x0d	; 13
    2486:	e0 5c       	subi	r30, 0xC0	; 192
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	21 91       	ld	r18, Z+
    248c:	31 91       	ld	r19, Z+
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	28 1b       	sub	r18, r24
    2494:	39 0b       	sbc	r19, r25
    2496:	2f 73       	andi	r18, 0x3F	; 63
    2498:	30 70       	andi	r19, 0x00	; 0
    249a:	c9 01       	movw	r24, r18
    249c:	08 95       	ret

0000249e <_ZN14HardwareSerial4peekEv>:
    249e:	dc 01       	movw	r26, r24
    24a0:	1c 96       	adiw	r26, 0x0c	; 12
    24a2:	ed 91       	ld	r30, X+
    24a4:	fc 91       	ld	r31, X
    24a6:	1d 97       	sbiw	r26, 0x0d	; 13
    24a8:	e0 5c       	subi	r30, 0xC0	; 192
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	20 81       	ld	r18, Z
    24ae:	31 81       	ldd	r19, Z+1	; 0x01
    24b0:	e0 54       	subi	r30, 0x40	; 64
    24b2:	f0 40       	sbci	r31, 0x00	; 0
    24b4:	df 01       	movw	r26, r30
    24b6:	ae 5b       	subi	r26, 0xBE	; 190
    24b8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ba:	8d 91       	ld	r24, X+
    24bc:	9c 91       	ld	r25, X
    24be:	11 97       	sbiw	r26, 0x01	; 1
    24c0:	28 17       	cp	r18, r24
    24c2:	39 07       	cpc	r19, r25
    24c4:	19 f4       	brne	.+6      	; 0x24cc <_ZN14HardwareSerial4peekEv+0x2e>
    24c6:	2f ef       	ldi	r18, 0xFF	; 255
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <_ZN14HardwareSerial4peekEv+0x3c>
    24cc:	8d 91       	ld	r24, X+
    24ce:	9c 91       	ld	r25, X
    24d0:	e8 0f       	add	r30, r24
    24d2:	f9 1f       	adc	r31, r25
    24d4:	80 81       	ld	r24, Z
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	c9 01       	movw	r24, r18
    24dc:	08 95       	ret

000024de <_ZN14HardwareSerial4readEv>:
    24de:	dc 01       	movw	r26, r24
    24e0:	1c 96       	adiw	r26, 0x0c	; 12
    24e2:	ed 91       	ld	r30, X+
    24e4:	fc 91       	ld	r31, X
    24e6:	1d 97       	sbiw	r26, 0x0d	; 13
    24e8:	e0 5c       	subi	r30, 0xC0	; 192
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	20 81       	ld	r18, Z
    24ee:	31 81       	ldd	r19, Z+1	; 0x01
    24f0:	e0 54       	subi	r30, 0x40	; 64
    24f2:	f0 40       	sbci	r31, 0x00	; 0
    24f4:	df 01       	movw	r26, r30
    24f6:	ae 5b       	subi	r26, 0xBE	; 190
    24f8:	bf 4f       	sbci	r27, 0xFF	; 255
    24fa:	8d 91       	ld	r24, X+
    24fc:	9c 91       	ld	r25, X
    24fe:	11 97       	sbiw	r26, 0x01	; 1
    2500:	28 17       	cp	r18, r24
    2502:	39 07       	cpc	r19, r25
    2504:	19 f4       	brne	.+6      	; 0x250c <_ZN14HardwareSerial4readEv+0x2e>
    2506:	2f ef       	ldi	r18, 0xFF	; 255
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	10 c0       	rjmp	.+32     	; 0x252c <_ZN14HardwareSerial4readEv+0x4e>
    250c:	8d 91       	ld	r24, X+
    250e:	9c 91       	ld	r25, X
    2510:	11 97       	sbiw	r26, 0x01	; 1
    2512:	e8 0f       	add	r30, r24
    2514:	f9 1f       	adc	r31, r25
    2516:	20 81       	ld	r18, Z
    2518:	8d 91       	ld	r24, X+
    251a:	9c 91       	ld	r25, X
    251c:	11 97       	sbiw	r26, 0x01	; 1
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	8f 73       	andi	r24, 0x3F	; 63
    2522:	90 70       	andi	r25, 0x00	; 0
    2524:	11 96       	adiw	r26, 0x01	; 1
    2526:	9c 93       	st	X, r25
    2528:	8e 93       	st	-X, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	c9 01       	movw	r24, r18
    252e:	08 95       	ret

00002530 <_ZN14HardwareSerial5flushEv>:
    2530:	dc 01       	movw	r26, r24
    2532:	91 96       	adiw	r26, 0x21	; 33
    2534:	8c 91       	ld	r24, X
    2536:	91 97       	sbiw	r26, 0x21	; 33
    2538:	88 23       	and	r24, r24
    253a:	39 f0       	breq	.+14     	; 0x254a <_ZN14HardwareSerial5flushEv+0x1a>
    253c:	54 96       	adiw	r26, 0x14	; 20
    253e:	ed 91       	ld	r30, X+
    2540:	fc 91       	ld	r31, X
    2542:	55 97       	sbiw	r26, 0x15	; 21
    2544:	80 81       	ld	r24, Z
    2546:	86 ff       	sbrs	r24, 6
    2548:	f9 cf       	rjmp	.-14     	; 0x253c <_ZN14HardwareSerial5flushEv+0xc>
    254a:	91 96       	adiw	r26, 0x21	; 33
    254c:	1c 92       	st	X, r1
    254e:	08 95       	ret

00002550 <_ZN14HardwareSerial5writeEh>:
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	ec 01       	movw	r28, r24
    2556:	ee 85       	ldd	r30, Y+14	; 0x0e
    2558:	ff 85       	ldd	r31, Y+15	; 0x0f
    255a:	e0 5c       	subi	r30, 0xC0	; 192
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	20 81       	ld	r18, Z
    2560:	31 81       	ldd	r19, Z+1	; 0x01
    2562:	e0 54       	subi	r30, 0x40	; 64
    2564:	f0 40       	sbci	r31, 0x00	; 0
    2566:	2f 5f       	subi	r18, 0xFF	; 255
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	2f 73       	andi	r18, 0x3F	; 63
    256c:	30 70       	andi	r19, 0x00	; 0
    256e:	df 01       	movw	r26, r30
    2570:	ae 5b       	subi	r26, 0xBE	; 190
    2572:	bf 4f       	sbci	r27, 0xFF	; 255
    2574:	8d 91       	ld	r24, X+
    2576:	9c 91       	ld	r25, X
    2578:	11 97       	sbiw	r26, 0x01	; 1
    257a:	28 17       	cp	r18, r24
    257c:	39 07       	cpc	r19, r25
    257e:	d1 f3       	breq	.-12     	; 0x2574 <_ZN14HardwareSerial5writeEh+0x24>
    2580:	e0 5c       	subi	r30, 0xC0	; 192
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	e0 54       	subi	r30, 0x40	; 64
    258a:	f0 40       	sbci	r31, 0x00	; 0
    258c:	e8 0f       	add	r30, r24
    258e:	f9 1f       	adc	r31, r25
    2590:	60 83       	st	Z, r22
    2592:	ee 85       	ldd	r30, Y+14	; 0x0e
    2594:	ff 85       	ldd	r31, Y+15	; 0x0f
    2596:	e0 5c       	subi	r30, 0xC0	; 192
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	31 83       	std	Z+1, r19	; 0x01
    259c:	20 83       	st	Z, r18
    259e:	ee 89       	ldd	r30, Y+22	; 0x16
    25a0:	ff 89       	ldd	r31, Y+23	; 0x17
    25a2:	20 81       	ld	r18, Z
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0f 8c       	ldd	r0, Y+31	; 0x1f
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <_ZN14HardwareSerial5writeEh+0x60>
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	0a 94       	dec	r0
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <_ZN14HardwareSerial5writeEh+0x5c>
    25b4:	28 2b       	or	r18, r24
    25b6:	20 83       	st	Z, r18
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	89 a3       	std	Y+33, r24	; 0x21
    25bc:	ec 89       	ldd	r30, Y+20	; 0x14
    25be:	fd 89       	ldd	r31, Y+21	; 0x15
    25c0:	80 81       	ld	r24, Z
    25c2:	80 64       	ori	r24, 0x40	; 64
    25c4:	80 83       	st	Z, r24
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	08 95       	ret

000025d0 <_ZN14HardwareSerialcvbEv>:
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	08 95       	ret

000025d4 <_GLOBAL__I_rx_buffer>:
    25d4:	10 92 4f 06 	sts	0x064F, r1
    25d8:	10 92 4e 06 	sts	0x064E, r1
    25dc:	88 ee       	ldi	r24, 0xE8	; 232
    25de:	93 e0       	ldi	r25, 0x03	; 3
    25e0:	a0 e0       	ldi	r26, 0x00	; 0
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	80 93 50 06 	sts	0x0650, r24
    25e8:	90 93 51 06 	sts	0x0651, r25
    25ec:	a0 93 52 06 	sts	0x0652, r26
    25f0:	b0 93 53 06 	sts	0x0653, r27
    25f4:	81 e6       	ldi	r24, 0x61	; 97
    25f6:	92 e0       	ldi	r25, 0x02	; 2
    25f8:	90 93 4d 06 	sts	0x064D, r25
    25fc:	80 93 4c 06 	sts	0x064C, r24
    2600:	84 ec       	ldi	r24, 0xC4	; 196
    2602:	95 e0       	ldi	r25, 0x05	; 5
    2604:	90 93 59 06 	sts	0x0659, r25
    2608:	80 93 58 06 	sts	0x0658, r24
    260c:	88 e0       	ldi	r24, 0x08	; 8
    260e:	96 e0       	ldi	r25, 0x06	; 6
    2610:	90 93 5b 06 	sts	0x065B, r25
    2614:	80 93 5a 06 	sts	0x065A, r24
    2618:	85 ec       	ldi	r24, 0xC5	; 197
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	90 93 5d 06 	sts	0x065D, r25
    2620:	80 93 5c 06 	sts	0x065C, r24
    2624:	84 ec       	ldi	r24, 0xC4	; 196
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	90 93 5f 06 	sts	0x065F, r25
    262c:	80 93 5e 06 	sts	0x065E, r24
    2630:	80 ec       	ldi	r24, 0xC0	; 192
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	90 93 61 06 	sts	0x0661, r25
    2638:	80 93 60 06 	sts	0x0660, r24
    263c:	81 ec       	ldi	r24, 0xC1	; 193
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	90 93 63 06 	sts	0x0663, r25
    2644:	80 93 62 06 	sts	0x0662, r24
    2648:	82 ec       	ldi	r24, 0xC2	; 194
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	90 93 65 06 	sts	0x0665, r25
    2650:	80 93 64 06 	sts	0x0664, r24
    2654:	86 ec       	ldi	r24, 0xC6	; 198
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	90 93 67 06 	sts	0x0667, r25
    265c:	80 93 66 06 	sts	0x0666, r24
    2660:	84 e0       	ldi	r24, 0x04	; 4
    2662:	80 93 68 06 	sts	0x0668, r24
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	80 93 69 06 	sts	0x0669, r24
    266c:	87 e0       	ldi	r24, 0x07	; 7
    266e:	80 93 6a 06 	sts	0x066A, r24
    2672:	85 e0       	ldi	r24, 0x05	; 5
    2674:	80 93 6b 06 	sts	0x066B, r24
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 6c 06 	sts	0x066C, r24
    267e:	08 95       	ret

00002680 <_ZN5Print5writeEPKhj>:
    2680:	cf 92       	push	r12
    2682:	df 92       	push	r13
    2684:	ef 92       	push	r14
    2686:	ff 92       	push	r15
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	7c 01       	movw	r14, r24
    2692:	6b 01       	movw	r12, r22
    2694:	8a 01       	movw	r16, r20
    2696:	c0 e0       	ldi	r28, 0x00	; 0
    2698:	d0 e0       	ldi	r29, 0x00	; 0
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <_ZN5Print5writeEPKhj+0x3a>
    269c:	d6 01       	movw	r26, r12
    269e:	6d 91       	ld	r22, X+
    26a0:	6d 01       	movw	r12, r26
    26a2:	d7 01       	movw	r26, r14
    26a4:	ed 91       	ld	r30, X+
    26a6:	fc 91       	ld	r31, X
    26a8:	01 90       	ld	r0, Z+
    26aa:	f0 81       	ld	r31, Z
    26ac:	e0 2d       	mov	r30, r0
    26ae:	c7 01       	movw	r24, r14
    26b0:	09 95       	icall
    26b2:	c8 0f       	add	r28, r24
    26b4:	d9 1f       	adc	r29, r25
    26b6:	01 50       	subi	r16, 0x01	; 1
    26b8:	10 40       	sbci	r17, 0x00	; 0
    26ba:	01 15       	cp	r16, r1
    26bc:	11 05       	cpc	r17, r1
    26be:	71 f7       	brne	.-36     	; 0x269c <_ZN5Print5writeEPKhj+0x1c>
    26c0:	ce 01       	movw	r24, r28
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	1f 91       	pop	r17
    26c8:	0f 91       	pop	r16
    26ca:	ff 90       	pop	r15
    26cc:	ef 90       	pop	r14
    26ce:	df 90       	pop	r13
    26d0:	cf 90       	pop	r12
    26d2:	08 95       	ret

000026d4 <_ZN5Print7printlnEv>:
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	8c 01       	movw	r16, r24
    26de:	dc 01       	movw	r26, r24
    26e0:	ed 91       	ld	r30, X+
    26e2:	fc 91       	ld	r31, X
    26e4:	01 90       	ld	r0, Z+
    26e6:	f0 81       	ld	r31, Z
    26e8:	e0 2d       	mov	r30, r0
    26ea:	6d e0       	ldi	r22, 0x0D	; 13
    26ec:	09 95       	icall
    26ee:	7c 01       	movw	r14, r24
    26f0:	d8 01       	movw	r26, r16
    26f2:	ed 91       	ld	r30, X+
    26f4:	fc 91       	ld	r31, X
    26f6:	01 90       	ld	r0, Z+
    26f8:	f0 81       	ld	r31, Z
    26fa:	e0 2d       	mov	r30, r0
    26fc:	c8 01       	movw	r24, r16
    26fe:	6a e0       	ldi	r22, 0x0A	; 10
    2700:	09 95       	icall
    2702:	9c 01       	movw	r18, r24
    2704:	2e 0d       	add	r18, r14
    2706:	3f 1d       	adc	r19, r15
    2708:	c9 01       	movw	r24, r18
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	08 95       	ret

00002714 <_ZN5Print5writeEPKc>:
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	ec 01       	movw	r28, r24
    271a:	61 15       	cp	r22, r1
    271c:	71 05       	cpc	r23, r1
    271e:	19 f4       	brne	.+6      	; 0x2726 <_ZN5Print5writeEPKc+0x12>
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	0f c0       	rjmp	.+30     	; 0x2744 <_ZN5Print5writeEPKc+0x30>
    2726:	db 01       	movw	r26, r22
    2728:	0d 90       	ld	r0, X+
    272a:	00 20       	and	r0, r0
    272c:	e9 f7       	brne	.-6      	; 0x2728 <_ZN5Print5writeEPKc+0x14>
    272e:	11 97       	sbiw	r26, 0x01	; 1
    2730:	a6 1b       	sub	r26, r22
    2732:	b7 0b       	sbc	r27, r23
    2734:	e8 81       	ld	r30, Y
    2736:	f9 81       	ldd	r31, Y+1	; 0x01
    2738:	02 80       	ldd	r0, Z+2	; 0x02
    273a:	f3 81       	ldd	r31, Z+3	; 0x03
    273c:	e0 2d       	mov	r30, r0
    273e:	ad 01       	movw	r20, r26
    2740:	09 95       	icall
    2742:	9c 01       	movw	r18, r24
    2744:	c9 01       	movw	r24, r18
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	08 95       	ret

0000274c <_ZN5Print5printEPKc>:
    274c:	e3 cf       	rjmp	.-58     	; 0x2714 <_ZN5Print5writeEPKc>
    274e:	08 95       	ret

00002750 <_ZN5Print7printlnEPKc>:
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	7c 01       	movw	r14, r24
    275a:	dc df       	rcall	.-72     	; 0x2714 <_ZN5Print5writeEPKc>
    275c:	8c 01       	movw	r16, r24
    275e:	c7 01       	movw	r24, r14
    2760:	b9 df       	rcall	.-142    	; 0x26d4 <_ZN5Print7printlnEv>
    2762:	08 0f       	add	r16, r24
    2764:	19 1f       	adc	r17, r25
    2766:	c8 01       	movw	r24, r16
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	08 95       	ret

00002772 <attachInterrupt>:
    2772:	82 30       	cpi	r24, 0x02	; 2
    2774:	00 f5       	brcc	.+64     	; 0x27b6 <attachInterrupt+0x44>
    2776:	e8 2f       	mov	r30, r24
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	e2 59       	subi	r30, 0x92	; 146
    2780:	f9 4f       	sbci	r31, 0xF9	; 249
    2782:	71 83       	std	Z+1, r23	; 0x01
    2784:	60 83       	st	Z, r22
    2786:	88 23       	and	r24, r24
    2788:	19 f0       	breq	.+6      	; 0x2790 <attachInterrupt+0x1e>
    278a:	81 30       	cpi	r24, 0x01	; 1
    278c:	a1 f4       	brne	.+40     	; 0x27b6 <attachInterrupt+0x44>
    278e:	08 c0       	rjmp	.+16     	; 0x27a0 <attachInterrupt+0x2e>
    2790:	80 91 69 00 	lds	r24, 0x0069
    2794:	8c 7f       	andi	r24, 0xFC	; 252
    2796:	84 2b       	or	r24, r20
    2798:	80 93 69 00 	sts	0x0069, r24
    279c:	e8 9a       	sbi	0x1d, 0	; 29
    279e:	08 95       	ret
    27a0:	80 91 69 00 	lds	r24, 0x0069
    27a4:	44 0f       	add	r20, r20
    27a6:	55 1f       	adc	r21, r21
    27a8:	44 0f       	add	r20, r20
    27aa:	55 1f       	adc	r21, r21
    27ac:	83 7f       	andi	r24, 0xF3	; 243
    27ae:	84 2b       	or	r24, r20
    27b0:	80 93 69 00 	sts	0x0069, r24
    27b4:	e9 9a       	sbi	0x1d, 1	; 29
    27b6:	08 95       	ret

000027b8 <detachInterrupt>:
    27b8:	82 30       	cpi	r24, 0x02	; 2
    27ba:	80 f4       	brcc	.+32     	; 0x27dc <detachInterrupt+0x24>
    27bc:	88 23       	and	r24, r24
    27be:	19 f0       	breq	.+6      	; 0x27c6 <detachInterrupt+0xe>
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	21 f4       	brne	.+8      	; 0x27cc <detachInterrupt+0x14>
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <detachInterrupt+0x12>
    27c6:	e8 98       	cbi	0x1d, 0	; 29
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <detachInterrupt+0x14>
    27ca:	e9 98       	cbi	0x1d, 1	; 29
    27cc:	e8 2f       	mov	r30, r24
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	ee 0f       	add	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	e2 59       	subi	r30, 0x92	; 146
    27d6:	f9 4f       	sbci	r31, 0xF9	; 249
    27d8:	11 82       	std	Z+1, r1	; 0x01
    27da:	10 82       	st	Z, r1
    27dc:	08 95       	ret

000027de <__vector_1>:
    27de:	1f 92       	push	r1
    27e0:	0f 92       	push	r0
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	0f 92       	push	r0
    27e6:	11 24       	eor	r1, r1
    27e8:	2f 93       	push	r18
    27ea:	3f 93       	push	r19
    27ec:	4f 93       	push	r20
    27ee:	5f 93       	push	r21
    27f0:	6f 93       	push	r22
    27f2:	7f 93       	push	r23
    27f4:	8f 93       	push	r24
    27f6:	9f 93       	push	r25
    27f8:	af 93       	push	r26
    27fa:	bf 93       	push	r27
    27fc:	ef 93       	push	r30
    27fe:	ff 93       	push	r31
    2800:	80 91 6e 06 	lds	r24, 0x066E
    2804:	90 91 6f 06 	lds	r25, 0x066F
    2808:	89 2b       	or	r24, r25
    280a:	29 f0       	breq	.+10     	; 0x2816 <__vector_1+0x38>
    280c:	e0 91 6e 06 	lds	r30, 0x066E
    2810:	f0 91 6f 06 	lds	r31, 0x066F
    2814:	09 95       	icall
    2816:	ff 91       	pop	r31
    2818:	ef 91       	pop	r30
    281a:	bf 91       	pop	r27
    281c:	af 91       	pop	r26
    281e:	9f 91       	pop	r25
    2820:	8f 91       	pop	r24
    2822:	7f 91       	pop	r23
    2824:	6f 91       	pop	r22
    2826:	5f 91       	pop	r21
    2828:	4f 91       	pop	r20
    282a:	3f 91       	pop	r19
    282c:	2f 91       	pop	r18
    282e:	0f 90       	pop	r0
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	0f 90       	pop	r0
    2834:	1f 90       	pop	r1
    2836:	18 95       	reti

00002838 <__vector_2>:
    2838:	1f 92       	push	r1
    283a:	0f 92       	push	r0
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	0f 92       	push	r0
    2840:	11 24       	eor	r1, r1
    2842:	2f 93       	push	r18
    2844:	3f 93       	push	r19
    2846:	4f 93       	push	r20
    2848:	5f 93       	push	r21
    284a:	6f 93       	push	r22
    284c:	7f 93       	push	r23
    284e:	8f 93       	push	r24
    2850:	9f 93       	push	r25
    2852:	af 93       	push	r26
    2854:	bf 93       	push	r27
    2856:	ef 93       	push	r30
    2858:	ff 93       	push	r31
    285a:	80 91 70 06 	lds	r24, 0x0670
    285e:	90 91 71 06 	lds	r25, 0x0671
    2862:	89 2b       	or	r24, r25
    2864:	29 f0       	breq	.+10     	; 0x2870 <__vector_2+0x38>
    2866:	e0 91 70 06 	lds	r30, 0x0670
    286a:	f0 91 71 06 	lds	r31, 0x0671
    286e:	09 95       	icall
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	bf 91       	pop	r27
    2876:	af 91       	pop	r26
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	7f 91       	pop	r23
    287e:	6f 91       	pop	r22
    2880:	5f 91       	pop	r21
    2882:	4f 91       	pop	r20
    2884:	3f 91       	pop	r19
    2886:	2f 91       	pop	r18
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	0f 90       	pop	r0
    288e:	1f 90       	pop	r1
    2890:	18 95       	reti

00002892 <main>:
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	b9 d0       	rcall	.+370    	; 0x2a0a <init>
    2898:	0e 94 1f 07 	call	0xe3e	; 0xe3e <setup>
    289c:	c6 e6       	ldi	r28, 0x66	; 102
    289e:	d1 e1       	ldi	r29, 0x11	; 17
    28a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <loop>
    28a4:	20 97       	sbiw	r28, 0x00	; 0
    28a6:	e1 f3       	breq	.-8      	; 0x28a0 <main+0xe>
    28a8:	11 dd       	rcall	.-1502   	; 0x22cc <_Z14serialEventRunv>
    28aa:	fa cf       	rjmp	.-12     	; 0x28a0 <main+0xe>

000028ac <__vector_16>:
    28ac:	1f 92       	push	r1
    28ae:	0f 92       	push	r0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	0f 92       	push	r0
    28b4:	11 24       	eor	r1, r1
    28b6:	2f 93       	push	r18
    28b8:	3f 93       	push	r19
    28ba:	8f 93       	push	r24
    28bc:	9f 93       	push	r25
    28be:	af 93       	push	r26
    28c0:	bf 93       	push	r27
    28c2:	80 91 76 06 	lds	r24, 0x0676
    28c6:	90 91 77 06 	lds	r25, 0x0677
    28ca:	a0 91 78 06 	lds	r26, 0x0678
    28ce:	b0 91 79 06 	lds	r27, 0x0679
    28d2:	30 91 7a 06 	lds	r19, 0x067A
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	a1 1d       	adc	r26, r1
    28da:	b1 1d       	adc	r27, r1
    28dc:	23 2f       	mov	r18, r19
    28de:	2d 5f       	subi	r18, 0xFD	; 253
    28e0:	2d 37       	cpi	r18, 0x7D	; 125
    28e2:	20 f0       	brcs	.+8      	; 0x28ec <__vector_16+0x40>
    28e4:	2d 57       	subi	r18, 0x7D	; 125
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	a1 1d       	adc	r26, r1
    28ea:	b1 1d       	adc	r27, r1
    28ec:	20 93 7a 06 	sts	0x067A, r18
    28f0:	80 93 76 06 	sts	0x0676, r24
    28f4:	90 93 77 06 	sts	0x0677, r25
    28f8:	a0 93 78 06 	sts	0x0678, r26
    28fc:	b0 93 79 06 	sts	0x0679, r27
    2900:	80 91 72 06 	lds	r24, 0x0672
    2904:	90 91 73 06 	lds	r25, 0x0673
    2908:	a0 91 74 06 	lds	r26, 0x0674
    290c:	b0 91 75 06 	lds	r27, 0x0675
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	a1 1d       	adc	r26, r1
    2914:	b1 1d       	adc	r27, r1
    2916:	80 93 72 06 	sts	0x0672, r24
    291a:	90 93 73 06 	sts	0x0673, r25
    291e:	a0 93 74 06 	sts	0x0674, r26
    2922:	b0 93 75 06 	sts	0x0675, r27
    2926:	bf 91       	pop	r27
    2928:	af 91       	pop	r26
    292a:	9f 91       	pop	r25
    292c:	8f 91       	pop	r24
    292e:	3f 91       	pop	r19
    2930:	2f 91       	pop	r18
    2932:	0f 90       	pop	r0
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	0f 90       	pop	r0
    2938:	1f 90       	pop	r1
    293a:	18 95       	reti

0000293c <millis>:
    293c:	8f b7       	in	r24, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	20 91 76 06 	lds	r18, 0x0676
    2944:	30 91 77 06 	lds	r19, 0x0677
    2948:	40 91 78 06 	lds	r20, 0x0678
    294c:	50 91 79 06 	lds	r21, 0x0679
    2950:	8f bf       	out	0x3f, r24	; 63
    2952:	b9 01       	movw	r22, r18
    2954:	ca 01       	movw	r24, r20
    2956:	08 95       	ret

00002958 <delay>:
    2958:	9b 01       	movw	r18, r22
    295a:	ac 01       	movw	r20, r24
    295c:	7f b7       	in	r23, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	80 91 72 06 	lds	r24, 0x0672
    2964:	90 91 73 06 	lds	r25, 0x0673
    2968:	a0 91 74 06 	lds	r26, 0x0674
    296c:	b0 91 75 06 	lds	r27, 0x0675
    2970:	66 b5       	in	r22, 0x26	; 38
    2972:	a8 9b       	sbis	0x15, 0	; 21
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <delay+0x28>
    2976:	6f 3f       	cpi	r22, 0xFF	; 255
    2978:	19 f0       	breq	.+6      	; 0x2980 <delay+0x28>
    297a:	01 96       	adiw	r24, 0x01	; 1
    297c:	a1 1d       	adc	r26, r1
    297e:	b1 1d       	adc	r27, r1
    2980:	7f bf       	out	0x3f, r23	; 63
    2982:	ba 2f       	mov	r27, r26
    2984:	a9 2f       	mov	r26, r25
    2986:	98 2f       	mov	r25, r24
    2988:	88 27       	eor	r24, r24
    298a:	86 0f       	add	r24, r22
    298c:	91 1d       	adc	r25, r1
    298e:	a1 1d       	adc	r26, r1
    2990:	b1 1d       	adc	r27, r1
    2992:	62 e0       	ldi	r22, 0x02	; 2
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	aa 1f       	adc	r26, r26
    299a:	bb 1f       	adc	r27, r27
    299c:	6a 95       	dec	r22
    299e:	d1 f7       	brne	.-12     	; 0x2994 <delay+0x3c>
    29a0:	bc 01       	movw	r22, r24
    29a2:	2d c0       	rjmp	.+90     	; 0x29fe <delay+0xa6>
    29a4:	ff b7       	in	r31, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	80 91 72 06 	lds	r24, 0x0672
    29ac:	90 91 73 06 	lds	r25, 0x0673
    29b0:	a0 91 74 06 	lds	r26, 0x0674
    29b4:	b0 91 75 06 	lds	r27, 0x0675
    29b8:	e6 b5       	in	r30, 0x26	; 38
    29ba:	a8 9b       	sbis	0x15, 0	; 21
    29bc:	05 c0       	rjmp	.+10     	; 0x29c8 <delay+0x70>
    29be:	ef 3f       	cpi	r30, 0xFF	; 255
    29c0:	19 f0       	breq	.+6      	; 0x29c8 <delay+0x70>
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	a1 1d       	adc	r26, r1
    29c6:	b1 1d       	adc	r27, r1
    29c8:	ff bf       	out	0x3f, r31	; 63
    29ca:	ba 2f       	mov	r27, r26
    29cc:	a9 2f       	mov	r26, r25
    29ce:	98 2f       	mov	r25, r24
    29d0:	88 27       	eor	r24, r24
    29d2:	8e 0f       	add	r24, r30
    29d4:	91 1d       	adc	r25, r1
    29d6:	a1 1d       	adc	r26, r1
    29d8:	b1 1d       	adc	r27, r1
    29da:	e2 e0       	ldi	r30, 0x02	; 2
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	aa 1f       	adc	r26, r26
    29e2:	bb 1f       	adc	r27, r27
    29e4:	ea 95       	dec	r30
    29e6:	d1 f7       	brne	.-12     	; 0x29dc <delay+0x84>
    29e8:	86 1b       	sub	r24, r22
    29ea:	97 0b       	sbc	r25, r23
    29ec:	88 5e       	subi	r24, 0xE8	; 232
    29ee:	93 40       	sbci	r25, 0x03	; 3
    29f0:	c8 f2       	brcs	.-78     	; 0x29a4 <delay+0x4c>
    29f2:	21 50       	subi	r18, 0x01	; 1
    29f4:	30 40       	sbci	r19, 0x00	; 0
    29f6:	40 40       	sbci	r20, 0x00	; 0
    29f8:	50 40       	sbci	r21, 0x00	; 0
    29fa:	68 51       	subi	r22, 0x18	; 24
    29fc:	7c 4f       	sbci	r23, 0xFC	; 252
    29fe:	21 15       	cp	r18, r1
    2a00:	31 05       	cpc	r19, r1
    2a02:	41 05       	cpc	r20, r1
    2a04:	51 05       	cpc	r21, r1
    2a06:	71 f6       	brne	.-100    	; 0x29a4 <delay+0x4c>
    2a08:	08 95       	ret

00002a0a <init>:
    2a0a:	78 94       	sei
    2a0c:	84 b5       	in	r24, 0x24	; 36
    2a0e:	82 60       	ori	r24, 0x02	; 2
    2a10:	84 bd       	out	0x24, r24	; 36
    2a12:	84 b5       	in	r24, 0x24	; 36
    2a14:	81 60       	ori	r24, 0x01	; 1
    2a16:	84 bd       	out	0x24, r24	; 36
    2a18:	85 b5       	in	r24, 0x25	; 37
    2a1a:	82 60       	ori	r24, 0x02	; 2
    2a1c:	85 bd       	out	0x25, r24	; 37
    2a1e:	85 b5       	in	r24, 0x25	; 37
    2a20:	81 60       	ori	r24, 0x01	; 1
    2a22:	85 bd       	out	0x25, r24	; 37
    2a24:	ee e6       	ldi	r30, 0x6E	; 110
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	81 60       	ori	r24, 0x01	; 1
    2a2c:	80 83       	st	Z, r24
    2a2e:	e1 e8       	ldi	r30, 0x81	; 129
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	10 82       	st	Z, r1
    2a34:	80 81       	ld	r24, Z
    2a36:	82 60       	ori	r24, 0x02	; 2
    2a38:	80 83       	st	Z, r24
    2a3a:	80 81       	ld	r24, Z
    2a3c:	81 60       	ori	r24, 0x01	; 1
    2a3e:	80 83       	st	Z, r24
    2a40:	e0 e8       	ldi	r30, 0x80	; 128
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	81 60       	ori	r24, 0x01	; 1
    2a48:	80 83       	st	Z, r24
    2a4a:	e1 eb       	ldi	r30, 0xB1	; 177
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	84 60       	ori	r24, 0x04	; 4
    2a52:	80 83       	st	Z, r24
    2a54:	e0 eb       	ldi	r30, 0xB0	; 176
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	81 60       	ori	r24, 0x01	; 1
    2a5c:	80 83       	st	Z, r24
    2a5e:	ea e7       	ldi	r30, 0x7A	; 122
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	84 60       	ori	r24, 0x04	; 4
    2a66:	80 83       	st	Z, r24
    2a68:	80 81       	ld	r24, Z
    2a6a:	82 60       	ori	r24, 0x02	; 2
    2a6c:	80 83       	st	Z, r24
    2a6e:	80 81       	ld	r24, Z
    2a70:	81 60       	ori	r24, 0x01	; 1
    2a72:	80 83       	st	Z, r24
    2a74:	80 81       	ld	r24, Z
    2a76:	80 68       	ori	r24, 0x80	; 128
    2a78:	80 83       	st	Z, r24
    2a7a:	10 92 c1 00 	sts	0x00C1, r1
    2a7e:	08 95       	ret

00002a80 <pinMode>:
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	48 2f       	mov	r20, r24
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	ca 01       	movw	r24, r20
    2a8a:	86 56       	subi	r24, 0x66	; 102
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	fc 01       	movw	r30, r24
    2a90:	34 91       	lpm	r19, Z+
    2a92:	4a 57       	subi	r20, 0x7A	; 122
    2a94:	5f 4f       	sbci	r21, 0xFF	; 255
    2a96:	fa 01       	movw	r30, r20
    2a98:	84 91       	lpm	r24, Z+
    2a9a:	88 23       	and	r24, r24
    2a9c:	69 f1       	breq	.+90     	; 0x2af8 <pinMode+0x78>
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	88 0f       	add	r24, r24
    2aa2:	99 1f       	adc	r25, r25
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e8 59       	subi	r30, 0x98	; 152
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	a5 91       	lpm	r26, Z+
    2aac:	b4 91       	lpm	r27, Z+
    2aae:	fc 01       	movw	r30, r24
    2ab0:	ee 58       	subi	r30, 0x8E	; 142
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	c5 91       	lpm	r28, Z+
    2ab6:	d4 91       	lpm	r29, Z+
    2ab8:	66 23       	and	r22, r22
    2aba:	51 f4       	brne	.+20     	; 0x2ad0 <pinMode+0x50>
    2abc:	2f b7       	in	r18, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	8c 91       	ld	r24, X
    2ac2:	93 2f       	mov	r25, r19
    2ac4:	90 95       	com	r25
    2ac6:	89 23       	and	r24, r25
    2ac8:	8c 93       	st	X, r24
    2aca:	88 81       	ld	r24, Y
    2acc:	89 23       	and	r24, r25
    2ace:	0b c0       	rjmp	.+22     	; 0x2ae6 <pinMode+0x66>
    2ad0:	62 30       	cpi	r22, 0x02	; 2
    2ad2:	61 f4       	brne	.+24     	; 0x2aec <pinMode+0x6c>
    2ad4:	2f b7       	in	r18, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	8c 91       	ld	r24, X
    2ada:	93 2f       	mov	r25, r19
    2adc:	90 95       	com	r25
    2ade:	89 23       	and	r24, r25
    2ae0:	8c 93       	st	X, r24
    2ae2:	88 81       	ld	r24, Y
    2ae4:	83 2b       	or	r24, r19
    2ae6:	88 83       	st	Y, r24
    2ae8:	2f bf       	out	0x3f, r18	; 63
    2aea:	06 c0       	rjmp	.+12     	; 0x2af8 <pinMode+0x78>
    2aec:	9f b7       	in	r25, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	8c 91       	ld	r24, X
    2af2:	83 2b       	or	r24, r19
    2af4:	8c 93       	st	X, r24
    2af6:	9f bf       	out	0x3f, r25	; 63
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <digitalWrite>:
    2afe:	48 2f       	mov	r20, r24
    2b00:	50 e0       	ldi	r21, 0x00	; 0
    2b02:	ca 01       	movw	r24, r20
    2b04:	82 55       	subi	r24, 0x52	; 82
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	fc 01       	movw	r30, r24
    2b0a:	24 91       	lpm	r18, Z+
    2b0c:	ca 01       	movw	r24, r20
    2b0e:	86 56       	subi	r24, 0x66	; 102
    2b10:	9f 4f       	sbci	r25, 0xFF	; 255
    2b12:	fc 01       	movw	r30, r24
    2b14:	94 91       	lpm	r25, Z+
    2b16:	4a 57       	subi	r20, 0x7A	; 122
    2b18:	5f 4f       	sbci	r21, 0xFF	; 255
    2b1a:	fa 01       	movw	r30, r20
    2b1c:	34 91       	lpm	r19, Z+
    2b1e:	33 23       	and	r19, r19
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <digitalWrite+0x26>
    2b22:	40 c0       	rjmp	.+128    	; 0x2ba4 <digitalWrite+0xa6>
    2b24:	22 23       	and	r18, r18
    2b26:	51 f1       	breq	.+84     	; 0x2b7c <digitalWrite+0x7e>
    2b28:	23 30       	cpi	r18, 0x03	; 3
    2b2a:	71 f0       	breq	.+28     	; 0x2b48 <digitalWrite+0x4a>
    2b2c:	24 30       	cpi	r18, 0x04	; 4
    2b2e:	28 f4       	brcc	.+10     	; 0x2b3a <digitalWrite+0x3c>
    2b30:	21 30       	cpi	r18, 0x01	; 1
    2b32:	a1 f0       	breq	.+40     	; 0x2b5c <digitalWrite+0x5e>
    2b34:	22 30       	cpi	r18, 0x02	; 2
    2b36:	11 f5       	brne	.+68     	; 0x2b7c <digitalWrite+0x7e>
    2b38:	14 c0       	rjmp	.+40     	; 0x2b62 <digitalWrite+0x64>
    2b3a:	26 30       	cpi	r18, 0x06	; 6
    2b3c:	b1 f0       	breq	.+44     	; 0x2b6a <digitalWrite+0x6c>
    2b3e:	27 30       	cpi	r18, 0x07	; 7
    2b40:	c1 f0       	breq	.+48     	; 0x2b72 <digitalWrite+0x74>
    2b42:	24 30       	cpi	r18, 0x04	; 4
    2b44:	d9 f4       	brne	.+54     	; 0x2b7c <digitalWrite+0x7e>
    2b46:	04 c0       	rjmp	.+8      	; 0x2b50 <digitalWrite+0x52>
    2b48:	80 91 80 00 	lds	r24, 0x0080
    2b4c:	8f 77       	andi	r24, 0x7F	; 127
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <digitalWrite+0x58>
    2b50:	80 91 80 00 	lds	r24, 0x0080
    2b54:	8f 7d       	andi	r24, 0xDF	; 223
    2b56:	80 93 80 00 	sts	0x0080, r24
    2b5a:	10 c0       	rjmp	.+32     	; 0x2b7c <digitalWrite+0x7e>
    2b5c:	84 b5       	in	r24, 0x24	; 36
    2b5e:	8f 77       	andi	r24, 0x7F	; 127
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <digitalWrite+0x68>
    2b62:	84 b5       	in	r24, 0x24	; 36
    2b64:	8f 7d       	andi	r24, 0xDF	; 223
    2b66:	84 bd       	out	0x24, r24	; 36
    2b68:	09 c0       	rjmp	.+18     	; 0x2b7c <digitalWrite+0x7e>
    2b6a:	80 91 b0 00 	lds	r24, 0x00B0
    2b6e:	8f 77       	andi	r24, 0x7F	; 127
    2b70:	03 c0       	rjmp	.+6      	; 0x2b78 <digitalWrite+0x7a>
    2b72:	80 91 b0 00 	lds	r24, 0x00B0
    2b76:	8f 7d       	andi	r24, 0xDF	; 223
    2b78:	80 93 b0 00 	sts	0x00B0, r24
    2b7c:	e3 2f       	mov	r30, r19
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	ee 0f       	add	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	ee 58       	subi	r30, 0x8E	; 142
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	a5 91       	lpm	r26, Z+
    2b8a:	b4 91       	lpm	r27, Z+
    2b8c:	2f b7       	in	r18, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	66 23       	and	r22, r22
    2b92:	21 f4       	brne	.+8      	; 0x2b9c <digitalWrite+0x9e>
    2b94:	8c 91       	ld	r24, X
    2b96:	90 95       	com	r25
    2b98:	89 23       	and	r24, r25
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <digitalWrite+0xa2>
    2b9c:	8c 91       	ld	r24, X
    2b9e:	89 2b       	or	r24, r25
    2ba0:	8c 93       	st	X, r24
    2ba2:	2f bf       	out	0x3f, r18	; 63
    2ba4:	08 95       	ret

00002ba6 <digitalRead>:
    2ba6:	68 2f       	mov	r22, r24
    2ba8:	70 e0       	ldi	r23, 0x00	; 0
    2baa:	cb 01       	movw	r24, r22
    2bac:	82 55       	subi	r24, 0x52	; 82
    2bae:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	24 91       	lpm	r18, Z+
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	86 56       	subi	r24, 0x66	; 102
    2bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bba:	fc 01       	movw	r30, r24
    2bbc:	44 91       	lpm	r20, Z+
    2bbe:	6a 57       	subi	r22, 0x7A	; 122
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	fb 01       	movw	r30, r22
    2bc4:	94 91       	lpm	r25, Z+
    2bc6:	99 23       	and	r25, r25
    2bc8:	19 f4       	brne	.+6      	; 0x2bd0 <digitalRead+0x2a>
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	3c c0       	rjmp	.+120    	; 0x2c48 <digitalRead+0xa2>
    2bd0:	22 23       	and	r18, r18
    2bd2:	51 f1       	breq	.+84     	; 0x2c28 <digitalRead+0x82>
    2bd4:	23 30       	cpi	r18, 0x03	; 3
    2bd6:	71 f0       	breq	.+28     	; 0x2bf4 <digitalRead+0x4e>
    2bd8:	24 30       	cpi	r18, 0x04	; 4
    2bda:	28 f4       	brcc	.+10     	; 0x2be6 <digitalRead+0x40>
    2bdc:	21 30       	cpi	r18, 0x01	; 1
    2bde:	a1 f0       	breq	.+40     	; 0x2c08 <digitalRead+0x62>
    2be0:	22 30       	cpi	r18, 0x02	; 2
    2be2:	11 f5       	brne	.+68     	; 0x2c28 <digitalRead+0x82>
    2be4:	14 c0       	rjmp	.+40     	; 0x2c0e <digitalRead+0x68>
    2be6:	26 30       	cpi	r18, 0x06	; 6
    2be8:	b1 f0       	breq	.+44     	; 0x2c16 <digitalRead+0x70>
    2bea:	27 30       	cpi	r18, 0x07	; 7
    2bec:	c1 f0       	breq	.+48     	; 0x2c1e <digitalRead+0x78>
    2bee:	24 30       	cpi	r18, 0x04	; 4
    2bf0:	d9 f4       	brne	.+54     	; 0x2c28 <digitalRead+0x82>
    2bf2:	04 c0       	rjmp	.+8      	; 0x2bfc <digitalRead+0x56>
    2bf4:	80 91 80 00 	lds	r24, 0x0080
    2bf8:	8f 77       	andi	r24, 0x7F	; 127
    2bfa:	03 c0       	rjmp	.+6      	; 0x2c02 <digitalRead+0x5c>
    2bfc:	80 91 80 00 	lds	r24, 0x0080
    2c00:	8f 7d       	andi	r24, 0xDF	; 223
    2c02:	80 93 80 00 	sts	0x0080, r24
    2c06:	10 c0       	rjmp	.+32     	; 0x2c28 <digitalRead+0x82>
    2c08:	84 b5       	in	r24, 0x24	; 36
    2c0a:	8f 77       	andi	r24, 0x7F	; 127
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <digitalRead+0x6c>
    2c0e:	84 b5       	in	r24, 0x24	; 36
    2c10:	8f 7d       	andi	r24, 0xDF	; 223
    2c12:	84 bd       	out	0x24, r24	; 36
    2c14:	09 c0       	rjmp	.+18     	; 0x2c28 <digitalRead+0x82>
    2c16:	80 91 b0 00 	lds	r24, 0x00B0
    2c1a:	8f 77       	andi	r24, 0x7F	; 127
    2c1c:	03 c0       	rjmp	.+6      	; 0x2c24 <digitalRead+0x7e>
    2c1e:	80 91 b0 00 	lds	r24, 0x00B0
    2c22:	8f 7d       	andi	r24, 0xDF	; 223
    2c24:	80 93 b0 00 	sts	0x00B0, r24
    2c28:	89 2f       	mov	r24, r25
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	88 0f       	add	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	84 58       	subi	r24, 0x84	; 132
    2c32:	9f 4f       	sbci	r25, 0xFF	; 255
    2c34:	fc 01       	movw	r30, r24
    2c36:	a5 91       	lpm	r26, Z+
    2c38:	b4 91       	lpm	r27, Z+
    2c3a:	8c 91       	ld	r24, X
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	84 23       	and	r24, r20
    2c42:	11 f0       	breq	.+4      	; 0x2c48 <digitalRead+0xa2>
    2c44:	21 e0       	ldi	r18, 0x01	; 1
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	c9 01       	movw	r24, r18
    2c4a:	08 95       	ret

00002c4c <__mulsi3>:
    2c4c:	62 9f       	mul	r22, r18
    2c4e:	d0 01       	movw	r26, r0
    2c50:	73 9f       	mul	r23, r19
    2c52:	f0 01       	movw	r30, r0
    2c54:	82 9f       	mul	r24, r18
    2c56:	e0 0d       	add	r30, r0
    2c58:	f1 1d       	adc	r31, r1
    2c5a:	64 9f       	mul	r22, r20
    2c5c:	e0 0d       	add	r30, r0
    2c5e:	f1 1d       	adc	r31, r1
    2c60:	92 9f       	mul	r25, r18
    2c62:	f0 0d       	add	r31, r0
    2c64:	83 9f       	mul	r24, r19
    2c66:	f0 0d       	add	r31, r0
    2c68:	74 9f       	mul	r23, r20
    2c6a:	f0 0d       	add	r31, r0
    2c6c:	65 9f       	mul	r22, r21
    2c6e:	f0 0d       	add	r31, r0
    2c70:	99 27       	eor	r25, r25
    2c72:	72 9f       	mul	r23, r18
    2c74:	b0 0d       	add	r27, r0
    2c76:	e1 1d       	adc	r30, r1
    2c78:	f9 1f       	adc	r31, r25
    2c7a:	63 9f       	mul	r22, r19
    2c7c:	b0 0d       	add	r27, r0
    2c7e:	e1 1d       	adc	r30, r1
    2c80:	f9 1f       	adc	r31, r25
    2c82:	bd 01       	movw	r22, r26
    2c84:	cf 01       	movw	r24, r30
    2c86:	11 24       	eor	r1, r1
    2c88:	08 95       	ret

00002c8a <__udivmodhi4>:
    2c8a:	aa 1b       	sub	r26, r26
    2c8c:	bb 1b       	sub	r27, r27
    2c8e:	51 e1       	ldi	r21, 0x11	; 17
    2c90:	07 c0       	rjmp	.+14     	; 0x2ca0 <__udivmodhi4_ep>

00002c92 <__udivmodhi4_loop>:
    2c92:	aa 1f       	adc	r26, r26
    2c94:	bb 1f       	adc	r27, r27
    2c96:	a6 17       	cp	r26, r22
    2c98:	b7 07       	cpc	r27, r23
    2c9a:	10 f0       	brcs	.+4      	; 0x2ca0 <__udivmodhi4_ep>
    2c9c:	a6 1b       	sub	r26, r22
    2c9e:	b7 0b       	sbc	r27, r23

00002ca0 <__udivmodhi4_ep>:
    2ca0:	88 1f       	adc	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	5a 95       	dec	r21
    2ca6:	a9 f7       	brne	.-22     	; 0x2c92 <__udivmodhi4_loop>
    2ca8:	80 95       	com	r24
    2caa:	90 95       	com	r25
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	08 95       	ret

00002cb2 <__divmodhi4>:
    2cb2:	97 fb       	bst	r25, 7
    2cb4:	09 2e       	mov	r0, r25
    2cb6:	07 26       	eor	r0, r23
    2cb8:	0a d0       	rcall	.+20     	; 0x2cce <__divmodhi4_neg1>
    2cba:	77 fd       	sbrc	r23, 7
    2cbc:	04 d0       	rcall	.+8      	; 0x2cc6 <__divmodhi4_neg2>
    2cbe:	e5 df       	rcall	.-54     	; 0x2c8a <__udivmodhi4>
    2cc0:	06 d0       	rcall	.+12     	; 0x2cce <__divmodhi4_neg1>
    2cc2:	00 20       	and	r0, r0
    2cc4:	1a f4       	brpl	.+6      	; 0x2ccc <__divmodhi4_exit>

00002cc6 <__divmodhi4_neg2>:
    2cc6:	70 95       	com	r23
    2cc8:	61 95       	neg	r22
    2cca:	7f 4f       	sbci	r23, 0xFF	; 255

00002ccc <__divmodhi4_exit>:
    2ccc:	08 95       	ret

00002cce <__divmodhi4_neg1>:
    2cce:	f6 f7       	brtc	.-4      	; 0x2ccc <__divmodhi4_exit>
    2cd0:	90 95       	com	r25
    2cd2:	81 95       	neg	r24
    2cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd6:	08 95       	ret

00002cd8 <__udivmodsi4>:
    2cd8:	a1 e2       	ldi	r26, 0x21	; 33
    2cda:	1a 2e       	mov	r1, r26
    2cdc:	aa 1b       	sub	r26, r26
    2cde:	bb 1b       	sub	r27, r27
    2ce0:	fd 01       	movw	r30, r26
    2ce2:	0d c0       	rjmp	.+26     	; 0x2cfe <__udivmodsi4_ep>

00002ce4 <__udivmodsi4_loop>:
    2ce4:	aa 1f       	adc	r26, r26
    2ce6:	bb 1f       	adc	r27, r27
    2ce8:	ee 1f       	adc	r30, r30
    2cea:	ff 1f       	adc	r31, r31
    2cec:	a2 17       	cp	r26, r18
    2cee:	b3 07       	cpc	r27, r19
    2cf0:	e4 07       	cpc	r30, r20
    2cf2:	f5 07       	cpc	r31, r21
    2cf4:	20 f0       	brcs	.+8      	; 0x2cfe <__udivmodsi4_ep>
    2cf6:	a2 1b       	sub	r26, r18
    2cf8:	b3 0b       	sbc	r27, r19
    2cfa:	e4 0b       	sbc	r30, r20
    2cfc:	f5 0b       	sbc	r31, r21

00002cfe <__udivmodsi4_ep>:
    2cfe:	66 1f       	adc	r22, r22
    2d00:	77 1f       	adc	r23, r23
    2d02:	88 1f       	adc	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	1a 94       	dec	r1
    2d08:	69 f7       	brne	.-38     	; 0x2ce4 <__udivmodsi4_loop>
    2d0a:	60 95       	com	r22
    2d0c:	70 95       	com	r23
    2d0e:	80 95       	com	r24
    2d10:	90 95       	com	r25
    2d12:	9b 01       	movw	r18, r22
    2d14:	ac 01       	movw	r20, r24
    2d16:	bd 01       	movw	r22, r26
    2d18:	cf 01       	movw	r24, r30
    2d1a:	08 95       	ret

00002d1c <__prologue_saves__>:
    2d1c:	2f 92       	push	r2
    2d1e:	3f 92       	push	r3
    2d20:	4f 92       	push	r4
    2d22:	5f 92       	push	r5
    2d24:	6f 92       	push	r6
    2d26:	7f 92       	push	r7
    2d28:	8f 92       	push	r8
    2d2a:	9f 92       	push	r9
    2d2c:	af 92       	push	r10
    2d2e:	bf 92       	push	r11
    2d30:	cf 92       	push	r12
    2d32:	df 92       	push	r13
    2d34:	ef 92       	push	r14
    2d36:	ff 92       	push	r15
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	ca 1b       	sub	r28, r26
    2d46:	db 0b       	sbc	r29, r27
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	09 94       	ijmp

00002d54 <__epilogue_restores__>:
    2d54:	2a 88       	ldd	r2, Y+18	; 0x12
    2d56:	39 88       	ldd	r3, Y+17	; 0x11
    2d58:	48 88       	ldd	r4, Y+16	; 0x10
    2d5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d66:	b9 84       	ldd	r11, Y+9	; 0x09
    2d68:	c8 84       	ldd	r12, Y+8	; 0x08
    2d6a:	df 80       	ldd	r13, Y+7	; 0x07
    2d6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d70:	0c 81       	ldd	r16, Y+4	; 0x04
    2d72:	1b 81       	ldd	r17, Y+3	; 0x03
    2d74:	aa 81       	ldd	r26, Y+2	; 0x02
    2d76:	b9 81       	ldd	r27, Y+1	; 0x01
    2d78:	ce 0f       	add	r28, r30
    2d7a:	d1 1d       	adc	r29, r1
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	ed 01       	movw	r28, r26
    2d88:	08 95       	ret

00002d8a <__tablejump2__>:
    2d8a:	ee 0f       	add	r30, r30
    2d8c:	ff 1f       	adc	r31, r31

00002d8e <__tablejump__>:
    2d8e:	05 90       	lpm	r0, Z+
    2d90:	f4 91       	lpm	r31, Z+
    2d92:	e0 2d       	mov	r30, r0
    2d94:	09 94       	ijmp

00002d96 <_exit>:
    2d96:	f8 94       	cli

00002d98 <__stop_program>:
    2d98:	ff cf       	rjmp	.-2      	; 0x2d98 <__stop_program>
