
ArduinoWaterMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800100  00004240  000042d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000428  0080025a  0080025a  0000442e  2**0
                  ALLOC
  3 .stab         0000bd78  00000000  00000000  00004430  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000b520  00000000  00000000  000101a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c0       	rjmp	.+216    	; 0xda <__dtors_end>
       2:	00 00       	nop
       4:	92 c0       	rjmp	.+292    	; 0x12a <__bad_interrupt>
       6:	00 00       	nop
       8:	90 c0       	rjmp	.+288    	; 0x12a <__bad_interrupt>
       a:	00 00       	nop
       c:	8e c0       	rjmp	.+284    	; 0x12a <__bad_interrupt>
       e:	00 00       	nop
      10:	8c c0       	rjmp	.+280    	; 0x12a <__bad_interrupt>
      12:	00 00       	nop
      14:	8a c0       	rjmp	.+276    	; 0x12a <__bad_interrupt>
      16:	00 00       	nop
      18:	b9 c5       	rjmp	.+2930   	; 0xb8c <__vector_6>
      1a:	00 00       	nop
      1c:	86 c0       	rjmp	.+268    	; 0x12a <__bad_interrupt>
      1e:	00 00       	nop
      20:	84 c0       	rjmp	.+264    	; 0x12a <__bad_interrupt>
      22:	00 00       	nop
      24:	82 c0       	rjmp	.+260    	; 0x12a <__bad_interrupt>
      26:	00 00       	nop
      28:	80 c0       	rjmp	.+256    	; 0x12a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7e c0       	rjmp	.+252    	; 0x12a <__bad_interrupt>
      2e:	00 00       	nop
      30:	7c c0       	rjmp	.+248    	; 0x12a <__bad_interrupt>
      32:	00 00       	nop
      34:	7a c0       	rjmp	.+244    	; 0x12a <__bad_interrupt>
      36:	00 00       	nop
      38:	78 c0       	rjmp	.+240    	; 0x12a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	76 c0       	rjmp	.+236    	; 0x12a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__vector_16>
      44:	72 c0       	rjmp	.+228    	; 0x12a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__vector_18>
      4c:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__vector_19>
      50:	6c c0       	rjmp	.+216    	; 0x12a <__bad_interrupt>
      52:	00 00       	nop
      54:	6a c0       	rjmp	.+212    	; 0x12a <__bad_interrupt>
      56:	00 00       	nop
      58:	68 c0       	rjmp	.+208    	; 0x12a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	66 c0       	rjmp	.+204    	; 0x12a <__bad_interrupt>
      5e:	00 00       	nop
      60:	64 c0       	rjmp	.+200    	; 0x12a <__bad_interrupt>
      62:	00 00       	nop
      64:	62 c0       	rjmp	.+196    	; 0x12a <__bad_interrupt>
	...

00000068 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
      68:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

00000078 <port_to_mode_PGM>:
      78:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000082 <port_to_output_PGM>:
      82:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000008c <port_to_input_PGM>:
      8c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03                                         ....

000000aa <digital_pin_to_bit_mask_PGM>:
      aa:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ba:	04 08 10 20                                         ... 

000000be <digital_pin_to_timer_PGM>:
      be:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      ce:	00 00 00 00                                         ....

000000d2 <__ctors_start>:
      d2:	70 03       	mulsu	r23, r16
      d4:	5f 17       	cp	r21, r31
      d6:	ea 1d       	adc	r30, r10

000000d8 <__ctors_end>:
      d8:	6b 03       	fmul	r22, r19

000000da <__dtors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e0 e4       	ldi	r30, 0x40	; 64
      ee:	f2 e4       	ldi	r31, 0x42	; 66
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <.do_copy_data_start>

000000f2 <.do_copy_data_loop>:
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0

000000f6 <.do_copy_data_start>:
      f6:	aa 35       	cpi	r26, 0x5A	; 90
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <.do_copy_data_loop>

000000fc <__do_clear_bss>:
      fc:	16 e0       	ldi	r17, 0x06	; 6
      fe:	aa e5       	ldi	r26, 0x5A	; 90
     100:	b2 e0       	ldi	r27, 0x02	; 2
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a2 38       	cpi	r26, 0x82	; 130
     108:	b1 07       	cpc	r27, r17
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>

0000010c <__do_global_ctors>:
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	c8 ed       	ldi	r28, 0xD8	; 216
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	04 c0       	rjmp	.+8      	; 0x11c <.do_global_ctors_start>

00000114 <.do_global_ctors_loop>:
     114:	22 97       	sbiw	r28, 0x02	; 2
     116:	fe 01       	movw	r30, r28
     118:	0e 94 10 21 	call	0x4220	; 0x4220 <__tablejump__>

0000011c <.do_global_ctors_start>:
     11c:	c2 3d       	cpi	r28, 0xD2	; 210
     11e:	d1 07       	cpc	r29, r17
     120:	c9 f7       	brne	.-14     	; 0x114 <.do_global_ctors_loop>
     122:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <main>
     126:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__do_global_dtors>

0000012a <__bad_interrupt>:
     12a:	6a cf       	rjmp	.-300    	; 0x0 <__vectors>

0000012c <memcmp>:
     12c:	fb 01       	movw	r30, r22
     12e:	dc 01       	movw	r26, r24
     130:	04 c0       	rjmp	.+8      	; 0x13a <memcmp+0xe>
     132:	8d 91       	ld	r24, X+
     134:	01 90       	ld	r0, Z+
     136:	80 19       	sub	r24, r0
     138:	21 f4       	brne	.+8      	; 0x142 <memcmp+0x16>
     13a:	41 50       	subi	r20, 0x01	; 1
     13c:	50 40       	sbci	r21, 0x00	; 0
     13e:	c8 f7       	brcc	.-14     	; 0x132 <memcmp+0x6>
     140:	88 1b       	sub	r24, r24
     142:	99 0b       	sbc	r25, r25
     144:	08 95       	ret

00000146 <strchr>:
     146:	fc 01       	movw	r30, r24
     148:	81 91       	ld	r24, Z+
     14a:	86 17       	cp	r24, r22
     14c:	21 f0       	breq	.+8      	; 0x156 <strchr+0x10>
     14e:	88 23       	and	r24, r24
     150:	d9 f7       	brne	.-10     	; 0x148 <strchr+0x2>
     152:	99 27       	eor	r25, r25
     154:	08 95       	ret
     156:	31 97       	sbiw	r30, 0x01	; 1
     158:	cf 01       	movw	r24, r30
     15a:	08 95       	ret

0000015c <strcpy>:
     15c:	fb 01       	movw	r30, r22
     15e:	dc 01       	movw	r26, r24
     160:	01 90       	ld	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	00 20       	and	r0, r0
     166:	e1 f7       	brne	.-8      	; 0x160 <strcpy+0x4>
     168:	08 95       	ret

0000016a <strncpy>:
     16a:	fb 01       	movw	r30, r22
     16c:	dc 01       	movw	r26, r24
     16e:	41 50       	subi	r20, 0x01	; 1
     170:	50 40       	sbci	r21, 0x00	; 0
     172:	48 f0       	brcs	.+18     	; 0x186 <strncpy+0x1c>
     174:	01 90       	ld	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	00 20       	and	r0, r0
     17a:	c9 f7       	brne	.-14     	; 0x16e <strncpy+0x4>
     17c:	01 c0       	rjmp	.+2      	; 0x180 <strncpy+0x16>
     17e:	1d 92       	st	X+, r1
     180:	41 50       	subi	r20, 0x01	; 1
     182:	50 40       	sbci	r21, 0x00	; 0
     184:	e0 f7       	brcc	.-8      	; 0x17e <strncpy+0x14>
     186:	08 95       	ret

00000188 <sprintf>:
     188:	ae e0       	ldi	r26, 0x0E	; 14
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	ea ec       	ldi	r30, 0xCA	; 202
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <__prologue_saves__+0x1c>
     194:	0d 89       	ldd	r16, Y+21	; 0x15
     196:	1e 89       	ldd	r17, Y+22	; 0x16
     198:	86 e0       	ldi	r24, 0x06	; 6
     19a:	8c 83       	std	Y+4, r24	; 0x04
     19c:	1a 83       	std	Y+2, r17	; 0x02
     19e:	09 83       	std	Y+1, r16	; 0x01
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	9f e7       	ldi	r25, 0x7F	; 127
     1a4:	9e 83       	std	Y+6, r25	; 0x06
     1a6:	8d 83       	std	Y+5, r24	; 0x05
     1a8:	9e 01       	movw	r18, r28
     1aa:	27 5e       	subi	r18, 0xE7	; 231
     1ac:	3f 4f       	sbci	r19, 0xFF	; 255
     1ae:	ce 01       	movw	r24, r28
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	6f 89       	ldd	r22, Y+23	; 0x17
     1b4:	78 8d       	ldd	r23, Y+24	; 0x18
     1b6:	a9 01       	movw	r20, r18
     1b8:	0a d0       	rcall	.+20     	; 0x1ce <vfprintf>
     1ba:	2f 81       	ldd	r18, Y+7	; 0x07
     1bc:	38 85       	ldd	r19, Y+8	; 0x08
     1be:	02 0f       	add	r16, r18
     1c0:	13 1f       	adc	r17, r19
     1c2:	f8 01       	movw	r30, r16
     1c4:	10 82       	st	Z, r1
     1c6:	2e 96       	adiw	r28, 0x0e	; 14
     1c8:	e4 e0       	ldi	r30, 0x04	; 4
     1ca:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__epilogue_restores__+0x1c>

000001ce <vfprintf>:
     1ce:	ab e0       	ldi	r26, 0x0B	; 11
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	ed ee       	ldi	r30, 0xED	; 237
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__prologue_saves__>
     1da:	3c 01       	movw	r6, r24
     1dc:	2b 01       	movw	r4, r22
     1de:	5a 01       	movw	r10, r20
     1e0:	fc 01       	movw	r30, r24
     1e2:	17 82       	std	Z+7, r1	; 0x07
     1e4:	16 82       	std	Z+6, r1	; 0x06
     1e6:	83 81       	ldd	r24, Z+3	; 0x03
     1e8:	81 fd       	sbrc	r24, 1
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <vfprintf+0x24>
     1ec:	6f ef       	ldi	r22, 0xFF	; 255
     1ee:	7f ef       	ldi	r23, 0xFF	; 255
     1f0:	b9 c1       	rjmp	.+882    	; 0x564 <vfprintf+0x396>
     1f2:	9a e0       	ldi	r25, 0x0A	; 10
     1f4:	89 2e       	mov	r8, r25
     1f6:	1e 01       	movw	r2, r28
     1f8:	08 94       	sec
     1fa:	21 1c       	adc	r2, r1
     1fc:	31 1c       	adc	r3, r1
     1fe:	f3 01       	movw	r30, r6
     200:	23 81       	ldd	r18, Z+3	; 0x03
     202:	f2 01       	movw	r30, r4
     204:	23 fd       	sbrc	r18, 3
     206:	85 91       	lpm	r24, Z+
     208:	23 ff       	sbrs	r18, 3
     20a:	81 91       	ld	r24, Z+
     20c:	2f 01       	movw	r4, r30
     20e:	88 23       	and	r24, r24
     210:	09 f4       	brne	.+2      	; 0x214 <vfprintf+0x46>
     212:	a5 c1       	rjmp	.+842    	; 0x55e <vfprintf+0x390>
     214:	85 32       	cpi	r24, 0x25	; 37
     216:	39 f4       	brne	.+14     	; 0x226 <vfprintf+0x58>
     218:	23 fd       	sbrc	r18, 3
     21a:	85 91       	lpm	r24, Z+
     21c:	23 ff       	sbrs	r18, 3
     21e:	81 91       	ld	r24, Z+
     220:	2f 01       	movw	r4, r30
     222:	85 32       	cpi	r24, 0x25	; 37
     224:	21 f4       	brne	.+8      	; 0x22e <vfprintf+0x60>
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	b3 01       	movw	r22, r6
     22a:	b7 d1       	rcall	.+878    	; 0x59a <fputc>
     22c:	e8 cf       	rjmp	.-48     	; 0x1fe <vfprintf+0x30>
     22e:	98 2f       	mov	r25, r24
     230:	ff 24       	eor	r15, r15
     232:	ee 24       	eor	r14, r14
     234:	99 24       	eor	r9, r9
     236:	ff e1       	ldi	r31, 0x1F	; 31
     238:	ff 15       	cp	r31, r15
     23a:	d0 f0       	brcs	.+52     	; 0x270 <vfprintf+0xa2>
     23c:	9b 32       	cpi	r25, 0x2B	; 43
     23e:	69 f0       	breq	.+26     	; 0x25a <vfprintf+0x8c>
     240:	9c 32       	cpi	r25, 0x2C	; 44
     242:	28 f4       	brcc	.+10     	; 0x24e <vfprintf+0x80>
     244:	90 32       	cpi	r25, 0x20	; 32
     246:	59 f0       	breq	.+22     	; 0x25e <vfprintf+0x90>
     248:	93 32       	cpi	r25, 0x23	; 35
     24a:	91 f4       	brne	.+36     	; 0x270 <vfprintf+0xa2>
     24c:	0e c0       	rjmp	.+28     	; 0x26a <vfprintf+0x9c>
     24e:	9d 32       	cpi	r25, 0x2D	; 45
     250:	49 f0       	breq	.+18     	; 0x264 <vfprintf+0x96>
     252:	90 33       	cpi	r25, 0x30	; 48
     254:	69 f4       	brne	.+26     	; 0x270 <vfprintf+0xa2>
     256:	41 e0       	ldi	r20, 0x01	; 1
     258:	24 c0       	rjmp	.+72     	; 0x2a2 <vfprintf+0xd4>
     25a:	52 e0       	ldi	r21, 0x02	; 2
     25c:	f5 2a       	or	r15, r21
     25e:	84 e0       	ldi	r24, 0x04	; 4
     260:	f8 2a       	or	r15, r24
     262:	28 c0       	rjmp	.+80     	; 0x2b4 <vfprintf+0xe6>
     264:	98 e0       	ldi	r25, 0x08	; 8
     266:	f9 2a       	or	r15, r25
     268:	25 c0       	rjmp	.+74     	; 0x2b4 <vfprintf+0xe6>
     26a:	e0 e1       	ldi	r30, 0x10	; 16
     26c:	fe 2a       	or	r15, r30
     26e:	22 c0       	rjmp	.+68     	; 0x2b4 <vfprintf+0xe6>
     270:	f7 fc       	sbrc	r15, 7
     272:	29 c0       	rjmp	.+82     	; 0x2c6 <vfprintf+0xf8>
     274:	89 2f       	mov	r24, r25
     276:	80 53       	subi	r24, 0x30	; 48
     278:	8a 30       	cpi	r24, 0x0A	; 10
     27a:	70 f4       	brcc	.+28     	; 0x298 <vfprintf+0xca>
     27c:	f6 fe       	sbrs	r15, 6
     27e:	05 c0       	rjmp	.+10     	; 0x28a <vfprintf+0xbc>
     280:	98 9c       	mul	r9, r8
     282:	90 2c       	mov	r9, r0
     284:	11 24       	eor	r1, r1
     286:	98 0e       	add	r9, r24
     288:	15 c0       	rjmp	.+42     	; 0x2b4 <vfprintf+0xe6>
     28a:	e8 9c       	mul	r14, r8
     28c:	e0 2c       	mov	r14, r0
     28e:	11 24       	eor	r1, r1
     290:	e8 0e       	add	r14, r24
     292:	f0 e2       	ldi	r31, 0x20	; 32
     294:	ff 2a       	or	r15, r31
     296:	0e c0       	rjmp	.+28     	; 0x2b4 <vfprintf+0xe6>
     298:	9e 32       	cpi	r25, 0x2E	; 46
     29a:	29 f4       	brne	.+10     	; 0x2a6 <vfprintf+0xd8>
     29c:	f6 fc       	sbrc	r15, 6
     29e:	5f c1       	rjmp	.+702    	; 0x55e <vfprintf+0x390>
     2a0:	40 e4       	ldi	r20, 0x40	; 64
     2a2:	f4 2a       	or	r15, r20
     2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <vfprintf+0xe6>
     2a6:	9c 36       	cpi	r25, 0x6C	; 108
     2a8:	19 f4       	brne	.+6      	; 0x2b0 <vfprintf+0xe2>
     2aa:	50 e8       	ldi	r21, 0x80	; 128
     2ac:	f5 2a       	or	r15, r21
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <vfprintf+0xe6>
     2b0:	98 36       	cpi	r25, 0x68	; 104
     2b2:	49 f4       	brne	.+18     	; 0x2c6 <vfprintf+0xf8>
     2b4:	f2 01       	movw	r30, r4
     2b6:	23 fd       	sbrc	r18, 3
     2b8:	95 91       	lpm	r25, Z+
     2ba:	23 ff       	sbrs	r18, 3
     2bc:	91 91       	ld	r25, Z+
     2be:	2f 01       	movw	r4, r30
     2c0:	99 23       	and	r25, r25
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <vfprintf+0xf8>
     2c4:	b8 cf       	rjmp	.-144    	; 0x236 <vfprintf+0x68>
     2c6:	89 2f       	mov	r24, r25
     2c8:	85 54       	subi	r24, 0x45	; 69
     2ca:	83 30       	cpi	r24, 0x03	; 3
     2cc:	18 f0       	brcs	.+6      	; 0x2d4 <vfprintf+0x106>
     2ce:	80 52       	subi	r24, 0x20	; 32
     2d0:	83 30       	cpi	r24, 0x03	; 3
     2d2:	38 f4       	brcc	.+14     	; 0x2e2 <vfprintf+0x114>
     2d4:	44 e0       	ldi	r20, 0x04	; 4
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	a4 0e       	add	r10, r20
     2da:	b5 1e       	adc	r11, r21
     2dc:	5f e3       	ldi	r21, 0x3F	; 63
     2de:	59 83       	std	Y+1, r21	; 0x01
     2e0:	0f c0       	rjmp	.+30     	; 0x300 <vfprintf+0x132>
     2e2:	93 36       	cpi	r25, 0x63	; 99
     2e4:	31 f0       	breq	.+12     	; 0x2f2 <vfprintf+0x124>
     2e6:	93 37       	cpi	r25, 0x73	; 115
     2e8:	79 f0       	breq	.+30     	; 0x308 <vfprintf+0x13a>
     2ea:	93 35       	cpi	r25, 0x53	; 83
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <vfprintf+0x122>
     2ee:	52 c0       	rjmp	.+164    	; 0x394 <vfprintf+0x1c6>
     2f0:	1f c0       	rjmp	.+62     	; 0x330 <vfprintf+0x162>
     2f2:	f5 01       	movw	r30, r10
     2f4:	80 81       	ld	r24, Z
     2f6:	89 83       	std	Y+1, r24	; 0x01
     2f8:	42 e0       	ldi	r20, 0x02	; 2
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	a4 0e       	add	r10, r20
     2fe:	b5 1e       	adc	r11, r21
     300:	61 01       	movw	r12, r2
     302:	01 e0       	ldi	r16, 0x01	; 1
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	11 c0       	rjmp	.+34     	; 0x32a <vfprintf+0x15c>
     308:	f5 01       	movw	r30, r10
     30a:	c0 80       	ld	r12, Z
     30c:	d1 80       	ldd	r13, Z+1	; 0x01
     30e:	f6 fc       	sbrc	r15, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <vfprintf+0x14a>
     312:	6f ef       	ldi	r22, 0xFF	; 255
     314:	7f ef       	ldi	r23, 0xFF	; 255
     316:	02 c0       	rjmp	.+4      	; 0x31c <vfprintf+0x14e>
     318:	69 2d       	mov	r22, r9
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	42 e0       	ldi	r20, 0x02	; 2
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	a4 0e       	add	r10, r20
     322:	b5 1e       	adc	r11, r21
     324:	c6 01       	movw	r24, r12
     326:	2e d1       	rcall	.+604    	; 0x584 <strnlen>
     328:	8c 01       	movw	r16, r24
     32a:	5f e7       	ldi	r21, 0x7F	; 127
     32c:	f5 22       	and	r15, r21
     32e:	13 c0       	rjmp	.+38     	; 0x356 <vfprintf+0x188>
     330:	f5 01       	movw	r30, r10
     332:	c0 80       	ld	r12, Z
     334:	d1 80       	ldd	r13, Z+1	; 0x01
     336:	f6 fc       	sbrc	r15, 6
     338:	03 c0       	rjmp	.+6      	; 0x340 <vfprintf+0x172>
     33a:	6f ef       	ldi	r22, 0xFF	; 255
     33c:	7f ef       	ldi	r23, 0xFF	; 255
     33e:	02 c0       	rjmp	.+4      	; 0x344 <vfprintf+0x176>
     340:	69 2d       	mov	r22, r9
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	42 e0       	ldi	r20, 0x02	; 2
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	a4 0e       	add	r10, r20
     34a:	b5 1e       	adc	r11, r21
     34c:	c6 01       	movw	r24, r12
     34e:	0f d1       	rcall	.+542    	; 0x56e <strnlen_P>
     350:	8c 01       	movw	r16, r24
     352:	50 e8       	ldi	r21, 0x80	; 128
     354:	f5 2a       	or	r15, r21
     356:	f3 fe       	sbrs	r15, 3
     358:	06 c0       	rjmp	.+12     	; 0x366 <vfprintf+0x198>
     35a:	18 c0       	rjmp	.+48     	; 0x38c <vfprintf+0x1be>
     35c:	80 e2       	ldi	r24, 0x20	; 32
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	b3 01       	movw	r22, r6
     362:	1b d1       	rcall	.+566    	; 0x59a <fputc>
     364:	ea 94       	dec	r14
     366:	8e 2d       	mov	r24, r14
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	08 17       	cp	r16, r24
     36c:	19 07       	cpc	r17, r25
     36e:	b0 f3       	brcs	.-20     	; 0x35c <vfprintf+0x18e>
     370:	0d c0       	rjmp	.+26     	; 0x38c <vfprintf+0x1be>
     372:	f6 01       	movw	r30, r12
     374:	f7 fc       	sbrc	r15, 7
     376:	85 91       	lpm	r24, Z+
     378:	f7 fe       	sbrs	r15, 7
     37a:	81 91       	ld	r24, Z+
     37c:	6f 01       	movw	r12, r30
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	b3 01       	movw	r22, r6
     382:	0b d1       	rcall	.+534    	; 0x59a <fputc>
     384:	e1 10       	cpse	r14, r1
     386:	ea 94       	dec	r14
     388:	01 50       	subi	r16, 0x01	; 1
     38a:	10 40       	sbci	r17, 0x00	; 0
     38c:	01 15       	cp	r16, r1
     38e:	11 05       	cpc	r17, r1
     390:	81 f7       	brne	.-32     	; 0x372 <vfprintf+0x1a4>
     392:	e2 c0       	rjmp	.+452    	; 0x558 <vfprintf+0x38a>
     394:	94 36       	cpi	r25, 0x64	; 100
     396:	11 f0       	breq	.+4      	; 0x39c <vfprintf+0x1ce>
     398:	99 36       	cpi	r25, 0x69	; 105
     39a:	61 f5       	brne	.+88     	; 0x3f4 <vfprintf+0x226>
     39c:	f7 fe       	sbrs	r15, 7
     39e:	08 c0       	rjmp	.+16     	; 0x3b0 <vfprintf+0x1e2>
     3a0:	f5 01       	movw	r30, r10
     3a2:	20 81       	ld	r18, Z
     3a4:	31 81       	ldd	r19, Z+1	; 0x01
     3a6:	42 81       	ldd	r20, Z+2	; 0x02
     3a8:	53 81       	ldd	r21, Z+3	; 0x03
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <vfprintf+0x1f6>
     3b0:	f5 01       	movw	r30, r10
     3b2:	80 81       	ld	r24, Z
     3b4:	91 81       	ldd	r25, Z+1	; 0x01
     3b6:	9c 01       	movw	r18, r24
     3b8:	44 27       	eor	r20, r20
     3ba:	37 fd       	sbrc	r19, 7
     3bc:	40 95       	com	r20
     3be:	54 2f       	mov	r21, r20
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	a8 0e       	add	r10, r24
     3c6:	b9 1e       	adc	r11, r25
     3c8:	9f e6       	ldi	r25, 0x6F	; 111
     3ca:	f9 22       	and	r15, r25
     3cc:	57 ff       	sbrs	r21, 7
     3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <vfprintf+0x214>
     3d0:	50 95       	com	r21
     3d2:	40 95       	com	r20
     3d4:	30 95       	com	r19
     3d6:	21 95       	neg	r18
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	4f 4f       	sbci	r20, 0xFF	; 255
     3dc:	5f 4f       	sbci	r21, 0xFF	; 255
     3de:	e0 e8       	ldi	r30, 0x80	; 128
     3e0:	fe 2a       	or	r15, r30
     3e2:	ca 01       	movw	r24, r20
     3e4:	b9 01       	movw	r22, r18
     3e6:	a1 01       	movw	r20, r2
     3e8:	2a e0       	ldi	r18, 0x0A	; 10
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	02 d1       	rcall	.+516    	; 0x5f2 <__ultoa_invert>
     3ee:	d8 2e       	mov	r13, r24
     3f0:	d2 18       	sub	r13, r2
     3f2:	3f c0       	rjmp	.+126    	; 0x472 <vfprintf+0x2a4>
     3f4:	95 37       	cpi	r25, 0x75	; 117
     3f6:	29 f4       	brne	.+10     	; 0x402 <vfprintf+0x234>
     3f8:	1f 2d       	mov	r17, r15
     3fa:	1f 7e       	andi	r17, 0xEF	; 239
     3fc:	2a e0       	ldi	r18, 0x0A	; 10
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	1d c0       	rjmp	.+58     	; 0x43c <vfprintf+0x26e>
     402:	1f 2d       	mov	r17, r15
     404:	19 7f       	andi	r17, 0xF9	; 249
     406:	9f 36       	cpi	r25, 0x6F	; 111
     408:	61 f0       	breq	.+24     	; 0x422 <vfprintf+0x254>
     40a:	90 37       	cpi	r25, 0x70	; 112
     40c:	20 f4       	brcc	.+8      	; 0x416 <vfprintf+0x248>
     40e:	98 35       	cpi	r25, 0x58	; 88
     410:	09 f0       	breq	.+2      	; 0x414 <vfprintf+0x246>
     412:	a5 c0       	rjmp	.+330    	; 0x55e <vfprintf+0x390>
     414:	0f c0       	rjmp	.+30     	; 0x434 <vfprintf+0x266>
     416:	90 37       	cpi	r25, 0x70	; 112
     418:	39 f0       	breq	.+14     	; 0x428 <vfprintf+0x25a>
     41a:	98 37       	cpi	r25, 0x78	; 120
     41c:	09 f0       	breq	.+2      	; 0x420 <vfprintf+0x252>
     41e:	9f c0       	rjmp	.+318    	; 0x55e <vfprintf+0x390>
     420:	04 c0       	rjmp	.+8      	; 0x42a <vfprintf+0x25c>
     422:	28 e0       	ldi	r18, 0x08	; 8
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	0a c0       	rjmp	.+20     	; 0x43c <vfprintf+0x26e>
     428:	10 61       	ori	r17, 0x10	; 16
     42a:	14 fd       	sbrc	r17, 4
     42c:	14 60       	ori	r17, 0x04	; 4
     42e:	20 e1       	ldi	r18, 0x10	; 16
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	04 c0       	rjmp	.+8      	; 0x43c <vfprintf+0x26e>
     434:	14 fd       	sbrc	r17, 4
     436:	16 60       	ori	r17, 0x06	; 6
     438:	20 e1       	ldi	r18, 0x10	; 16
     43a:	32 e0       	ldi	r19, 0x02	; 2
     43c:	17 ff       	sbrs	r17, 7
     43e:	08 c0       	rjmp	.+16     	; 0x450 <vfprintf+0x282>
     440:	f5 01       	movw	r30, r10
     442:	60 81       	ld	r22, Z
     444:	71 81       	ldd	r23, Z+1	; 0x01
     446:	82 81       	ldd	r24, Z+2	; 0x02
     448:	93 81       	ldd	r25, Z+3	; 0x03
     44a:	44 e0       	ldi	r20, 0x04	; 4
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	08 c0       	rjmp	.+16     	; 0x460 <vfprintf+0x292>
     450:	f5 01       	movw	r30, r10
     452:	80 81       	ld	r24, Z
     454:	91 81       	ldd	r25, Z+1	; 0x01
     456:	bc 01       	movw	r22, r24
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	42 e0       	ldi	r20, 0x02	; 2
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	a4 0e       	add	r10, r20
     462:	b5 1e       	adc	r11, r21
     464:	a1 01       	movw	r20, r2
     466:	c5 d0       	rcall	.+394    	; 0x5f2 <__ultoa_invert>
     468:	d8 2e       	mov	r13, r24
     46a:	d2 18       	sub	r13, r2
     46c:	8f e7       	ldi	r24, 0x7F	; 127
     46e:	f8 2e       	mov	r15, r24
     470:	f1 22       	and	r15, r17
     472:	f6 fe       	sbrs	r15, 6
     474:	0b c0       	rjmp	.+22     	; 0x48c <vfprintf+0x2be>
     476:	5e ef       	ldi	r21, 0xFE	; 254
     478:	f5 22       	and	r15, r21
     47a:	d9 14       	cp	r13, r9
     47c:	38 f4       	brcc	.+14     	; 0x48c <vfprintf+0x2be>
     47e:	f4 fe       	sbrs	r15, 4
     480:	07 c0       	rjmp	.+14     	; 0x490 <vfprintf+0x2c2>
     482:	f2 fc       	sbrc	r15, 2
     484:	05 c0       	rjmp	.+10     	; 0x490 <vfprintf+0x2c2>
     486:	8f ee       	ldi	r24, 0xEF	; 239
     488:	f8 22       	and	r15, r24
     48a:	02 c0       	rjmp	.+4      	; 0x490 <vfprintf+0x2c2>
     48c:	1d 2d       	mov	r17, r13
     48e:	01 c0       	rjmp	.+2      	; 0x492 <vfprintf+0x2c4>
     490:	19 2d       	mov	r17, r9
     492:	f4 fe       	sbrs	r15, 4
     494:	0d c0       	rjmp	.+26     	; 0x4b0 <vfprintf+0x2e2>
     496:	fe 01       	movw	r30, r28
     498:	ed 0d       	add	r30, r13
     49a:	f1 1d       	adc	r31, r1
     49c:	80 81       	ld	r24, Z
     49e:	80 33       	cpi	r24, 0x30	; 48
     4a0:	19 f4       	brne	.+6      	; 0x4a8 <vfprintf+0x2da>
     4a2:	99 ee       	ldi	r25, 0xE9	; 233
     4a4:	f9 22       	and	r15, r25
     4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <vfprintf+0x2ea>
     4a8:	1f 5f       	subi	r17, 0xFF	; 255
     4aa:	f2 fe       	sbrs	r15, 2
     4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <vfprintf+0x2ea>
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <vfprintf+0x2e8>
     4b0:	8f 2d       	mov	r24, r15
     4b2:	86 78       	andi	r24, 0x86	; 134
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <vfprintf+0x2ea>
     4b6:	1f 5f       	subi	r17, 0xFF	; 255
     4b8:	0f 2d       	mov	r16, r15
     4ba:	f3 fc       	sbrc	r15, 3
     4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <vfprintf+0x316>
     4be:	f0 fe       	sbrs	r15, 0
     4c0:	0e c0       	rjmp	.+28     	; 0x4de <vfprintf+0x310>
     4c2:	1e 15       	cp	r17, r14
     4c4:	10 f0       	brcs	.+4      	; 0x4ca <vfprintf+0x2fc>
     4c6:	9d 2c       	mov	r9, r13
     4c8:	0a c0       	rjmp	.+20     	; 0x4de <vfprintf+0x310>
     4ca:	9d 2c       	mov	r9, r13
     4cc:	9e 0c       	add	r9, r14
     4ce:	91 1a       	sub	r9, r17
     4d0:	1e 2d       	mov	r17, r14
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <vfprintf+0x310>
     4d4:	80 e2       	ldi	r24, 0x20	; 32
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	b3 01       	movw	r22, r6
     4da:	5f d0       	rcall	.+190    	; 0x59a <fputc>
     4dc:	1f 5f       	subi	r17, 0xFF	; 255
     4de:	1e 15       	cp	r17, r14
     4e0:	c8 f3       	brcs	.-14     	; 0x4d4 <vfprintf+0x306>
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <vfprintf+0x31e>
     4e4:	1e 15       	cp	r17, r14
     4e6:	10 f4       	brcc	.+4      	; 0x4ec <vfprintf+0x31e>
     4e8:	e1 1a       	sub	r14, r17
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <vfprintf+0x320>
     4ec:	ee 24       	eor	r14, r14
     4ee:	04 ff       	sbrs	r16, 4
     4f0:	0e c0       	rjmp	.+28     	; 0x50e <vfprintf+0x340>
     4f2:	80 e3       	ldi	r24, 0x30	; 48
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	b3 01       	movw	r22, r6
     4f8:	50 d0       	rcall	.+160    	; 0x59a <fputc>
     4fa:	02 ff       	sbrs	r16, 2
     4fc:	1b c0       	rjmp	.+54     	; 0x534 <vfprintf+0x366>
     4fe:	01 fd       	sbrc	r16, 1
     500:	03 c0       	rjmp	.+6      	; 0x508 <vfprintf+0x33a>
     502:	88 e7       	ldi	r24, 0x78	; 120
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e c0       	rjmp	.+28     	; 0x524 <vfprintf+0x356>
     508:	88 e5       	ldi	r24, 0x58	; 88
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0b c0       	rjmp	.+22     	; 0x524 <vfprintf+0x356>
     50e:	80 2f       	mov	r24, r16
     510:	86 78       	andi	r24, 0x86	; 134
     512:	81 f0       	breq	.+32     	; 0x534 <vfprintf+0x366>
     514:	01 ff       	sbrs	r16, 1
     516:	02 c0       	rjmp	.+4      	; 0x51c <vfprintf+0x34e>
     518:	8b e2       	ldi	r24, 0x2B	; 43
     51a:	01 c0       	rjmp	.+2      	; 0x51e <vfprintf+0x350>
     51c:	80 e2       	ldi	r24, 0x20	; 32
     51e:	f7 fc       	sbrc	r15, 7
     520:	8d e2       	ldi	r24, 0x2D	; 45
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	b3 01       	movw	r22, r6
     526:	39 d0       	rcall	.+114    	; 0x59a <fputc>
     528:	05 c0       	rjmp	.+10     	; 0x534 <vfprintf+0x366>
     52a:	80 e3       	ldi	r24, 0x30	; 48
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	b3 01       	movw	r22, r6
     530:	34 d0       	rcall	.+104    	; 0x59a <fputc>
     532:	9a 94       	dec	r9
     534:	d9 14       	cp	r13, r9
     536:	c8 f3       	brcs	.-14     	; 0x52a <vfprintf+0x35c>
     538:	da 94       	dec	r13
     53a:	f1 01       	movw	r30, r2
     53c:	ed 0d       	add	r30, r13
     53e:	f1 1d       	adc	r31, r1
     540:	80 81       	ld	r24, Z
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	b3 01       	movw	r22, r6
     546:	29 d0       	rcall	.+82     	; 0x59a <fputc>
     548:	dd 20       	and	r13, r13
     54a:	b1 f7       	brne	.-20     	; 0x538 <vfprintf+0x36a>
     54c:	05 c0       	rjmp	.+10     	; 0x558 <vfprintf+0x38a>
     54e:	80 e2       	ldi	r24, 0x20	; 32
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	b3 01       	movw	r22, r6
     554:	22 d0       	rcall	.+68     	; 0x59a <fputc>
     556:	ea 94       	dec	r14
     558:	ee 20       	and	r14, r14
     55a:	c9 f7       	brne	.-14     	; 0x54e <vfprintf+0x380>
     55c:	50 ce       	rjmp	.-864    	; 0x1fe <vfprintf+0x30>
     55e:	f3 01       	movw	r30, r6
     560:	66 81       	ldd	r22, Z+6	; 0x06
     562:	77 81       	ldd	r23, Z+7	; 0x07
     564:	cb 01       	movw	r24, r22
     566:	2b 96       	adiw	r28, 0x0b	; 11
     568:	e2 e1       	ldi	r30, 0x12	; 18
     56a:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__epilogue_restores__>

0000056e <strnlen_P>:
     56e:	fc 01       	movw	r30, r24
     570:	05 90       	lpm	r0, Z+
     572:	61 50       	subi	r22, 0x01	; 1
     574:	70 40       	sbci	r23, 0x00	; 0
     576:	01 10       	cpse	r0, r1
     578:	d8 f7       	brcc	.-10     	; 0x570 <strnlen_P+0x2>
     57a:	80 95       	com	r24
     57c:	90 95       	com	r25
     57e:	8e 0f       	add	r24, r30
     580:	9f 1f       	adc	r25, r31
     582:	08 95       	ret

00000584 <strnlen>:
     584:	fc 01       	movw	r30, r24
     586:	61 50       	subi	r22, 0x01	; 1
     588:	70 40       	sbci	r23, 0x00	; 0
     58a:	01 90       	ld	r0, Z+
     58c:	01 10       	cpse	r0, r1
     58e:	d8 f7       	brcc	.-10     	; 0x586 <strnlen+0x2>
     590:	80 95       	com	r24
     592:	90 95       	com	r25
     594:	8e 0f       	add	r24, r30
     596:	9f 1f       	adc	r25, r31
     598:	08 95       	ret

0000059a <fputc>:
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	8c 01       	movw	r16, r24
     5a4:	eb 01       	movw	r28, r22
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	81 ff       	sbrs	r24, 1
     5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <fputc+0x48>
     5ac:	82 ff       	sbrs	r24, 2
     5ae:	0d c0       	rjmp	.+26     	; 0x5ca <fputc+0x30>
     5b0:	2e 81       	ldd	r18, Y+6	; 0x06
     5b2:	3f 81       	ldd	r19, Y+7	; 0x07
     5b4:	8c 81       	ldd	r24, Y+4	; 0x04
     5b6:	9d 81       	ldd	r25, Y+5	; 0x05
     5b8:	28 17       	cp	r18, r24
     5ba:	39 07       	cpc	r19, r25
     5bc:	64 f4       	brge	.+24     	; 0x5d6 <fputc+0x3c>
     5be:	e8 81       	ld	r30, Y
     5c0:	f9 81       	ldd	r31, Y+1	; 0x01
     5c2:	01 93       	st	Z+, r16
     5c4:	f9 83       	std	Y+1, r31	; 0x01
     5c6:	e8 83       	st	Y, r30
     5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <fputc+0x3c>
     5ca:	e8 85       	ldd	r30, Y+8	; 0x08
     5cc:	f9 85       	ldd	r31, Y+9	; 0x09
     5ce:	80 2f       	mov	r24, r16
     5d0:	09 95       	icall
     5d2:	89 2b       	or	r24, r25
     5d4:	31 f4       	brne	.+12     	; 0x5e2 <fputc+0x48>
     5d6:	8e 81       	ldd	r24, Y+6	; 0x06
     5d8:	9f 81       	ldd	r25, Y+7	; 0x07
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	9f 83       	std	Y+7, r25	; 0x07
     5de:	8e 83       	std	Y+6, r24	; 0x06
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <fputc+0x4c>
     5e2:	0f ef       	ldi	r16, 0xFF	; 255
     5e4:	1f ef       	ldi	r17, 0xFF	; 255
     5e6:	c8 01       	movw	r24, r16
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	08 95       	ret

000005f2 <__ultoa_invert>:
     5f2:	fa 01       	movw	r30, r20
     5f4:	aa 27       	eor	r26, r26
     5f6:	28 30       	cpi	r18, 0x08	; 8
     5f8:	51 f1       	breq	.+84     	; 0x64e <__ultoa_invert+0x5c>
     5fa:	20 31       	cpi	r18, 0x10	; 16
     5fc:	81 f1       	breq	.+96     	; 0x65e <__ultoa_invert+0x6c>
     5fe:	e8 94       	clt
     600:	6f 93       	push	r22
     602:	6e 7f       	andi	r22, 0xFE	; 254
     604:	6e 5f       	subi	r22, 0xFE	; 254
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	8f 4f       	sbci	r24, 0xFF	; 255
     60a:	9f 4f       	sbci	r25, 0xFF	; 255
     60c:	af 4f       	sbci	r26, 0xFF	; 255
     60e:	b1 e0       	ldi	r27, 0x01	; 1
     610:	3e d0       	rcall	.+124    	; 0x68e <__ultoa_invert+0x9c>
     612:	b4 e0       	ldi	r27, 0x04	; 4
     614:	3c d0       	rcall	.+120    	; 0x68e <__ultoa_invert+0x9c>
     616:	67 0f       	add	r22, r23
     618:	78 1f       	adc	r23, r24
     61a:	89 1f       	adc	r24, r25
     61c:	9a 1f       	adc	r25, r26
     61e:	a1 1d       	adc	r26, r1
     620:	68 0f       	add	r22, r24
     622:	79 1f       	adc	r23, r25
     624:	8a 1f       	adc	r24, r26
     626:	91 1d       	adc	r25, r1
     628:	a1 1d       	adc	r26, r1
     62a:	6a 0f       	add	r22, r26
     62c:	71 1d       	adc	r23, r1
     62e:	81 1d       	adc	r24, r1
     630:	91 1d       	adc	r25, r1
     632:	a1 1d       	adc	r26, r1
     634:	20 d0       	rcall	.+64     	; 0x676 <__ultoa_invert+0x84>
     636:	09 f4       	brne	.+2      	; 0x63a <__ultoa_invert+0x48>
     638:	68 94       	set
     63a:	3f 91       	pop	r19
     63c:	2a e0       	ldi	r18, 0x0A	; 10
     63e:	26 9f       	mul	r18, r22
     640:	11 24       	eor	r1, r1
     642:	30 19       	sub	r19, r0
     644:	30 5d       	subi	r19, 0xD0	; 208
     646:	31 93       	st	Z+, r19
     648:	de f6       	brtc	.-74     	; 0x600 <__ultoa_invert+0xe>
     64a:	cf 01       	movw	r24, r30
     64c:	08 95       	ret
     64e:	46 2f       	mov	r20, r22
     650:	47 70       	andi	r20, 0x07	; 7
     652:	40 5d       	subi	r20, 0xD0	; 208
     654:	41 93       	st	Z+, r20
     656:	b3 e0       	ldi	r27, 0x03	; 3
     658:	0f d0       	rcall	.+30     	; 0x678 <__ultoa_invert+0x86>
     65a:	c9 f7       	brne	.-14     	; 0x64e <__ultoa_invert+0x5c>
     65c:	f6 cf       	rjmp	.-20     	; 0x64a <__ultoa_invert+0x58>
     65e:	46 2f       	mov	r20, r22
     660:	4f 70       	andi	r20, 0x0F	; 15
     662:	40 5d       	subi	r20, 0xD0	; 208
     664:	4a 33       	cpi	r20, 0x3A	; 58
     666:	18 f0       	brcs	.+6      	; 0x66e <__ultoa_invert+0x7c>
     668:	49 5d       	subi	r20, 0xD9	; 217
     66a:	31 fd       	sbrc	r19, 1
     66c:	40 52       	subi	r20, 0x20	; 32
     66e:	41 93       	st	Z+, r20
     670:	02 d0       	rcall	.+4      	; 0x676 <__ultoa_invert+0x84>
     672:	a9 f7       	brne	.-22     	; 0x65e <__ultoa_invert+0x6c>
     674:	ea cf       	rjmp	.-44     	; 0x64a <__ultoa_invert+0x58>
     676:	b4 e0       	ldi	r27, 0x04	; 4
     678:	a6 95       	lsr	r26
     67a:	97 95       	ror	r25
     67c:	87 95       	ror	r24
     67e:	77 95       	ror	r23
     680:	67 95       	ror	r22
     682:	ba 95       	dec	r27
     684:	c9 f7       	brne	.-14     	; 0x678 <__ultoa_invert+0x86>
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	61 05       	cpc	r22, r1
     68a:	71 05       	cpc	r23, r1
     68c:	08 95       	ret
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	0a 2e       	mov	r0, r26
     694:	06 94       	lsr	r0
     696:	57 95       	ror	r21
     698:	47 95       	ror	r20
     69a:	37 95       	ror	r19
     69c:	27 95       	ror	r18
     69e:	ba 95       	dec	r27
     6a0:	c9 f7       	brne	.-14     	; 0x694 <__ultoa_invert+0xa2>
     6a2:	62 0f       	add	r22, r18
     6a4:	73 1f       	adc	r23, r19
     6a6:	84 1f       	adc	r24, r20
     6a8:	95 1f       	adc	r25, r21
     6aa:	a0 1d       	adc	r26, r0
     6ac:	08 95       	ret

000006ae <_Z41__static_initialization_and_destruction_0ii>:
	}

	checkRadioCommands();
	Serial.flush();
	//shutdown();
}
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	91 05       	cpc	r25, r1
     6b2:	39 f4       	brne	.+14     	; 0x6c2 <_Z41__static_initialization_and_destruction_0ii+0x14>
     6b4:	6f 5f       	subi	r22, 0xFF	; 255
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	69 f4       	brne	.+26     	; 0x6d4 <_Z41__static_initialization_and_destruction_0ii+0x26>
#define VALVE_CONTROL_2_PIN 9			// see above

// Define Global Variables
static char MessageBuffer[256];
static char LogBuffer[LOG_LINE_LENGTH];
File logFile;
     6ba:	8a e5       	ldi	r24, 0x5A	; 90
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <_ZN4FileC1Ev>
     6c2:	89 2b       	or	r24, r25
     6c4:	39 f4       	brne	.+14     	; 0x6d4 <_Z41__static_initialization_and_destruction_0ii+0x26>
     6c6:	6f 5f       	subi	r22, 0xFF	; 255
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <_Z41__static_initialization_and_destruction_0ii+0x26>
     6cc:	8a e5       	ldi	r24, 0x5A	; 90
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <_ZN4FileD1Ev>
     6d4:	08 95       	ret

000006d6 <_GLOBAL__D_logFile>:
	}

	checkRadioCommands();
	Serial.flush();
	//shutdown();
}
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	6f ef       	ldi	r22, 0xFF	; 255
     6dc:	7f ef       	ldi	r23, 0xFF	; 255
     6de:	e7 cf       	rjmp	.-50     	; 0x6ae <_Z41__static_initialization_and_destruction_0ii>

000006e0 <_GLOBAL__I_logFile>:
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	6f ef       	ldi	r22, 0xFF	; 255
     6e6:	7f ef       	ldi	r23, 0xFF	; 255
     6e8:	e2 cf       	rjmp	.-60     	; 0x6ae <_Z41__static_initialization_and_destruction_0ii>

000006ea <_ZL9printTimev>:
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
}

static void printTime()
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	2b 97       	sbiw	r28, 0x0b	; 11
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
	}
}

static uint8_t useDS3234()
{
	if(!SPIFunc)
     702:	80 91 76 02 	lds	r24, 0x0276
     706:	88 23       	and	r24, r24
     708:	41 f0       	breq	.+16     	; 0x71a <_ZL9printTimev+0x30>
	}
}

static void closeLogFile()
{
	logFile.close();
     70a:	8a e5       	ldi	r24, 0x5A	; 90
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <_ZN4File5closeEv>
		return 0;
	}
	else
	{
		closeLogFile();
		SPIFunc = 0;
     712:	10 92 76 02 	sts	0x0276, r1
		DS3234_init(DS3234_SS_PIN);;
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	da d2       	rcall	.+1460   	; 0xcce <_Z11DS3234_inith>
     71a:	8a e0       	ldi	r24, 0x0A	; 10

static void printTime()
{
	ts time;
	useDS3234();
	DS3234_get(DS3234_SS_PIN,&time);
     71c:	be 01       	movw	r22, r28
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	48 d2       	rcall	.+1168   	; 0xbb4 <_Z10DS3234_gethP2ts>
     724:	8d b7       	in	r24, 0x3d	; 61
     726:	9e b7       	in	r25, 0x3e	; 62
	sprintf(MessageBuffer,"%02u/%02u/%4d %02d:%02d:%02d\t",time.mon,time.mday,time.year,time.hour,time.min,time.sec);
     728:	40 97       	sbiw	r24, 0x10	; 16
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	9e bf       	out	0x3e, r25	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	8d bf       	out	0x3d, r24	; 61
     734:	ed b7       	in	r30, 0x3d	; 61
     736:	fe b7       	in	r31, 0x3e	; 62
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	08 e7       	ldi	r16, 0x78	; 120
     73c:	12 e0       	ldi	r17, 0x02	; 2
     73e:	ad b7       	in	r26, 0x3d	; 61
     740:	be b7       	in	r27, 0x3e	; 62
     742:	12 96       	adiw	r26, 0x02	; 2
     744:	1c 93       	st	X, r17
     746:	0e 93       	st	-X, r16
     748:	11 97       	sbiw	r26, 0x01	; 1
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	93 83       	std	Z+3, r25	; 0x03
     750:	82 83       	std	Z+2, r24	; 0x02
     752:	8d 81       	ldd	r24, Y+5	; 0x05
     754:	84 83       	std	Z+4, r24	; 0x04
     756:	15 82       	std	Z+5, r1	; 0x05
     758:	8c 81       	ldd	r24, Y+4	; 0x04
     75a:	86 83       	std	Z+6, r24	; 0x06
     75c:	17 82       	std	Z+7, r1	; 0x07
     75e:	8e 81       	ldd	r24, Y+6	; 0x06
     760:	9f 81       	ldd	r25, Y+7	; 0x07
     762:	91 87       	std	Z+9, r25	; 0x09
     764:	80 87       	std	Z+8, r24	; 0x08
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	82 87       	std	Z+10, r24	; 0x0a
     76a:	13 86       	std	Z+11, r1	; 0x0b
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	84 87       	std	Z+12, r24	; 0x0c
     770:	15 86       	std	Z+13, r1	; 0x0d
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	86 87       	std	Z+14, r24	; 0x0e
     776:	17 86       	std	Z+15, r1	; 0x0f
     778:	07 dd       	rcall	.-1522   	; 0x188 <sprintf>
     77a:	8d b7       	in	r24, 0x3d	; 61
     77c:	9e b7       	in	r25, 0x3e	; 62
     77e:	40 96       	adiw	r24, 0x10	; 16
	Serial.println(MessageBuffer);
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	9e bf       	out	0x3e, r25	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	8d bf       	out	0x3d, r24	; 61
     78a:	83 e5       	ldi	r24, 0x53	; 83
     78c:	96 e0       	ldi	r25, 0x06	; 6
     78e:	b8 01       	movw	r22, r16
     790:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN5Print7printlnEPKc>
     794:	2b 96       	adiw	r28, 0x0b	; 11
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
}
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	cf 91       	pop	r28
     7a2:	df 91       	pop	r29
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <_ZL9openValvev>:
	printTime();
	sprintf(MessageBuffer,"Valve:\tClosed\n");
	return printSerial();
}

static uint8_t openValve()
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
{
	digitalWrite(VALVE_ENABLE_PIN,1);
     7ae:	87 e0       	ldi	r24, 0x07	; 7
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,1);
     7b6:	88 e0       	ldi	r24, 0x08	; 8
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     7be:	89 e0       	ldi	r24, 0x09	; 9
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	delay(5000);
     7c6:	68 e8       	ldi	r22, 0x88	; 136
     7c8:	73 e1       	ldi	r23, 0x13	; 19
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <delay>
	Serial.println(MessageBuffer);
}

static void setValvePos(uint8_t pos)
{
	EEPROM.write(0,pos);
     7d2:	81 e8       	ldi	r24, 0x81	; 129
     7d4:	95 e0       	ldi	r25, 0x05	; 5
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN11EEPROMClass5writeEih>
	digitalWrite(VALVE_ENABLE_PIN,1);
	digitalWrite(VALVE_CONTROL_1_PIN,1);
	digitalWrite(VALVE_CONTROL_2_PIN,0);
	delay(5000);
	setValvePos(1);
	digitalWrite(VALVE_ENABLE_PIN,0);
     7e0:	87 e0       	ldi	r24, 0x07	; 7
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     7e8:	88 e0       	ldi	r24, 0x08	; 8
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	printTime();
     7f0:	7c df       	rcall	.-264    	; 0x6ea <_ZL9printTimev>
     7f2:	08 e7       	ldi	r16, 0x78	; 120
	sprintf(MessageBuffer,"Valve:\tOpened\n");
     7f4:	12 e0       	ldi	r17, 0x02	; 2
     7f6:	c8 01       	movw	r24, r16
     7f8:	6e e1       	ldi	r22, 0x1E	; 30
     7fa:	71 e0       	ldi	r23, 0x01	; 1
     7fc:	af dc       	rcall	.-1698   	; 0x15c <strcpy>
     7fe:	83 e5       	ldi	r24, 0x53	; 83
     800:	96 e0       	ldi	r25, 0x06	; 6
	}
}

static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     802:	b8 01       	movw	r22, r16
     804:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN5Print5printEPKc>
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
	digitalWrite(VALVE_ENABLE_PIN,0);
	digitalWrite(VALVE_CONTROL_1_PIN,0);
	printTime();
	sprintf(MessageBuffer,"Valve:\tOpened\n");
	return printSerial();
}
     80c:	08 95       	ret

0000080e <_ZL10closeValvev>:
static uint8_t wasLeakDetected()
{
	return EEPROM.read(1);
}

static uint8_t closeValve()
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
{
	digitalWrite(VALVE_ENABLE_PIN,1);
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     81a:	88 e0       	ldi	r24, 0x08	; 8
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,1);
     822:	89 e0       	ldi	r24, 0x09	; 9
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	delay(5000);
     82a:	68 e8       	ldi	r22, 0x88	; 136
     82c:	73 e1       	ldi	r23, 0x13	; 19
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <delay>
	Serial.println(MessageBuffer);
}

static void setValvePos(uint8_t pos)
{
	EEPROM.write(0,pos);
     836:	81 e8       	ldi	r24, 0x81	; 129
     838:	95 e0       	ldi	r25, 0x05	; 5
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN11EEPROMClass5writeEih>
	digitalWrite(VALVE_ENABLE_PIN,1);
	digitalWrite(VALVE_CONTROL_1_PIN,0);
	digitalWrite(VALVE_CONTROL_2_PIN,1);
	delay(5000);
	setValvePos(0);
	digitalWrite(VALVE_ENABLE_PIN,0);
     844:	87 e0       	ldi	r24, 0x07	; 7
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     84c:	89 e0       	ldi	r24, 0x09	; 9
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	printTime();
     854:	4a df       	rcall	.-364    	; 0x6ea <_ZL9printTimev>
     856:	08 e7       	ldi	r16, 0x78	; 120
	sprintf(MessageBuffer,"Valve:\tClosed\n");
     858:	12 e0       	ldi	r17, 0x02	; 2
     85a:	c8 01       	movw	r24, r16
     85c:	6d e2       	ldi	r22, 0x2D	; 45
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	7d dc       	rcall	.-1798   	; 0x15c <strcpy>
     862:	83 e5       	ldi	r24, 0x53	; 83
     864:	96 e0       	ldi	r25, 0x06	; 6
	}
}

static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     866:	b8 01       	movw	r22, r16
     868:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN5Print5printEPKc>
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
	digitalWrite(VALVE_ENABLE_PIN,0);
	digitalWrite(VALVE_CONTROL_2_PIN,0);
	printTime();
	sprintf(MessageBuffer,"Valve:\tClosed\n");
	return printSerial();
}
     870:	08 95       	ret

00000872 <_ZL10reportLeakv>:
	*/
}

static uint8_t reportLeak()
{
	printTime();
     872:	3b df       	rcall	.-394    	; 0x6ea <_ZL9printTimev>
     874:	81 e8       	ldi	r24, 0x81	; 129
	return EEPROM.read(0);
}

static uint8_t wasLeakDetected()
{
	return EEPROM.read(1);
     876:	95 e0       	ldi	r25, 0x05	; 5
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11EEPROMClass4readEi>
     880:	81 30       	cpi	r24, 0x01	; 1
}

static uint8_t reportLeak()
{
	printTime();
	switch (wasLeakDetected())
     882:	51 f0       	breq	.+20     	; 0x898 <_ZL10reportLeakv+0x26>
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	18 f0       	brcs	.+6      	; 0x88e <_ZL10reportLeakv+0x1c>
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	81 f4       	brne	.+32     	; 0x8ac <_ZL10reportLeakv+0x3a>
     88c:	0a c0       	rjmp	.+20     	; 0x8a2 <_ZL10reportLeakv+0x30>
     88e:	88 e7       	ldi	r24, 0x78	; 120
	{
		case 0:
			sprintf(MessageBuffer,"Leak:\tNo leaks detected.\n");
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	6c e3       	ldi	r22, 0x3C	; 60
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	09 c0       	rjmp	.+18     	; 0x8aa <_ZL10reportLeakv+0x38>
     898:	88 e7       	ldi	r24, 0x78	; 120
			break;
		case 1:
			sprintf(MessageBuffer,"Leak:\tPossible leak detected: More than 1000 gallons used in a 24 hour period.\n");
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	66 e5       	ldi	r22, 0x56	; 86
     89e:	71 e0       	ldi	r23, 0x01	; 1
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <_ZL10reportLeakv+0x38>
     8a2:	88 e7       	ldi	r24, 0x78	; 120
			break;
		case 2:
			sprintf(MessageBuffer,"Leak:\tPossible leak detected: Flow rate >=1 GMP for 120 consecutive minutes.\n");
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	66 ea       	ldi	r22, 0xA6	; 166
     8a8:	71 e0       	ldi	r23, 0x01	; 1
     8aa:	58 dc       	rcall	.-1872   	; 0x15c <strcpy>
     8ac:	83 e5       	ldi	r24, 0x53	; 83
     8ae:	96 e0       	ldi	r25, 0x06	; 6
	}
}

static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     8b0:	68 e7       	ldi	r22, 0x78	; 120
     8b2:	72 e0       	ldi	r23, 0x02	; 2
     8b4:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <_ZN5Print5printEPKc>

000008b8 <_ZL8clearLogv>:
static void setConsecGallons(uint8_t gals)
{
	EEPROM.write(5,gals);
}

static uint8_t clearLog()					// TODO: rewrite for multiple month logs
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	6b 97       	sbiw	r28, 0x1b	; 27
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
	logFile.close();
}

static uint8_t useSD()
{
	if(SPIFunc)
     8cc:	80 91 76 02 	lds	r24, 0x0276
     8d0:	88 23       	and	r24, r24
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <_ZL8clearLogv+0x1e>
     8d4:	4a c0       	rjmp	.+148    	; 0x96a <__stack+0x6b>
	{
		return 0;
	}
	else
	{
		DS3234_end();
     8d6:	f0 d1       	rcall	.+992    	; 0xcb8 <_Z10DS3234_endv>
     8d8:	81 e0       	ldi	r24, 0x01	; 1
		SPIFunc = 1;
     8da:	80 93 76 02 	sts	0x0276, r24
     8de:	82 e8       	ldi	r24, 0x82	; 130
uint8_t leak, SPIFunc, interruptNo;

// Define Program Functions
static uint8_t openLogFile()						// TODO: set this up to create new logs every month
{
	if(!SD.begin(4))
     8e0:	95 e0       	ldi	r25, 0x05	; 5
     8e2:	64 e0       	ldi	r22, 0x04	; 4
     8e4:	0e 94 93 1a 	call	0x3526	; 0x3526 <_ZN7SDClass5beginEh>
     8e8:	88 23       	and	r24, r24
     8ea:	09 f4       	brne	.+2      	; 0x8ee <_ZL8clearLogv+0x36>
     8ec:	3e c0       	rjmp	.+124    	; 0x96a <__stack+0x6b>
     8ee:	ce 01       	movw	r24, r28
	{
		return 1;		// SD card error
	}
	logFile = SD.open("log.txt",FILE_WRITE);
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	62 e8       	ldi	r22, 0x82	; 130
     8f4:	75 e0       	ldi	r23, 0x05	; 5
     8f6:	44 ef       	ldi	r20, 0xF4	; 244
     8f8:	51 e0       	ldi	r21, 0x01	; 1
     8fa:	23 e1       	ldi	r18, 0x13	; 19
     8fc:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_ZN7SDClass4openEPKch>
     900:	8b 81       	ldd	r24, Y+3	; 0x03
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	90 93 5d 02 	sts	0x025D, r25
     908:	80 93 5c 02 	sts	0x025C, r24
     90c:	8d 81       	ldd	r24, Y+5	; 0x05
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
{
     90e:	9e 81       	ldd	r25, Y+6	; 0x06
     910:	af 81       	ldd	r26, Y+7	; 0x07
     912:	b8 85       	ldd	r27, Y+8	; 0x08
     914:	80 93 5e 02 	sts	0x025E, r24
     918:	90 93 5f 02 	sts	0x025F, r25
     91c:	a0 93 60 02 	sts	0x0260, r26
     920:	b0 93 61 02 	sts	0x0261, r27
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	9a 85       	ldd	r25, Y+10	; 0x0a
     928:	ab 85       	ldd	r26, Y+11	; 0x0b
     92a:	bc 85       	ldd	r27, Y+12	; 0x0c
     92c:	80 93 62 02 	sts	0x0262, r24
     930:	90 93 63 02 	sts	0x0263, r25
     934:	a0 93 64 02 	sts	0x0264, r26
     938:	b0 93 65 02 	sts	0x0265, r27
     93c:	a6 e6       	ldi	r26, 0x66	; 102
#include <utility/SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
     93e:	b2 e0       	ldi	r27, 0x02	; 2
     940:	fe 01       	movw	r30, r28
     942:	3d 96       	adiw	r30, 0x0d	; 13
     944:	8d e0       	ldi	r24, 0x0D	; 13
     946:	01 90       	ld	r0, Z+
     948:	0d 92       	st	X+, r0
     94a:	81 50       	subi	r24, 0x01	; 1
     94c:	e1 f7       	brne	.-8      	; 0x946 <__stack+0x47>
     94e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     950:	9b 8d       	ldd	r25, Y+27	; 0x1b
     952:	90 93 74 02 	sts	0x0274, r25
     956:	80 93 73 02 	sts	0x0273, r24
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN4FileD1Ev>
     962:	8a e5       	ldi	r24, 0x5A	; 90
	if(logFile)
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN4FilecvbEv>
     96a:	8a e5       	ldi	r24, 0x5A	; 90
	}
}

static void closeLogFile()
{
	logFile.close();
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <_ZN4File5closeEv>
     972:	82 e8       	ldi	r24, 0x82	; 130

static uint8_t clearLog()					// TODO: rewrite for multiple month logs
{
	useSD();
	closeLogFile();
	if(SD.exists("log.txt"))
     974:	95 e0       	ldi	r25, 0x05	; 5
     976:	64 ef       	ldi	r22, 0xF4	; 244
     978:	71 e0       	ldi	r23, 0x01	; 1
     97a:	0e 94 4a 18 	call	0x3094	; 0x3094 <_ZN7SDClass6existsEPc>
     97e:	88 23       	and	r24, r24
     980:	31 f0       	breq	.+12     	; 0x98e <__stack+0x8f>
     982:	82 e8       	ldi	r24, 0x82	; 130
	{
		SD.remove("log.txt");
     984:	95 e0       	ldi	r25, 0x05	; 5
     986:	64 ef       	ldi	r22, 0xF4	; 244
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	0e 94 40 18 	call	0x3080	; 0x3080 <_ZN7SDClass6removeEPc>
     98e:	6b 96       	adiw	r28, 0x1b	; 27
	}
}
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	08 95       	ret

000009a0 <_ZL11resetSystemv>:

static uint8_t resetSystem()
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
{
	openValve();
     9a4:	02 df       	rcall	.-508    	; 0x7aa <_ZL9openValvev>
     9a6:	88 df       	rcall	.-240    	; 0x8b8 <_ZL8clearLogv>
	clearLog();
     9a8:	01 e8       	ldi	r16, 0x81	; 129
     9aa:	15 e0       	ldi	r17, 0x05	; 5
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     9ac:	c8 01       	movw	r24, r16
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN11EEPROMClass5writeEih>
     9b8:	c8 01       	movw	r24, r16
     9ba:	63 e0       	ldi	r22, 0x03	; 3

static void setDayGallons(uint16_t DayGallons)
{
	uint8_t splitByte;
	splitByte = DayGallons/256;
	EEPROM.write(3,splitByte);
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN11EEPROMClass5writeEih>
     9c4:	c8 01       	movw	r24, r16
     9c6:	64 e0       	ldi	r22, 0x04	; 4
	DayGallons -= (uint32_t)(splitByte)*256;
	splitByte = DayGallons;
	EEPROM.write(4,DayGallons);
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN11EEPROMClass5writeEih>
     9d0:	c8 01       	movw	r24, r16
     9d2:	65 e0       	ldi	r22, 0x05	; 5
	return EEPROM.read(5);
}

static void setConsecGallons(uint8_t gals)
{
	EEPROM.write(5,gals);
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN11EEPROMClass5writeEih>
     9dc:	86 de       	rcall	.-756    	; 0x6ea <_ZL9printTimev>
     9de:	08 e7       	ldi	r16, 0x78	; 120
	openValve();
	clearLog();
	setLeakCondition(0);
	setDayGallons(0);
	setConsecGallons(0);
	printTime();
     9e0:	12 e0       	ldi	r17, 0x02	; 2
     9e2:	c8 01       	movw	r24, r16
	sprintf(MessageBuffer,"System Reset\n");
     9e4:	6c ef       	ldi	r22, 0xFC	; 252
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	b9 db       	rcall	.-2190   	; 0x15c <strcpy>
     9ea:	83 e5       	ldi	r24, 0x53	; 83
     9ec:	96 e0       	ldi	r25, 0x06	; 6
     9ee:	b8 01       	movw	r22, r16
     9f0:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN5Print5printEPKc>
	}
}

static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <loop>:
}

void loop()
{
	// TODO: fix logical control
	if (digitalRead(RST_PIN))
     9fa:	86 e0       	ldi	r24, 0x06	; 6
     9fc:	0e 94 43 20 	call	0x4086	; 0x4086 <digitalRead>
     a00:	89 2b       	or	r24, r25
     a02:	09 f0       	breq	.+2      	; 0xa06 <loop+0xc>
	{
		// manually reset system if INPUT 1 is held
		resetSystem();
     a04:	cd df       	rcall	.-102    	; 0x9a0 <_ZL11resetSystemv>
     a06:	82 e0       	ldi	r24, 0x02	; 2
	}

	if (digitalRead(RADIO_PIN))
     a08:	0e 94 43 20 	call	0x4086	; 0x4086 <digitalRead>
     a0c:	89 2b       	or	r24, r25
     a0e:	e1 f4       	brne	.+56     	; 0xa48 <loop+0x4e>
     a10:	83 e0       	ldi	r24, 0x03	; 3
		reportLog();
		reportLeak();
		clearLog();
	}

	else if (digitalRead(METER_PIN))
     a12:	0e 94 43 20 	call	0x4086	; 0x4086 <digitalRead>
     a16:	89 2b       	or	r24, r25
     a18:	09 f4       	brne	.+2      	; 0xa1c <loop+0x22>
     a1a:	61 c0       	rjmp	.+194    	; 0xade <loop+0xe4>
     a1c:	81 e8       	ldi	r24, 0x81	; 129
	return EEPROM.read(0);
}

static uint8_t wasLeakDetected()
{
	return EEPROM.read(1);
     a1e:	95 e0       	ldi	r25, 0x05	; 5
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11EEPROMClass4readEi>
     a28:	88 23       	and	r24, r24

	else if (digitalRead(METER_PIN))
	{
		logGallon();
		// check if a leak was previously detected
		if (wasLeakDetected()==0)
     a2a:	09 f0       	breq	.+2      	; 0xa2e <loop+0x34>
     a2c:	58 c0       	rjmp	.+176    	; 0xade <loop+0xe4>
     a2e:	40 e0       	ldi	r20, 0x00	; 0
		{
			// if a new leak is detected, log it, report it, and turn off the valve
			leak = checkForLeaks();
     a30:	40 93 75 02 	sts	0x0275, r20
     a34:	44 23       	and	r20, r20
			if (leak!=0)
     a36:	09 f4       	brne	.+2      	; 0xa3a <loop+0x40>
     a38:	52 c0       	rjmp	.+164    	; 0xade <loop+0xe4>
     a3a:	81 e8       	ldi	r24, 0x81	; 129
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     a3c:	95 e0       	ldi	r25, 0x05	; 5
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN11EEPROMClass5writeEih>
     a46:	e3 de       	rcall	.-570    	; 0x80e <_ZL10closeValvev>
			// if a new leak is detected, log it, report it, and turn off the valve
			leak = checkForLeaks();
			if (leak!=0)
			{
				setLeakCondition(leak);
				closeValve();
     a48:	14 df       	rcall	.-472    	; 0x872 <_ZL10reportLeakv>
     a4a:	36 df       	rcall	.-404    	; 0x8b8 <_ZL8clearLogv>
				reportLog();
				reportLeak();
     a4c:	48 c0       	rjmp	.+144    	; 0xade <loop+0xe4>
     a4e:	83 e5       	ldi	r24, 0x53	; 83
				clearLog();
     a50:	96 e0       	ldi	r25, 0x06	; 6
     a52:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <_ZN14HardwareSerial4readEv>

static void checkRadioCommands()
{
	while(Serial.available())
	{
		processRadio(Serial.read());
     a56:	8f 36       	cpi	r24, 0x6F	; 111
     a58:	a9 f0       	breq	.+42     	; 0xa84 <loop+0x8a>
     a5a:	80 37       	cpi	r24, 0x70	; 112
     a5c:	40 f4       	brcc	.+16     	; 0xa6e <loop+0x74>
	return printSerial();
}

static void processRadio(uint8_t Signal)
{
	switch (Signal)
     a5e:	8b 36       	cpi	r24, 0x6B	; 107
     a60:	59 f1       	breq	.+86     	; 0xab8 <loop+0xbe>
     a62:	8c 36       	cpi	r24, 0x6C	; 108
     a64:	89 f0       	breq	.+34     	; 0xa88 <loop+0x8e>
     a66:	83 36       	cpi	r24, 0x63	; 99
     a68:	09 f0       	breq	.+2      	; 0xa6c <loop+0x72>
     a6a:	39 c0       	rjmp	.+114    	; 0xade <loop+0xe4>
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <loop+0x86>
     a6e:	82 37       	cpi	r24, 0x72	; 114
     a70:	29 f0       	breq	.+10     	; 0xa7c <loop+0x82>
     a72:	86 37       	cpi	r24, 0x76	; 118
     a74:	59 f0       	breq	.+22     	; 0xa8c <loop+0x92>
     a76:	81 37       	cpi	r24, 0x71	; 113
     a78:	91 f5       	brne	.+100    	; 0xade <loop+0xe4>
     a7a:	e7 cf       	rjmp	.-50     	; 0xa4a <loop+0x50>
     a7c:	91 df       	rcall	.-222    	; 0x9a0 <_ZL11resetSystemv>
     a7e:	2f c0       	rjmp	.+94     	; 0xade <loop+0xe4>
     a80:	c6 de       	rcall	.-628    	; 0x80e <_ZL10closeValvev>
     a82:	2d c0       	rjmp	.+90     	; 0xade <loop+0xe4>
	{
		case 'r':
			resetSystem();
     a84:	92 de       	rcall	.-732    	; 0x7aa <_ZL9openValvev>
     a86:	2b c0       	rjmp	.+86     	; 0xade <loop+0xe4>
     a88:	f4 de       	rcall	.-536    	; 0x872 <_ZL10reportLeakv>
			break;
		case 'c':
			closeValve();
     a8a:	29 c0       	rjmp	.+82     	; 0xade <loop+0xe4>
     a8c:	2e de       	rcall	.-932    	; 0x6ea <_ZL9printTimev>
     a8e:	81 e8       	ldi	r24, 0x81	; 129
			break;
		case 'o':
			openValve();
     a90:	95 e0       	ldi	r25, 0x05	; 5
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
			break;
		case 'l':
			reportLeak();
     a96:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11EEPROMClass4readEi>
     a9a:	88 23       	and	r24, r24
	return printSerial();
}

static uint8_t reportValve()
{
	printTime();
     a9c:	19 f0       	breq	.+6      	; 0xaa4 <loop+0xaa>
     a9e:	81 30       	cpi	r24, 0x01	; 1
	EEPROM.write(1,cond);
}

static uint8_t isValveOpen()
{
	return EEPROM.read(0);
     aa0:	c1 f4       	brne	.+48     	; 0xad2 <loop+0xd8>
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <loop+0xb4>
     aa4:	88 e7       	ldi	r24, 0x78	; 120
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	6d e2       	ldi	r22, 0x2D	; 45
     aaa:	71 e0       	ldi	r23, 0x01	; 1
}

static uint8_t reportValve()
{
	printTime();
	switch (isValveOpen())
     aac:	11 c0       	rjmp	.+34     	; 0xad0 <loop+0xd6>
     aae:	88 e7       	ldi	r24, 0x78	; 120
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	6a e0       	ldi	r22, 0x0A	; 10
     ab4:	72 e0       	ldi	r23, 0x02	; 2
	{
	case 0:
		sprintf(MessageBuffer,"Valve:\tClosed\n");
     ab6:	0c c0       	rjmp	.+24     	; 0xad0 <loop+0xd6>
     ab8:	81 e8       	ldi	r24, 0x81	; 129
     aba:	95 e0       	ldi	r25, 0x05	; 5
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	70 e0       	ldi	r23, 0x00	; 0
		break;
	case 1:
		sprintf(MessageBuffer,"Valve:\tOpen\n");
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN11EEPROMClass5writeEih>
     ac6:	11 de       	rcall	.-990    	; 0x6ea <_ZL9printTimev>
     ac8:	88 e7       	ldi	r24, 0x78	; 120
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	67 e1       	ldi	r22, 0x17	; 23
     ace:	72 e0       	ldi	r23, 0x02	; 2
     ad0:	45 db       	rcall	.-2422   	; 0x15c <strcpy>
     ad2:	83 e5       	ldi	r24, 0x53	; 83
     ad4:	96 e0       	ldi	r25, 0x06	; 6
     ad6:	68 e7       	ldi	r22, 0x78	; 120
}

static uint8_t clearLeak()
{
	setLeakCondition(0);
	printTime();
     ad8:	72 e0       	ldi	r23, 0x02	; 2
     ada:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN5Print5printEPKc>
	sprintf(MessageBuffer,"Leak:\tCleared\n");
     ade:	83 e5       	ldi	r24, 0x53	; 83
     ae0:	96 e0       	ldi	r25, 0x06	; 6
     ae2:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <_ZN14HardwareSerial9availableEv>
     ae6:	89 2b       	or	r24, r25
	}
}

static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     ae8:	09 f0       	breq	.+2      	; 0xaec <loop+0xf2>
     aea:	b1 cf       	rjmp	.-158    	; 0xa4e <loop+0x54>
     aec:	83 e5       	ldi	r24, 0x53	; 83
     aee:	96 e0       	ldi	r25, 0x06	; 6
     af0:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <_ZN14HardwareSerial5flushEv>

00000af4 <setup>:

// Runtime functions
void setup()
{
	// Initialize Pins
	pinMode(VALVE_ENABLE_PIN,OUTPUT);
     af4:	87 e0       	ldi	r24, 0x07	; 7
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
	pinMode(VALVE_CONTROL_1_PIN,OUTPUT);
     afc:	88 e0       	ldi	r24, 0x08	; 8
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
	pinMode(VALVE_CONTROL_2_PIN,OUTPUT);
     b04:	89 e0       	ldi	r24, 0x09	; 9
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
	pinMode(SD_SS_PIN,OUTPUT);
     b0c:	84 e0       	ldi	r24, 0x04	; 4
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
	pinMode(DS3234_SS_PIN,OUTPUT);
     b14:	8a e0       	ldi	r24, 0x0A	; 10
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>

	pinMode(RADIO_PIN,INPUT);
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
	pinMode(METER_PIN,INPUT);
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>

	digitalWrite(VALVE_ENABLE_PIN,0);
     b2c:	87 e0       	ldi	r24, 0x07	; 7
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     b3c:	89 e0       	ldi	r24, 0x09	; 9
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(SD_SS_PIN,1);
     b44:	84 e0       	ldi	r24, 0x04	; 4
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
	digitalWrite(DS3234_SS_PIN,1);
     b4c:	8a e0       	ldi	r24, 0x0A	; 10
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>

	pinMode(RST_PIN,INPUT_PULLUP);
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>

	// Initialize SPI Communication
	DS3234_init(DS3234_SS_PIN);
     b5c:	8a e0       	ldi	r24, 0x0A	; 10
     b5e:	b7 d0       	rcall	.+366    	; 0xcce <_Z11DS3234_inith>
     b60:	10 92 76 02 	sts	0x0276, r1
	SPIFunc = 0;
     b64:	83 e5       	ldi	r24, 0x53	; 83

	// Initialize Radio Communication
	Serial.begin(9600,SERIAL_8N1);
     b66:	96 e0       	ldi	r25, 0x06	; 6
     b68:	40 e8       	ldi	r20, 0x80	; 128
     b6a:	55 e2       	ldi	r21, 0x25	; 37
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	26 e0       	ldi	r18, 0x06	; 6
     b72:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN14HardwareSerial5beginEmh>
     b76:	83 e5       	ldi	r24, 0x53	; 83
	while(!Serial){;}
     b78:	96 e0       	ldi	r25, 0x06	; 6
     b7a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <_ZN14HardwareSerialcvbEv>
     b7e:	88 23       	and	r24, r24
     b80:	d1 f3       	breq	.-12     	; 0xb76 <setup+0x82>
     b82:	10 92 75 02 	sts	0x0275, r1

	// Set Global Variables
	leak = 0;
     b86:	10 92 77 02 	sts	0x0277, r1
	interruptNo = 0;
     b8a:	08 95       	ret

00000b8c <__vector_6>:
* Description: Watchdog Timer interrupt service routine. This routine is 
*		           required to allow automatic WDIF and WDIE bit clearance in 
*			         hardware.
*
*******************************************************************************/
ISR (WDT_vect)
     b8c:	1f 92       	push	r1
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	8f 93       	push	r24
{
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
     b98:	88 e1       	ldi	r24, 0x18	; 24
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	80 93 60 00 	sts	0x0060, r24
     ba2:	10 92 60 00 	sts	0x0060, r1
     ba6:	0f be       	out	0x3f, r0	; 63
}
     ba8:	8f 91       	pop	r24
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <_Z10DS3234_gethP2ts>:
            SPI.transfer(dectobcd(TimeDate[i]));
        digitalWrite(pin, HIGH);
    }
}

void DS3234_get(const uint8_t pin, struct ts *t)
     bb4:	9f 92       	push	r9
     bb6:	af 92       	push	r10
     bb8:	bf 92       	push	r11
     bba:	cf 92       	push	r12
     bbc:	df 92       	push	r13
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	27 97       	sbiw	r28, 0x07	; 7
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	a8 2e       	mov	r10, r24
     bdc:	8b 01       	movw	r16, r22
     bde:	6e 01       	movw	r12, r28
     be0:	08 94       	sec
     be2:	c1 1c       	adc	r12, r1
     be4:	d1 1c       	adc	r13, r1
     be6:	bb 24       	eor	r11, r11
     be8:	ee 24       	eor	r14, r14
        digitalWrite(pin, HIGH);
        if (i == 5) {           // month address also contains the century on bit7
            TimeDate[5] = bcdtodec(n & 0x1F);
            century = (n & 0x80) >> 7;
        } else {
            TimeDate[i] = bcdtodec(n);
     bea:	2a e0       	ldi	r18, 0x0A	; 10
     bec:	92 2e       	mov	r9, r18
    uint8_t century = 0;
    uint8_t i, n;
    uint16_t year_full;

    for (i = 0; i <= 6; i++) {
        digitalWrite(pin, LOW);
     bee:	8a 2d       	mov	r24, r10
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     bf6:	ee bc       	out	0x2e, r14	; 46
  while (!(SPSR & _BV(SPIF)))
     bf8:	0d b4       	in	r0, 0x2d	; 45
     bfa:	07 fe       	sbrs	r0, 7
     bfc:	fd cf       	rjmp	.-6      	; 0xbf8 <_Z10DS3234_gethP2ts+0x44>
    ;
  return SPDR;
     bfe:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     c00:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
     c02:	0d b4       	in	r0, 0x2d	; 45
     c04:	07 fe       	sbrs	r0, 7
     c06:	fd cf       	rjmp	.-6      	; 0xc02 <_Z10DS3234_gethP2ts+0x4e>
    ;
  return SPDR;
     c08:	fe b4       	in	r15, 0x2e	; 46
        SPI.transfer(i + 0x00);
        n = SPI.transfer(0x00);
        digitalWrite(pin, HIGH);
     c0a:	8a 2d       	mov	r24, r10
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
     c12:	2f 2d       	mov	r18, r15
     c14:	2f 70       	andi	r18, 0x0F	; 15
        if (i == 5) {           // month address also contains the century on bit7
     c16:	85 e0       	ldi	r24, 0x05	; 5
     c18:	e8 16       	cp	r14, r24
     c1a:	71 f4       	brne	.+28     	; 0xc38 <_Z10DS3234_gethP2ts+0x84>
            TimeDate[5] = bcdtodec(n & 0x1F);
     c1c:	8f 2d       	mov	r24, r15
     c1e:	8f 71       	andi	r24, 0x1F	; 31
     c20:	82 95       	swap	r24
     c22:	8f 70       	andi	r24, 0x0F	; 15
     c24:	89 9d       	mul	r24, r9
     c26:	c0 01       	movw	r24, r0
     c28:	11 24       	eor	r1, r1
     c2a:	28 0f       	add	r18, r24
     c2c:	2e 83       	std	Y+6, r18	; 0x06
            century = (n & 0x80) >> 7;
     c2e:	bf 2c       	mov	r11, r15
     c30:	bb 1c       	adc	r11, r11
     c32:	bb 24       	eor	r11, r11
     c34:	bb 1c       	adc	r11, r11
     c36:	09 c0       	rjmp	.+18     	; 0xc4a <_Z10DS3234_gethP2ts+0x96>
        } else {
            TimeDate[i] = bcdtodec(n);
     c38:	f2 94       	swap	r15
     c3a:	9f e0       	ldi	r25, 0x0F	; 15
     c3c:	f9 22       	and	r15, r25
     c3e:	f9 9c       	mul	r15, r9
     c40:	c0 01       	movw	r24, r0
     c42:	11 24       	eor	r1, r1
     c44:	28 0f       	add	r18, r24
     c46:	f6 01       	movw	r30, r12
     c48:	20 83       	st	Z, r18
    uint8_t TimeDate[7];        //second,minute,hour,dow,day,month,year
    uint8_t century = 0;
    uint8_t i, n;
    uint16_t year_full;

    for (i = 0; i <= 6; i++) {
     c4a:	e3 94       	inc	r14
     c4c:	08 94       	sec
     c4e:	c1 1c       	adc	r12, r1
     c50:	d1 1c       	adc	r13, r1
     c52:	f7 e0       	ldi	r31, 0x07	; 7
     c54:	ef 16       	cp	r14, r31
     c56:	59 f6       	brne	.-106    	; 0xbee <_Z10DS3234_gethP2ts+0x3a>
     c58:	8f 81       	ldd	r24, Y+7	; 0x07
        } else {
            TimeDate[i] = bcdtodec(n);
        }
    }

    if (century == 1)
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	b9 16       	cp	r11, r25
     c5e:	29 f4       	brne	.+10     	; 0xc6a <_Z10DS3234_gethP2ts+0xb6>
        year_full = 2000 + TimeDate[6];
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	20 53       	subi	r18, 0x30	; 48
     c66:	38 4f       	sbci	r19, 0xF8	; 248
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <_Z10DS3234_gethP2ts+0xbe>
    else
        year_full = 1900 + TimeDate[6];
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	24 59       	subi	r18, 0x94	; 148
     c70:	38 4f       	sbci	r19, 0xF8	; 248

    t->sec = TimeDate[0];
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	f8 01       	movw	r30, r16
     c76:	80 83       	st	Z, r24
    t->min = TimeDate[1];
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	81 83       	std	Z+1, r24	; 0x01
    t->hour = TimeDate[2];
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	82 83       	std	Z+2, r24	; 0x02
    t->mday = TimeDate[4];
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	83 83       	std	Z+3, r24	; 0x03
    t->mon = TimeDate[5];
     c84:	8e 81       	ldd	r24, Y+6	; 0x06
     c86:	84 83       	std	Z+4, r24	; 0x04
    t->year = year_full;
     c88:	36 83       	std	Z+6, r19	; 0x06
     c8a:	25 83       	std	Z+5, r18	; 0x05
    t->wday = TimeDate[3];
     c8c:	8c 81       	ldd	r24, Y+4	; 0x04
     c8e:	87 83       	std	Z+7, r24	; 0x07
    t->year_s = TimeDate[6];
     c90:	8f 81       	ldd	r24, Y+7	; 0x07
     c92:	82 87       	std	Z+10, r24	; 0x0a
}
     c94:	27 96       	adiw	r28, 0x07	; 7
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	9f 90       	pop	r9
     cb6:	08 95       	ret

00000cb8 <_Z10DS3234_endv>:
    // TODO: add error handling/reporting for if SPI fails to initialize
}

void DS3234_end()
{
	SPI.setDataMode(SPI_MODE0);
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN8SPIClass11setDataModeEh>
	SPI.end();
     cbe:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <_ZN8SPIClass3endEv>
	delay(10);
     cc2:	6a e0       	ldi	r22, 0x0A	; 10
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <delay>

00000cce <_Z11DS3234_inith>:
bit0 A1IE   Alarm1 interrupt enable (1 to enable)
*/

void DS3234_init(const uint8_t pin)
{
    pinMode(pin, OUTPUT);       // chip select pin
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
    SPI.begin();
     cd4:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZN8SPIClass5beginEv>
    SPI.setBitOrder(MSBFIRST);
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE1);
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN8SPIClass11setDataModeEh>
    delay(10);
     ce4:	6a e0       	ldi	r22, 0x0A	; 10
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <delay>

00000cf0 <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
     cf0:	fc 01       	movw	r30, r24
  if (sckRateID > 6) {
     cf2:	67 30       	cpi	r22, 0x07	; 7
     cf4:	20 f0       	brcs	.+8      	; 0xcfe <_ZN7Sd2Card10setSckRateEh+0xe>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
     cf6:	86 e1       	ldi	r24, 0x16	; 22
     cf8:	85 83       	std	Z+5, r24	; 0x05
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	08 95       	ret
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
  }
  // see avr processor datasheet for SPI register bit definitions
  if ((sckRateID & 1) || sckRateID == 6) {
     cfe:	26 2f       	mov	r18, r22
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	60 fd       	sbrc	r22, 0
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <_ZN7Sd2Card10setSckRateEh+0x1a>
     d06:	66 30       	cpi	r22, 0x06	; 6
     d08:	19 f4       	brne	.+6      	; 0xd10 <_ZN7Sd2Card10setSckRateEh+0x20>
    SPSR &= ~(1 << SPI2X);
     d0a:	8d b5       	in	r24, 0x2d	; 45
     d0c:	8e 7f       	andi	r24, 0xFE	; 254
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <_ZN7Sd2Card10setSckRateEh+0x24>
  } else {
    SPSR |= (1 << SPI2X);
     d10:	8d b5       	in	r24, 0x2d	; 45
     d12:	81 60       	ori	r24, 0x01	; 1
     d14:	8d bd       	out	0x2d, r24	; 45
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
     d16:	8c b5       	in	r24, 0x2c	; 44
     d18:	8c 7f       	andi	r24, 0xFC	; 252
     d1a:	8c bd       	out	0x2c, r24	; 44
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
     d1c:	4c b5       	in	r20, 0x2c	; 44
     d1e:	22 fd       	sbrc	r18, 2
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <_ZN7Sd2Card10setSckRateEh+0x36>
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <_ZN7Sd2Card10setSckRateEh+0x38>
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	36 95       	lsr	r19
     d2a:	27 95       	ror	r18
     d2c:	82 2f       	mov	r24, r18
     d2e:	81 70       	andi	r24, 0x01	; 1
     d30:	84 2b       	or	r24, r20
     d32:	89 2b       	or	r24, r25
     d34:	8c bd       	out	0x2c, r24	; 44
     d36:	81 e0       	ldi	r24, 0x01	; 1
  return true;
}
     d38:	08 95       	ret

00000d3a <_ZN7Sd2Card11waitNotBusyEj>:
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	8b 01       	movw	r16, r22
  uint16_t t0 = millis();
     d46:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <millis>
     d4a:	eb 01       	movw	r28, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     d4c:	ff 24       	eor	r15, r15
     d4e:	fa 94       	dec	r15
     d50:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
     d52:	0d b4       	in	r0, 0x2d	; 45
     d54:	07 fe       	sbrs	r0, 7
     d56:	fd cf       	rjmp	.-6      	; 0xd52 <_ZN7Sd2Card11waitNotBusyEj+0x18>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     d58:	8e b5       	in	r24, 0x2e	; 46
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
     d5a:	8f 3f       	cpi	r24, 0xFF	; 255
     d5c:	11 f4       	brne	.+4      	; 0xd62 <_ZN7Sd2Card11waitNotBusyEj+0x28>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	08 c0       	rjmp	.+16     	; 0xd72 <_ZN7Sd2Card11waitNotBusyEj+0x38>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
     d62:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <millis>
     d66:	6c 1b       	sub	r22, r28
     d68:	7d 0b       	sbc	r23, r29
     d6a:	60 17       	cp	r22, r16
     d6c:	71 07       	cpc	r23, r17
     d6e:	80 f3       	brcs	.-32     	; 0xd50 <_ZN7Sd2Card11waitNotBusyEj+0x16>
     d70:	80 e0       	ldi	r24, 0x00	; 0
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	08 95       	ret

00000d7e <_ZN7Sd2Card13chipSelectLowEv>:
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
  digitalWrite(chipSelectPin_, LOW);
     d7e:	fc 01       	movw	r30, r24
     d80:	84 81       	ldd	r24, Z+4	; 0x04
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <digitalWrite>

00000d88 <_ZN7Sd2Card14chipSelectHighEv>:
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
     d88:	fc 01       	movw	r30, r24
     d8a:	84 81       	ldd	r24, Z+4	; 0x04
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <digitalWrite>

00000d92 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
     d92:	dc 01       	movw	r26, r24
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
     d94:	6e bd       	out	0x2e, r22	; 46
     d96:	fa 01       	movw	r30, r20
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
     d9c:	0d b4       	in	r0, 0x2d	; 45
     d9e:	07 fe       	sbrs	r0, 7
     da0:	fd cf       	rjmp	.-6      	; 0xd9c <_ZN7Sd2Card9writeDataEhPKh+0xa>
    SPDR = src[i];
     da2:	80 81       	ld	r24, Z
     da4:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     da6:	0d b4       	in	r0, 0x2d	; 45
     da8:	07 fe       	sbrs	r0, 7
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <_ZN7Sd2Card9writeDataEhPKh+0x14>
    SPDR = src[i+1];
     dac:	81 81       	ldd	r24, Z+1	; 0x01
     dae:	8e bd       	out	0x2e, r24	; 46

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
     db0:	2e 5f       	subi	r18, 0xFE	; 254
     db2:	3f 4f       	sbci	r19, 0xFF	; 255
     db4:	32 96       	adiw	r30, 0x02	; 2
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	38 07       	cpc	r19, r24
     dbc:	79 f7       	brne	.-34     	; 0xd9c <_ZN7Sd2Card9writeDataEhPKh+0xa>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
     dbe:	0d b4       	in	r0, 0x2d	; 45
     dc0:	07 fe       	sbrs	r0, 7
     dc2:	fd cf       	rjmp	.-6      	; 0xdbe <_ZN7Sd2Card9writeDataEhPKh+0x2c>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     dc8:	0d b4       	in	r0, 0x2d	; 45
     dca:	07 fe       	sbrs	r0, 7
     dcc:	fd cf       	rjmp	.-6      	; 0xdc8 <_ZN7Sd2Card9writeDataEhPKh+0x36>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     dce:	8f ef       	ldi	r24, 0xFF	; 255
     dd0:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     dd2:	0d b4       	in	r0, 0x2d	; 45
     dd4:	07 fe       	sbrs	r0, 7
     dd6:	fd cf       	rjmp	.-6      	; 0xdd2 <_ZN7Sd2Card9writeDataEhPKh+0x40>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     ddc:	0d b4       	in	r0, 0x2d	; 45
     dde:	07 fe       	sbrs	r0, 7
     de0:	fd cf       	rjmp	.-6      	; 0xddc <_ZN7Sd2Card9writeDataEhPKh+0x4a>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     de2:	8e b5       	in	r24, 0x2e	; 46
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
     de4:	1a 96       	adiw	r26, 0x0a	; 10
     de6:	8c 93       	st	X, r24
     de8:	1a 97       	sbiw	r26, 0x0a	; 10
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
     dea:	8f 71       	andi	r24, 0x1F	; 31
     dec:	85 30       	cpi	r24, 0x05	; 5
     dee:	11 f4       	brne	.+4      	; 0xdf4 <_ZN7Sd2Card9writeDataEhPKh+0x62>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	08 95       	ret
     df4:	81 e1       	ldi	r24, 0x11	; 17
     df6:	15 96       	adiw	r26, 0x05	; 5
     df8:	8c 93       	st	X, r24
     dfa:	15 97       	sbiw	r26, 0x05	; 5
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
     dfc:	cd 01       	movw	r24, r26
     dfe:	c4 df       	rcall	.-120    	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	08 95       	ret

00000e04 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
     e04:	ff 92       	push	r15
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
     e10:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <millis>
     e14:	8b 01       	movw	r16, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     e16:	ff 24       	eor	r15, r15
     e18:	fa 94       	dec	r15
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <_ZN7Sd2Card14waitStartBlockEv+0x2a>
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
     e1c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <millis>
     e20:	60 1b       	sub	r22, r16
     e22:	71 0b       	sbc	r23, r17
     e24:	6d 52       	subi	r22, 0x2D	; 45
     e26:	71 40       	sbci	r23, 0x01	; 1
     e28:	10 f0       	brcs	.+4      	; 0xe2e <_ZN7Sd2Card14waitStartBlockEv+0x2a>
     e2a:	8f e0       	ldi	r24, 0x0F	; 15
     e2c:	0d c0       	rjmp	.+26     	; 0xe48 <_ZN7Sd2Card14waitStartBlockEv+0x44>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     e2e:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
     e30:	0d b4       	in	r0, 0x2d	; 45
     e32:	07 fe       	sbrs	r0, 7
     e34:	fd cf       	rjmp	.-6      	; 0xe30 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     e36:	8e b5       	in	r24, 0x2e	; 46
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
     e38:	8a 87       	std	Y+10, r24	; 0x0a
     e3a:	8f 3f       	cpi	r24, 0xFF	; 255
     e3c:	79 f3       	breq	.-34     	; 0xe1c <_ZN7Sd2Card14waitStartBlockEv+0x18>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
     e3e:	8e 3f       	cpi	r24, 0xFE	; 254
     e40:	11 f4       	brne	.+4      	; 0xe46 <_ZN7Sd2Card14waitStartBlockEv+0x42>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <_ZN7Sd2Card14waitStartBlockEv+0x4c>
     e46:	8d e0       	ldi	r24, 0x0D	; 13
     e48:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
     e4a:	ce 01       	movw	r24, r28
     e4c:	9d df       	rcall	.-198    	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	df 91       	pop	r29
  return false;
}
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	08 95       	ret

00000e5c <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ec 01       	movw	r28, r24
  if (inBlock_) {
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	88 23       	and	r24, r24
     e66:	c9 f0       	breq	.+50     	; 0xe9a <_ZN7Sd2Card7readEndEv+0x3e>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	8e bd       	out	0x2e, r24	; 46
     e6c:	2f 81       	ldd	r18, Y+7	; 0x07
     e6e:	38 85       	ldd	r19, Y+8	; 0x08
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
     e70:	4f ef       	ldi	r20, 0xFF	; 255
     e72:	04 c0       	rjmp	.+8      	; 0xe7c <_ZN7Sd2Card7readEndEv+0x20>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
     e74:	0d b4       	in	r0, 0x2d	; 45
     e76:	07 fe       	sbrs	r0, 7
     e78:	fd cf       	rjmp	.-6      	; 0xe74 <_ZN7Sd2Card7readEndEv+0x18>
      SPDR = 0XFF;
     e7a:	4e bd       	out	0x2e, r20	; 46
     e7c:	2f 5f       	subi	r18, 0xFF	; 255
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
     e80:	c9 01       	movw	r24, r18
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	92 40       	sbci	r25, 0x02	; 2
     e88:	a8 f3       	brcs	.-22     	; 0xe74 <_ZN7Sd2Card7readEndEv+0x18>
     e8a:	38 87       	std	Y+8, r19	; 0x08
     e8c:	2f 83       	std	Y+7, r18	; 0x07
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
     e8e:	0d b4       	in	r0, 0x2d	; 45
     e90:	07 fe       	sbrs	r0, 7
     e92:	fd cf       	rjmp	.-6      	; 0xe8e <_ZN7Sd2Card7readEndEv+0x32>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
     e94:	ce 01       	movw	r24, r28
     e96:	78 df       	rcall	.-272    	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
     e98:	1e 82       	std	Y+6, r1	; 0x06
    inBlock_ = 0;
     e9a:	df 91       	pop	r29
  }
}
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
     eb0:	d6 2e       	mov	r13, r22
     eb2:	79 01       	movw	r14, r18
     eb4:	8a 01       	movw	r16, r20
  // end read if in partialBlockRead mode
  readEnd();
     eb6:	d2 df       	rcall	.-92     	; 0xe5c <_ZN7Sd2Card7readEndEv>
     eb8:	ce 01       	movw	r24, r28

  // select card
  chipSelectLow();
     eba:	61 df       	rcall	.-318    	; 0xd7e <_ZN7Sd2Card13chipSelectLowEv>
     ebc:	ce 01       	movw	r24, r28
     ebe:	6c e2       	ldi	r22, 0x2C	; 44

  // wait up to 300 ms if busy
  waitNotBusy(300);
     ec0:	71 e0       	ldi	r23, 0x01	; 1
     ec2:	3b df       	rcall	.-394    	; 0xd3a <_ZN7Sd2Card11waitNotBusyEj>
     ec4:	8d 2d       	mov	r24, r13
     ec6:	80 64       	ori	r24, 0x40	; 64
     ec8:	8e bd       	out	0x2e, r24	; 46

  // send command
  spiSend(cmd | 0x40);
     eca:	0d b4       	in	r0, 0x2d	; 45
     ecc:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     ece:	fd cf       	rjmp	.-6      	; 0xeca <_ZN7Sd2Card11cardCommandEhm+0x2a>
  while (!(SPSR & (1 << SPIF)));
     ed0:	28 e1       	ldi	r18, 0x18	; 24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	d8 01       	movw	r26, r16
     ed6:	c7 01       	movw	r24, r14
     ed8:	02 2e       	mov	r0, r18

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <_ZN7Sd2Card11cardCommandEhm+0x44>
     edc:	b6 95       	lsr	r27
     ede:	a7 95       	ror	r26
     ee0:	97 95       	ror	r25
     ee2:	87 95       	ror	r24
     ee4:	0a 94       	dec	r0
     ee6:	d2 f7       	brpl	.-12     	; 0xedc <_ZN7Sd2Card11cardCommandEhm+0x3c>
     ee8:	8e bd       	out	0x2e, r24	; 46
     eea:	0d b4       	in	r0, 0x2d	; 45
     eec:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     eee:	fd cf       	rjmp	.-6      	; 0xeea <_ZN7Sd2Card11cardCommandEhm+0x4a>
  while (!(SPSR & (1 << SPIF)));
     ef0:	28 50       	subi	r18, 0x08	; 8
     ef2:	30 40       	sbci	r19, 0x00	; 0
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	28 3f       	cpi	r18, 0xF8	; 248
     ef8:	38 07       	cpc	r19, r24

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     efa:	61 f7       	brne	.-40     	; 0xed4 <_ZN7Sd2Card11cardCommandEhm+0x34>
     efc:	dd 20       	and	r13, r13
     efe:	11 f4       	brne	.+4      	; 0xf04 <_ZN7Sd2Card11cardCommandEhm+0x64>
     f00:	85 e9       	ldi	r24, 0x95	; 149

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     f02:	06 c0       	rjmp	.+12     	; 0xf10 <_ZN7Sd2Card11cardCommandEhm+0x70>
     f04:	88 e0       	ldi	r24, 0x08	; 8
     f06:	d8 16       	cp	r13, r24
     f08:	11 f4       	brne	.+4      	; 0xf0e <_ZN7Sd2Card11cardCommandEhm+0x6e>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
     f0a:	87 e8       	ldi	r24, 0x87	; 135
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <_ZN7Sd2Card11cardCommandEhm+0x70>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	8e bd       	out	0x2e, r24	; 46
     f12:	0d b4       	in	r0, 0x2d	; 45
     f14:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     f16:	fd cf       	rjmp	.-6      	; 0xf12 <_ZN7Sd2Card11cardCommandEhm+0x72>
  while (!(SPSR & (1 << SPIF)));
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	2f ef       	ldi	r18, 0xFF	; 255
     f1c:	2e bd       	out	0x2e, r18	; 46
     f1e:	0d b4       	in	r0, 0x2d	; 45
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     f20:	07 fe       	sbrs	r0, 7
     f22:	fd cf       	rjmp	.-6      	; 0xf1e <_ZN7Sd2Card11cardCommandEhm+0x7e>
  while (!(SPSR & (1 << SPIF)));
     f24:	8e b5       	in	r24, 0x2e	; 46
     f26:	87 ff       	sbrs	r24, 7
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <_ZN7Sd2Card11cardCommandEhm+0x8e>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     f2a:	91 50       	subi	r25, 0x01	; 1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
     f2c:	b9 f7       	brne	.-18     	; 0xf1c <_ZN7Sd2Card11cardCommandEhm+0x7c>
     f2e:	8a 87       	std	Y+10, r24	; 0x0a
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
  return status_;
}
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	08 95       	ret

00000f40 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ec 01       	movw	r28, r24
     f52:	7a 01       	movw	r14, r20
     f54:	8b 01       	movw	r16, r22
     f56:	69 01       	movw	r12, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
     f58:	41 15       	cp	r20, r1
     f5a:	51 05       	cpc	r21, r1
     f5c:	61 05       	cpc	r22, r1
     f5e:	71 05       	cpc	r23, r1
     f60:	11 f4       	brne	.+4      	; 0xf66 <_ZN7Sd2Card10writeBlockEmPKh+0x26>
     f62:	82 e1       	ldi	r24, 0x12	; 18
     f64:	33 c0       	rjmp	.+102    	; 0xfcc <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
     f66:	8b 85       	ldd	r24, Y+11	; 0x0b
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	39 f0       	breq	.+14     	; 0xf7a <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
     f6c:	29 e0       	ldi	r18, 0x09	; 9
     f6e:	ee 0c       	add	r14, r14
     f70:	ff 1c       	adc	r15, r15
     f72:	00 1f       	adc	r16, r16
     f74:	11 1f       	adc	r17, r17
     f76:	2a 95       	dec	r18
     f78:	d1 f7       	brne	.-12     	; 0xf6e <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
  if (cardCommand(CMD24, blockNumber)) {
     f7a:	ce 01       	movw	r24, r28
     f7c:	68 e1       	ldi	r22, 0x18	; 24
     f7e:	a8 01       	movw	r20, r16
     f80:	97 01       	movw	r18, r14
     f82:	8e df       	rcall	.-228    	; 0xea0 <_ZN7Sd2Card11cardCommandEhm>
     f84:	88 23       	and	r24, r24
     f86:	11 f0       	breq	.+4      	; 0xf8c <_ZN7Sd2Card10writeBlockEmPKh+0x4c>
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	20 c0       	rjmp	.+64     	; 0xfcc <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
     f8c:	ce 01       	movw	r24, r28
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
     f8e:	6e ef       	ldi	r22, 0xFE	; 254
     f90:	a6 01       	movw	r20, r12
     f92:	ff de       	rcall	.-514    	; 0xd92 <_ZN7Sd2Card9writeDataEhPKh>
     f94:	88 23       	and	r24, r24
     f96:	d9 f0       	breq	.+54     	; 0xfce <_ZN7Sd2Card10writeBlockEmPKh+0x8e>
     f98:	ce 01       	movw	r24, r28
     f9a:	68 e5       	ldi	r22, 0x58	; 88

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
     f9c:	72 e0       	ldi	r23, 0x02	; 2
     f9e:	cd de       	rcall	.-614    	; 0xd3a <_ZN7Sd2Card11waitNotBusyEj>
     fa0:	88 23       	and	r24, r24
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <_ZN7Sd2Card10writeBlockEmPKh+0x68>
     fa4:	85 e1       	ldi	r24, 0x15	; 21
     fa6:	12 c0       	rjmp	.+36     	; 0xfcc <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
     fa8:	ce 01       	movw	r24, r28
     faa:	6d e0       	ldi	r22, 0x0D	; 13
     fac:	20 e0       	ldi	r18, 0x00	; 0
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	75 df       	rcall	.-278    	; 0xea0 <_ZN7Sd2Card11cardCommandEhm>
     fb6:	88 23       	and	r24, r24
     fb8:	41 f4       	brne	.+16     	; 0xfca <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	8e bd       	out	0x2e, r24	; 46
     fbe:	0d b4       	in	r0, 0x2d	; 45
     fc0:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     fc2:	fd cf       	rjmp	.-6      	; 0xfbe <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
     fc4:	8e b5       	in	r24, 0x2e	; 46
  while (!(SPSR & (1 << SPIF)));
     fc6:	88 23       	and	r24, r24
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <_ZN7Sd2Card10writeBlockEmPKh+0xa6>
     fca:	84 e1       	ldi	r24, 0x14	; 20
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	ce 01       	movw	r24, r28
     fd0:	db de       	rcall	.-586    	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	df 91       	pop	r29
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
  return false;
}
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	08 95       	ret
     fe6:	ce 01       	movw	r24, r28
     fe8:	cf de       	rcall	.-610    	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	f3 cf       	rjmp	.-26     	; 0xfd4 <_ZN7Sd2Card10writeBlockEmPKh+0x94>

00000fee <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	ec 01       	movw	r28, r24
    1008:	5a 01       	movw	r10, r20
    100a:	6b 01       	movw	r12, r22
    100c:	49 01       	movw	r8, r18
  uint16_t n;
  if (count == 0) return true;
    100e:	01 15       	cp	r16, r1
    1010:	11 05       	cpc	r17, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <_ZN7Sd2Card8readDataEmjjPh+0x28>
    1014:	77 c0       	rjmp	.+238    	; 0x1104 <_ZN7Sd2Card8readDataEmjjPh+0x116>
  if ((count + offset) > 512) {
    1016:	c8 01       	movw	r24, r16
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	81 50       	subi	r24, 0x01	; 1
    101e:	92 40       	sbci	r25, 0x02	; 2
    1020:	08 f0       	brcs	.+2      	; 0x1024 <_ZN7Sd2Card8readDataEmjjPh+0x36>
    1022:	6c c0       	rjmp	.+216    	; 0x10fc <_ZN7Sd2Card8readDataEmjjPh+0x10e>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    1024:	8e 81       	ldd	r24, Y+6	; 0x06
    1026:	88 23       	and	r24, r24
    1028:	71 f0       	breq	.+28     	; 0x1046 <_ZN7Sd2Card8readDataEmjjPh+0x58>
    102a:	88 81       	ld	r24, Y
    102c:	99 81       	ldd	r25, Y+1	; 0x01
    102e:	aa 81       	ldd	r26, Y+2	; 0x02
    1030:	bb 81       	ldd	r27, Y+3	; 0x03
    1032:	48 17       	cp	r20, r24
    1034:	59 07       	cpc	r21, r25
    1036:	6a 07       	cpc	r22, r26
    1038:	7b 07       	cpc	r23, r27
    103a:	29 f4       	brne	.+10     	; 0x1046 <_ZN7Sd2Card8readDataEmjjPh+0x58>
    103c:	8f 81       	ldd	r24, Y+7	; 0x07
    103e:	98 85       	ldd	r25, Y+8	; 0x08
    1040:	88 16       	cp	r8, r24
    1042:	99 06       	cpc	r9, r25
    1044:	08 f5       	brcc	.+66     	; 0x1088 <_ZN7Sd2Card8readDataEmjjPh+0x9a>
    block_ = block;
    1046:	a8 82       	st	Y, r10
    1048:	b9 82       	std	Y+1, r11	; 0x01
    104a:	ca 82       	std	Y+2, r12	; 0x02
    104c:	db 82       	std	Y+3, r13	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    104e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1050:	83 30       	cpi	r24, 0x03	; 3
    1052:	39 f0       	breq	.+14     	; 0x1062 <_ZN7Sd2Card8readDataEmjjPh+0x74>
    1054:	69 e0       	ldi	r22, 0x09	; 9
    1056:	aa 0c       	add	r10, r10
    1058:	bb 1c       	adc	r11, r11
    105a:	cc 1c       	adc	r12, r12
    105c:	dd 1c       	adc	r13, r13
    105e:	6a 95       	dec	r22
    1060:	d1 f7       	brne	.-12     	; 0x1056 <_ZN7Sd2Card8readDataEmjjPh+0x68>
    if (cardCommand(CMD17, block)) {
    1062:	ce 01       	movw	r24, r28
    1064:	61 e1       	ldi	r22, 0x11	; 17
    1066:	a6 01       	movw	r20, r12
    1068:	95 01       	movw	r18, r10
    106a:	1a df       	rcall	.-460    	; 0xea0 <_ZN7Sd2Card11cardCommandEhm>
    106c:	88 23       	and	r24, r24
    106e:	19 f0       	breq	.+6      	; 0x1076 <_ZN7Sd2Card8readDataEmjjPh+0x88>
    1070:	83 e0       	ldi	r24, 0x03	; 3
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	43 c0       	rjmp	.+134    	; 0x10fc <_ZN7Sd2Card8readDataEmjjPh+0x10e>
    1076:	ce 01       	movw	r24, r28
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    1078:	c5 de       	rcall	.-630    	; 0xe04 <_ZN7Sd2Card14waitStartBlockEv>
    107a:	88 23       	and	r24, r24
    107c:	09 f4       	brne	.+2      	; 0x1080 <_ZN7Sd2Card8readDataEmjjPh+0x92>
    107e:	3e c0       	rjmp	.+124    	; 0x10fc <_ZN7Sd2Card8readDataEmjjPh+0x10e>
    1080:	18 86       	std	Y+8, r1	; 0x08
    1082:	1f 82       	std	Y+7, r1	; 0x07
      goto fail;
    }
    offset_ = 0;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	8e 83       	std	Y+6, r24	; 0x06
    inBlock_ = 1;
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	8e bd       	out	0x2e, r24	; 46
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
    108c:	8f 81       	ldd	r24, Y+7	; 0x07
    108e:	98 85       	ldd	r25, Y+8	; 0x08
    1090:	2f ef       	ldi	r18, 0xFF	; 255
    1092:	05 c0       	rjmp	.+10     	; 0x109e <_ZN7Sd2Card8readDataEmjjPh+0xb0>

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
    1094:	0d b4       	in	r0, 0x2d	; 45
    1096:	07 fe       	sbrs	r0, 7
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    1098:	fd cf       	rjmp	.-6      	; 0x1094 <_ZN7Sd2Card8readDataEmjjPh+0xa6>
    109a:	2e bd       	out	0x2e, r18	; 46
    109c:	01 96       	adiw	r24, 0x01	; 1
    SPDR = 0XFF;
    109e:	88 15       	cp	r24, r8
    10a0:	99 05       	cpc	r25, r9
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    10a2:	c0 f3       	brcs	.-16     	; 0x1094 <_ZN7Sd2Card8readDataEmjjPh+0xa6>
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	8f 83       	std	Y+7, r24	; 0x07
    10a8:	d8 01       	movw	r26, r16
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	9f ef       	ldi	r25, 0xFF	; 255
    10b2:	0b c0       	rjmp	.+22     	; 0x10ca <_ZN7Sd2Card8readDataEmjjPh+0xdc>
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
    10b4:	0d b4       	in	r0, 0x2d	; 45
    10b6:	07 fe       	sbrs	r0, 7
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
    10b8:	fd cf       	rjmp	.-6      	; 0x10b4 <_ZN7Sd2Card8readDataEmjjPh+0xc6>
    10ba:	8e b5       	in	r24, 0x2e	; 46
    10bc:	f7 01       	movw	r30, r14
    dst[i] = SPDR;
    10be:	e2 0f       	add	r30, r18
    10c0:	f3 1f       	adc	r31, r19
    10c2:	80 83       	st	Z, r24
    10c4:	9e bd       	out	0x2e, r25	; 46
    10c6:	2f 5f       	subi	r18, 0xFF	; 255
    SPDR = 0XFF;
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    10ca:	2a 17       	cp	r18, r26
    10cc:	3b 07       	cpc	r19, r27
    10ce:	90 f3       	brcs	.-28     	; 0x10b4 <_ZN7Sd2Card8readDataEmjjPh+0xc6>
    10d0:	0d b4       	in	r0, 0x2d	; 45
    10d2:	07 fe       	sbrs	r0, 7
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
    10d4:	fd cf       	rjmp	.-6      	; 0x10d0 <_ZN7Sd2Card8readDataEmjjPh+0xe2>
    10d6:	8e b5       	in	r24, 0x2e	; 46
    10d8:	ae 0d       	add	r26, r14
  dst[n] = SPDR;
    10da:	bf 1d       	adc	r27, r15
    10dc:	8c 93       	st	X, r24
    10de:	2f 81       	ldd	r18, Y+7	; 0x07
    10e0:	38 85       	ldd	r19, Y+8	; 0x08
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    10e2:	20 0f       	add	r18, r16
    10e4:	31 1f       	adc	r19, r17
    10e6:	38 87       	std	Y+8, r19	; 0x08
    10e8:	2f 83       	std	Y+7, r18	; 0x07
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	88 23       	and	r24, r24
  if (!partialBlockRead_ || offset_ >= 512) {
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <_ZN7Sd2Card8readDataEmjjPh+0x108>
    10f0:	20 50       	subi	r18, 0x00	; 0
    10f2:	32 40       	sbci	r19, 0x02	; 2
    10f4:	38 f0       	brcs	.+14     	; 0x1104 <_ZN7Sd2Card8readDataEmjjPh+0x116>
    10f6:	ce 01       	movw	r24, r28
    10f8:	b1 de       	rcall	.-670    	; 0xe5c <_ZN7Sd2Card7readEndEv>
    // read rest of data, checksum and set chip select high
    readEnd();
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <_ZN7Sd2Card8readDataEmjjPh+0x116>
    10fc:	ce 01       	movw	r24, r28
    10fe:	44 de       	rcall	.-888    	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
    1100:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  chipSelectHigh();
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <_ZN7Sd2Card8readDataEmjjPh+0x118>
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
  return false;
    110c:	0f 91       	pop	r16
}
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	9f 90       	pop	r9
    111c:	8f 90       	pop	r8
    111e:	08 95       	ret

00001120 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	79 01       	movw	r14, r18
  return readData(block, 0, 512, dst);
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	00 e0       	ldi	r16, 0x00	; 0
    1130:	12 e0       	ldi	r17, 0x02	; 2
    1132:	5d df       	rcall	.-326    	; 0xfee <_ZN7Sd2Card8readDataEmjjPh>
    1134:	1f 91       	pop	r17
}
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	08 95       	ret

0000113e <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	ec 01       	movw	r28, r24
    1152:	b6 2e       	mov	r11, r22
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    1154:	1b 86       	std	Y+11, r1	; 0x0b
    1156:	19 86       	std	Y+9, r1	; 0x09
    1158:	1e 82       	std	Y+6, r1	; 0x06
    115a:	1d 82       	std	Y+5, r1	; 0x05
  chipSelectPin_ = chipSelectPin;
    115c:	4c 83       	std	Y+4, r20	; 0x04
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    115e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <millis>
    1162:	6b 01       	movw	r12, r22
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
  chipSelectHigh();
    116c:	ce 01       	movw	r24, r28
    116e:	0c de       	rcall	.-1000   	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
    1170:	8c e0       	ldi	r24, 0x0C	; 12
  pinMode(SPI_MISO_PIN, INPUT);
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
    1178:	8b e0       	ldi	r24, 0x0B	; 11
  pinMode(SPI_MOSI_PIN, OUTPUT);
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
    1180:	8d e0       	ldi	r24, 0x0D	; 13
  pinMode(SPI_SCK_PIN, OUTPUT);
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
    1188:	8a e0       	ldi	r24, 0x0A	; 10

#ifndef SOFTWARE_SPI
  // SS must be in output mode even it is not chip select
  pinMode(SS_PIN, OUTPUT);
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <pinMode>
    1190:	8a e0       	ldi	r24, 0x0A	; 10
  digitalWrite(SS_PIN, HIGH); // disable any SPI device using hardware SS pin
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <digitalWrite>
    1198:	83 e5       	ldi	r24, 0x53	; 83
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    119a:	8c bd       	out	0x2c, r24	; 44
    119c:	8d b5       	in	r24, 0x2d	; 45
  // clear double speed
  SPSR &= ~(1 << SPI2X);
    119e:	8e 7f       	andi	r24, 0xFE	; 254
    11a0:	8d bd       	out	0x2d, r24	; 45
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    11a6:	9e bd       	out	0x2e, r25	; 46
    11a8:	0d b4       	in	r0, 0x2d	; 45
  while (!(SPSR & (1 << SPIF)));
    11aa:	07 fe       	sbrs	r0, 7
    11ac:	fd cf       	rjmp	.-6      	; 0x11a8 <_ZN7Sd2Card4initEhh+0x6a>
    11ae:	8f 5f       	subi	r24, 0xFF	; 255
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#endif  // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    11b0:	8a 30       	cpi	r24, 0x0A	; 10
    11b2:	c9 f7       	brne	.-14     	; 0x11a6 <_ZN7Sd2Card4initEhh+0x68>
    11b4:	ce 01       	movw	r24, r28

  chipSelectLow();
    11b6:	e3 dd       	rcall	.-1082   	; 0xd7e <_ZN7Sd2Card13chipSelectLowEv>
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <_ZN7Sd2Card4initEhh+0x8e>
    11ba:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <millis>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    11be:	6c 19       	sub	r22, r12
    11c0:	7d 09       	sbc	r23, r13
    11c2:	61 5d       	subi	r22, 0xD1	; 209
    11c4:	77 40       	sbci	r23, 0x07	; 7
    11c6:	10 f0       	brcs	.+4      	; 0x11cc <_ZN7Sd2Card4initEhh+0x8e>
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	59 c0       	rjmp	.+178    	; 0x127e <_ZN7Sd2Card4initEhh+0x140>
    11cc:	ce 01       	movw	r24, r28
    11ce:	60 e0       	ldi	r22, 0x00	; 0
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);

  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	63 de       	rcall	.-826    	; 0xea0 <_ZN7Sd2Card11cardCommandEhm>
    11da:	18 2f       	mov	r17, r24
    11dc:	8a 87       	std	Y+10, r24	; 0x0a
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	61 f7       	brne	.-40     	; 0x11ba <_ZN7Sd2Card4initEhh+0x7c>
    11e2:	ce 01       	movw	r24, r28
    11e4:	68 e0       	ldi	r22, 0x08	; 8
    11e6:	2a ea       	ldi	r18, 0xAA	; 170
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    11e8:	31 e0       	ldi	r19, 0x01	; 1
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	58 de       	rcall	.-848    	; 0xea0 <_ZN7Sd2Card11cardCommandEhm>
    11f0:	82 ff       	sbrs	r24, 2
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <_ZN7Sd2Card4initEhh+0xba>
    11f4:	1b 87       	std	Y+11, r17	; 0x0b
    11f6:	11 c0       	rjmp	.+34     	; 0x121a <_ZN7Sd2Card4initEhh+0xdc>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	2f ef       	ldi	r18, 0xFF	; 255
    11fc:	2e bd       	out	0x2e, r18	; 46
    11fe:	0d b4       	in	r0, 0x2d	; 45
    1200:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1202:	fd cf       	rjmp	.-6      	; 0x11fe <_ZN7Sd2Card4initEhh+0xc0>
    1204:	9e b5       	in	r25, 0x2e	; 46
  while (!(SPSR & (1 << SPIF)));
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	c1 f7       	brne	.-16     	; 0x11fc <_ZN7Sd2Card4initEhh+0xbe>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    120c:	9a 87       	std	Y+10, r25	; 0x0a
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    120e:	9a 3a       	cpi	r25, 0xAA	; 170
    1210:	11 f0       	breq	.+4      	; 0x1216 <_ZN7Sd2Card4initEhh+0xd8>
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	34 c0       	rjmp	.+104    	; 0x127e <_ZN7Sd2Card4initEhh+0x140>
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	8b 87       	std	Y+11, r24	; 0x0b
    121a:	8b 85       	ldd	r24, Y+11	; 0x0b
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	21 f0       	breq	.+8      	; 0x1228 <_ZN7Sd2Card4initEhh+0xea>
    1220:	ee 24       	eor	r14, r14
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    1222:	ff 24       	eor	r15, r15
    1224:	87 01       	movw	r16, r14
    1226:	0f c0       	rjmp	.+30     	; 0x1246 <_ZN7Sd2Card4initEhh+0x108>
    1228:	e1 2c       	mov	r14, r1
    122a:	f1 2c       	mov	r15, r1
    122c:	01 2d       	mov	r16, r1
    122e:	f0 e4       	ldi	r31, 0x40	; 64
    1230:	1f 2f       	mov	r17, r31
    1232:	09 c0       	rjmp	.+18     	; 0x1246 <_ZN7Sd2Card4initEhh+0x108>
    1234:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <millis>
    1238:	6c 19       	sub	r22, r12
    123a:	7d 09       	sbc	r23, r13

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    123c:	61 5d       	subi	r22, 0xD1	; 209
    123e:	77 40       	sbci	r23, 0x07	; 7
    1240:	10 f0       	brcs	.+4      	; 0x1246 <_ZN7Sd2Card4initEhh+0x108>
    1242:	88 e0       	ldi	r24, 0x08	; 8
    1244:	1c c0       	rjmp	.+56     	; 0x127e <_ZN7Sd2Card4initEhh+0x140>
    1246:	ce 01       	movw	r24, r28
    1248:	67 e3       	ldi	r22, 0x37	; 55
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	26 de       	rcall	.-948    	; 0xea0 <_ZN7Sd2Card11cardCommandEhm>
    1254:	ce 01       	movw	r24, r28
    1256:	69 e2       	ldi	r22, 0x29	; 41
    1258:	a8 01       	movw	r20, r16
    125a:	97 01       	movw	r18, r14
    125c:	21 de       	rcall	.-958    	; 0xea0 <_ZN7Sd2Card11cardCommandEhm>
    125e:	8a 87       	std	Y+10, r24	; 0x0a
    1260:	88 23       	and	r24, r24
    1262:	41 f7       	brne	.-48     	; 0x1234 <_ZN7Sd2Card4initEhh+0xf6>
    1264:	8b 85       	ldd	r24, Y+11	; 0x0b
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	21 f5       	brne	.+72     	; 0x12b2 <_ZN7Sd2Card4initEhh+0x174>
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    126a:	ce 01       	movw	r24, r28
    126c:	6a e3       	ldi	r22, 0x3A	; 58
    126e:	20 e0       	ldi	r18, 0x00	; 0
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    if (cardCommand(CMD58, 0)) {
    1276:	14 de       	rcall	.-984    	; 0xea0 <_ZN7Sd2Card11cardCommandEhm>
    1278:	88 23       	and	r24, r24
    127a:	31 f0       	breq	.+12     	; 0x1288 <_ZN7Sd2Card4initEhh+0x14a>
    127c:	86 e0       	ldi	r24, 0x06	; 6
    127e:	8d 83       	std	Y+5, r24	; 0x05
    1280:	ce 01       	movw	r24, r28
    1282:	82 dd       	rcall	.-1276   	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	1a c0       	rjmp	.+52     	; 0x12bc <_ZN7Sd2Card4initEhh+0x17e>
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	8e bd       	out	0x2e, r24	; 46
    128c:	0d b4       	in	r0, 0x2d	; 45
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    128e:	07 fe       	sbrs	r0, 7
    1290:	fd cf       	rjmp	.-6      	; 0x128c <_ZN7Sd2Card4initEhh+0x14e>
    1292:	8e b5       	in	r24, 0x2e	; 46
    1294:	80 7c       	andi	r24, 0xC0	; 192
    1296:	80 3c       	cpi	r24, 0xC0	; 192
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1298:	11 f4       	brne	.+4      	; 0x129e <_ZN7Sd2Card4initEhh+0x160>
    129a:	83 e0       	ldi	r24, 0x03	; 3
  while (!(SPSR & (1 << SPIF)));
    129c:	8b 87       	std	Y+11, r24	; 0x0b
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    12a2:	9e bd       	out	0x2e, r25	; 46
    12a4:	0d b4       	in	r0, 0x2d	; 45
    12a6:	07 fe       	sbrs	r0, 7
    12a8:	fd cf       	rjmp	.-6      	; 0x12a4 <_ZN7Sd2Card4initEhh+0x166>
    12aa:	2e b5       	in	r18, 0x2e	; 46
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	83 30       	cpi	r24, 0x03	; 3
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    12b0:	c1 f7       	brne	.-16     	; 0x12a2 <_ZN7Sd2Card4initEhh+0x164>
    12b2:	ce 01       	movw	r24, r28
  while (!(SPSR & (1 << SPIF)));
    12b4:	69 dd       	rcall	.-1326   	; 0xd88 <_ZN7Sd2Card14chipSelectHighEv>
    12b6:	ce 01       	movw	r24, r28
    12b8:	6b 2d       	mov	r22, r11
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    12ba:	1a dd       	rcall	.-1484   	; 0xcf0 <_ZN7Sd2Card10setSckRateEh>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
  }
  chipSelectHigh();
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	08 95       	ret

000012d0 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	ec 01       	movw	r28, r24
    12d6:	db 01       	movw	r26, r22
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    12dc:	20 e2       	ldi	r18, 0x20	; 32
    12de:	fd 01       	movw	r30, r26
    12e0:	e8 0f       	add	r30, r24
    12e2:	f9 1f       	adc	r31, r25
    12e4:	20 83       	st	Z, r18
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	8b 30       	cpi	r24, 0x0B	; 11
    12ea:	91 05       	cpc	r25, r1
    12ec:	c1 f7       	brne	.-16     	; 0x12de <_ZN6SdFile10make83NameEPKcPh+0xe>
    12ee:	57 e0       	ldi	r21, 0x07	; 7
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	21 c0       	rjmp	.+66     	; 0x1336 <_ZN6SdFile10make83NameEPKcPh+0x66>
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
    12f4:	2e 32       	cpi	r18, 0x2E	; 46
    12f6:	19 f0       	breq	.+6      	; 0x12fe <_ZN6SdFile10make83NameEPKcPh+0x2e>
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
    12f8:	88 e6       	ldi	r24, 0x68	; 104
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	07 c0       	rjmp	.+14     	; 0x130c <_ZN6SdFile10make83NameEPKcPh+0x3c>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    12fe:	5a 30       	cpi	r21, 0x0A	; 10
    1300:	19 f1       	breq	.+70     	; 0x1348 <_ZN6SdFile10make83NameEPKcPh+0x78>
    1302:	5a e0       	ldi	r21, 0x0A	; 10
    1304:	48 e0       	ldi	r20, 0x08	; 8
    1306:	17 c0       	rjmp	.+46     	; 0x1336 <_ZN6SdFile10make83NameEPKcPh+0x66>
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    1308:	32 17       	cp	r19, r18
    130a:	f1 f0       	breq	.+60     	; 0x1348 <_ZN6SdFile10make83NameEPKcPh+0x78>
    130c:	fc 01       	movw	r30, r24
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	34 91       	lpm	r19, Z+
    1312:	33 23       	and	r19, r19
    1314:	c9 f7       	brne	.-14     	; 0x1308 <_ZN6SdFile10make83NameEPKcPh+0x38>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    1316:	54 17       	cp	r21, r20
    1318:	b8 f0       	brcs	.+46     	; 0x1348 <_ZN6SdFile10make83NameEPKcPh+0x78>
    131a:	21 32       	cpi	r18, 0x21	; 33
    131c:	a8 f0       	brcs	.+42     	; 0x1348 <_ZN6SdFile10make83NameEPKcPh+0x78>
    131e:	2f 37       	cpi	r18, 0x7F	; 127
    1320:	98 f4       	brcc	.+38     	; 0x1348 <_ZN6SdFile10make83NameEPKcPh+0x78>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    1322:	82 2f       	mov	r24, r18
    1324:	81 56       	subi	r24, 0x61	; 97
    1326:	8a 31       	cpi	r24, 0x1A	; 26
    1328:	08 f4       	brcc	.+2      	; 0x132c <_ZN6SdFile10make83NameEPKcPh+0x5c>
    132a:	20 52       	subi	r18, 0x20	; 32
    132c:	fd 01       	movw	r30, r26
    132e:	e4 0f       	add	r30, r20
    1330:	f1 1d       	adc	r31, r1
    1332:	20 83       	st	Z, r18
    1334:	4f 5f       	subi	r20, 0xFF	; 255
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    1336:	29 91       	ld	r18, Y+
    1338:	22 23       	and	r18, r18
    133a:	e1 f6       	brne	.-72     	; 0x12f4 <_ZN6SdFile10make83NameEPKcPh+0x24>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	8c 91       	ld	r24, X
    1340:	80 32       	cpi	r24, 0x20	; 32
    1342:	19 f0       	breq	.+6      	; 0x134a <_ZN6SdFile10make83NameEPKcPh+0x7a>
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	01 c0       	rjmp	.+2      	; 0x134a <_ZN6SdFile10make83NameEPKcPh+0x7a>
    1348:	90 e0       	ldi	r25, 0x00	; 0
}
    134a:	89 2f       	mov	r24, r25
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    1352:	6f 92       	push	r6
    1354:	7f 92       	push	r7
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
    1370:	7a 01       	movw	r14, r20
    1372:	8b 01       	movw	r16, r22
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    1376:	22 23       	and	r18, r18
    1378:	09 f4       	brne	.+2      	; 0x137c <_ZN6SdFile7seekSetEm+0x2a>
    137a:	80 c0       	rjmp	.+256    	; 0x147c <_ZN6SdFile7seekSetEm+0x12a>
    137c:	8b 89       	ldd	r24, Y+19	; 0x13
    137e:	9c 89       	ldd	r25, Y+20	; 0x14
    1380:	ad 89       	ldd	r26, Y+21	; 0x15
    1382:	be 89       	ldd	r27, Y+22	; 0x16
    1384:	84 17       	cp	r24, r20
    1386:	95 07       	cpc	r25, r21
    1388:	a6 07       	cpc	r26, r22
    138a:	b7 07       	cpc	r27, r23
    138c:	08 f4       	brcc	.+2      	; 0x1390 <_ZN6SdFile7seekSetEm+0x3e>
    138e:	76 c0       	rjmp	.+236    	; 0x147c <_ZN6SdFile7seekSetEm+0x12a>
    1390:	85 c0       	rjmp	.+266    	; 0x149c <_ZN6SdFile7seekSetEm+0x14a>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    1392:	e1 14       	cp	r14, r1
    1394:	f1 04       	cpc	r15, r1
    1396:	01 05       	cpc	r16, r1
    1398:	11 05       	cpc	r17, r1
    139a:	49 f4       	brne	.+18     	; 0x13ae <_ZN6SdFile7seekSetEm+0x5c>
    // set position to start of file
    curCluster_ = 0;
    139c:	1e 82       	std	Y+6, r1	; 0x06
    139e:	1f 82       	std	Y+7, r1	; 0x07
    13a0:	18 86       	std	Y+8, r1	; 0x08
    13a2:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
    13a4:	1a 86       	std	Y+10, r1	; 0x0a
    13a6:	1b 86       	std	Y+11, r1	; 0x0b
    13a8:	1c 86       	std	Y+12, r1	; 0x0c
    13aa:	1d 86       	std	Y+13, r1	; 0x0d
    13ac:	65 c0       	rjmp	.+202    	; 0x1478 <_ZN6SdFile7seekSetEm+0x126>
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    13ae:	2a 85       	ldd	r18, Y+10	; 0x0a
    13b0:	3b 85       	ldd	r19, Y+11	; 0x0b
    13b2:	4c 85       	ldd	r20, Y+12	; 0x0c
    13b4:	5d 85       	ldd	r21, Y+13	; 0x0d
    13b6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    13b8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    13ba:	85 85       	ldd	r24, Z+13	; 0x0d
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	09 96       	adiw	r24, 0x09	; 9
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	30 40       	sbci	r19, 0x00	; 0
    13c4:	40 40       	sbci	r20, 0x00	; 0
    13c6:	50 40       	sbci	r21, 0x00	; 0
    13c8:	39 01       	movw	r6, r18
    13ca:	4a 01       	movw	r8, r20
    13cc:	08 2e       	mov	r0, r24
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <_ZN6SdFile7seekSetEm+0x86>
    13d0:	96 94       	lsr	r9
    13d2:	87 94       	ror	r8
    13d4:	77 94       	ror	r7
    13d6:	67 94       	ror	r6
    13d8:	0a 94       	dec	r0
    13da:	d2 f7       	brpl	.-12     	; 0x13d0 <_ZN6SdFile7seekSetEm+0x7e>
    13dc:	2f 5f       	subi	r18, 0xFF	; 255
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	4f 4f       	sbci	r20, 0xFF	; 255
    13e2:	5f 4f       	sbci	r21, 0xFF	; 255
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    13e4:	08 94       	sec
    13e6:	e1 08       	sbc	r14, r1
    13e8:	f1 08       	sbc	r15, r1
    13ea:	01 09       	sbc	r16, r1
    13ec:	11 09       	sbc	r17, r1
    13ee:	57 01       	movw	r10, r14
    13f0:	68 01       	movw	r12, r16
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <_ZN6SdFile7seekSetEm+0xaa>
    13f4:	d6 94       	lsr	r13
    13f6:	c7 94       	ror	r12
    13f8:	b7 94       	ror	r11
    13fa:	a7 94       	ror	r10
    13fc:	8a 95       	dec	r24
    13fe:	d2 f7       	brpl	.-12     	; 0x13f4 <_ZN6SdFile7seekSetEm+0xa2>
    1400:	08 94       	sec
    1402:	e1 1c       	adc	r14, r1
    1404:	f1 1c       	adc	r15, r1
    1406:	01 1d       	adc	r16, r1
    1408:	11 1d       	adc	r17, r1

  if (nNew < nCur || curPosition_ == 0) {
    140a:	a6 14       	cp	r10, r6
    140c:	b7 04       	cpc	r11, r7
    140e:	c8 04       	cpc	r12, r8
    1410:	d9 04       	cpc	r13, r9
    1412:	28 f0       	brcs	.+10     	; 0x141e <_ZN6SdFile7seekSetEm+0xcc>
    1414:	21 15       	cp	r18, r1
    1416:	31 05       	cpc	r19, r1
    1418:	41 05       	cpc	r20, r1
    141a:	51 05       	cpc	r21, r1
    141c:	49 f4       	brne	.+18     	; 0x1430 <_ZN6SdFile7seekSetEm+0xde>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    141e:	8f 89       	ldd	r24, Y+23	; 0x17
    1420:	98 8d       	ldd	r25, Y+24	; 0x18
    1422:	a9 8d       	ldd	r26, Y+25	; 0x19
    1424:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1426:	8e 83       	std	Y+6, r24	; 0x06
    1428:	9f 83       	std	Y+7, r25	; 0x07
    142a:	a8 87       	std	Y+8, r26	; 0x08
    142c:	b9 87       	std	Y+9, r27	; 0x09
    142e:	16 c0       	rjmp	.+44     	; 0x145c <_ZN6SdFile7seekSetEm+0x10a>
  } else {
    // advance from curPosition
    nNew -= nCur;
    1430:	a6 18       	sub	r10, r6
    1432:	b7 08       	sbc	r11, r7
    1434:	c8 08       	sbc	r12, r8
    1436:	d9 08       	sbc	r13, r9
    1438:	11 c0       	rjmp	.+34     	; 0x145c <_ZN6SdFile7seekSetEm+0x10a>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    143a:	4e 81       	ldd	r20, Y+6	; 0x06
    143c:	5f 81       	ldd	r21, Y+7	; 0x07
    143e:	68 85       	ldd	r22, Y+8	; 0x08
    1440:	79 85       	ldd	r23, Y+9	; 0x09
    1442:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1444:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1446:	94 01       	movw	r18, r8
    1448:	0e 94 a3 13 	call	0x2746	; 0x2746 <_ZNK8SdVolume6fatGetEmPm>
    144c:	08 94       	sec
    144e:	a1 08       	sbc	r10, r1
    1450:	b1 08       	sbc	r11, r1
    1452:	c1 08       	sbc	r12, r1
    1454:	d1 08       	sbc	r13, r1
    1456:	88 23       	and	r24, r24
    1458:	31 f4       	brne	.+12     	; 0x1466 <_ZN6SdFile7seekSetEm+0x114>
    145a:	10 c0       	rjmp	.+32     	; 0x147c <_ZN6SdFile7seekSetEm+0x12a>
    145c:	86 e0       	ldi	r24, 0x06	; 6
    145e:	88 2e       	mov	r8, r24
    1460:	91 2c       	mov	r9, r1
    1462:	8c 0e       	add	r8, r28
    1464:	9d 1e       	adc	r9, r29
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    1466:	a1 14       	cp	r10, r1
    1468:	b1 04       	cpc	r11, r1
    146a:	c1 04       	cpc	r12, r1
    146c:	d1 04       	cpc	r13, r1
    146e:	29 f7       	brne	.-54     	; 0x143a <_ZN6SdFile7seekSetEm+0xe8>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    1470:	ea 86       	std	Y+10, r14	; 0x0a
    1472:	fb 86       	std	Y+11, r15	; 0x0b
    1474:	0c 87       	std	Y+12, r16	; 0x0c
    1476:	1d 87       	std	Y+13, r17	; 0x0d
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	01 c0       	rjmp	.+2      	; 0x147e <_ZN6SdFile7seekSetEm+0x12c>
  return true;
    147c:	80 e0       	ldi	r24, 0x00	; 0
}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	9f 90       	pop	r9
    1494:	8f 90       	pop	r8
    1496:	7f 90       	pop	r7
    1498:	6f 90       	pop	r6
    149a:	08 95       	ret
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	09 f0       	breq	.+2      	; 0x14a2 <_ZN6SdFile7seekSetEm+0x150>
    14a0:	78 cf       	rjmp	.-272    	; 0x1392 <_ZN6SdFile7seekSetEm+0x40>
    14a2:	e6 cf       	rjmp	.-52     	; 0x1470 <_ZN6SdFile7seekSetEm+0x11e>

000014a4 <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
    14aa:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    14ac:	6e 85       	ldd	r22, Y+14	; 0x0e
    14ae:	7f 85       	ldd	r23, Y+15	; 0x0f
    14b0:	88 89       	ldd	r24, Y+16	; 0x10
    14b2:	99 89       	ldd	r25, Y+17	; 0x11
    14b4:	30 d7       	rcall	.+3680   	; 0x2316 <_ZN8SdVolume13cacheRawBlockEmh>
    14b6:	88 23       	and	r24, r24
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <_ZN6SdFile13cacheDirEntryEh+0x1c>
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	0a c0       	rjmp	.+20     	; 0x14d4 <_ZN6SdFile13cacheDirEntryEh+0x30>
    14c0:	8a 89       	ldd	r24, Y+18	; 0x12
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	95 e0       	ldi	r25, 0x05	; 5
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	9a 95       	dec	r25
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <_ZN6SdFile13cacheDirEntryEh+0x24>
    14d0:	26 58       	subi	r18, 0x86	; 134
    14d2:	3c 4f       	sbci	r19, 0xFC	; 252
    14d4:	c9 01       	movw	r24, r18
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    14e6:	fc 01       	movw	r30, r24
    14e8:	85 81       	ldd	r24, Z+5	; 0x05
    14ea:	88 23       	and	r24, r24
    14ec:	c9 f1       	breq	.+114    	; 0x1560 <_ZN6SdFile4syncEv+0x84>

  if (flags_ & F_FILE_DIR_DIRTY) {
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	87 ff       	sbrs	r24, 7
    14f2:	34 c0       	rjmp	.+104    	; 0x155c <_ZN6SdFile4syncEv+0x80>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    14f4:	c8 01       	movw	r24, r16
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	d5 df       	rcall	.-86     	; 0x14a4 <_ZN6SdFile13cacheDirEntryEh>
    14fa:	ec 01       	movw	r28, r24
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    if (!d) return false;
    14fe:	81 f1       	breq	.+96     	; 0x1560 <_ZN6SdFile4syncEv+0x84>
    1500:	f8 01       	movw	r30, r16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    1502:	85 81       	ldd	r24, Z+5	; 0x05
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	40 f4       	brcc	.+16     	; 0x1518 <_ZN6SdFile4syncEv+0x3c>
    1508:	83 89       	ldd	r24, Z+19	; 0x13
    150a:	94 89       	ldd	r25, Z+20	; 0x14
    150c:	a5 89       	ldd	r26, Z+21	; 0x15
    150e:	b6 89       	ldd	r27, Z+22	; 0x16
    1510:	8c 8f       	std	Y+28, r24	; 0x1c
    1512:	9d 8f       	std	Y+29, r25	; 0x1d
    1514:	ae 8f       	std	Y+30, r26	; 0x1e
    1516:	bf 8f       	std	Y+31, r27	; 0x1f
    1518:	f8 01       	movw	r30, r16

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    151a:	87 89       	ldd	r24, Z+23	; 0x17
    151c:	90 8d       	ldd	r25, Z+24	; 0x18
    151e:	9b 8f       	std	Y+27, r25	; 0x1b
    1520:	8a 8f       	std	Y+26, r24	; 0x1a
    1522:	87 89       	ldd	r24, Z+23	; 0x17
    d->firstClusterHigh = firstCluster_ >> 16;
    1524:	90 8d       	ldd	r25, Z+24	; 0x18
    1526:	a1 8d       	ldd	r26, Z+25	; 0x19
    1528:	b2 8d       	ldd	r27, Z+26	; 0x1a
    152a:	cd 01       	movw	r24, r26
    152c:	aa 27       	eor	r26, r26
    152e:	bb 27       	eor	r27, r27
    1530:	9d 8b       	std	Y+21, r25	; 0x15
    1532:	8c 8b       	std	Y+20, r24	; 0x14
    1534:	e0 91 78 03 	lds	r30, 0x0378

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1538:	f0 91 79 03 	lds	r31, 0x0379
    153c:	30 97       	sbiw	r30, 0x00	; 0
    153e:	51 f0       	breq	.+20     	; 0x1554 <_ZN6SdFile4syncEv+0x78>
    1540:	be 01       	movw	r22, r28
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    1542:	6a 5e       	subi	r22, 0xEA	; 234
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	ce 01       	movw	r24, r28
    1548:	48 96       	adiw	r24, 0x18	; 24
    154a:	09 95       	icall
    154c:	88 8d       	ldd	r24, Y+24	; 0x18
      d->lastAccessDate = d->lastWriteDate;
    154e:	99 8d       	ldd	r25, Y+25	; 0x19
    1550:	9b 8b       	std	Y+19, r25	; 0x13
    1552:	8a 8b       	std	Y+18, r24	; 0x12
    1554:	f8 01       	movw	r30, r16
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    1556:	84 81       	ldd	r24, Z+4	; 0x04
    1558:	8f 77       	andi	r24, 0x7F	; 127
    155a:	84 83       	std	Z+4, r24	; 0x04
    155c:	7e d6       	rcall	.+3324   	; 0x225a <_ZN8SdVolume10cacheFlushEv>
  }
  return SdVolume::cacheFlush();
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <_ZN6SdFile4syncEv+0x86>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
}
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	ec 01       	movw	r28, r24
  if (!sync())return false;
    1572:	b4 df       	rcall	.-152    	; 0x14dc <_ZN6SdFile4syncEv>
    1574:	88 23       	and	r24, r24
    1576:	11 f0       	breq	.+4      	; 0x157c <_ZN6SdFile5closeEv+0x10>
    1578:	1d 82       	std	Y+5, r1	; 0x05
  type_ = FAT_FILE_TYPE_CLOSED;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	df 91       	pop	r29
  return true;
}
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    1582:	6f 92       	push	r6
    1584:	7f 92       	push	r7
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <_ZN6SdFile8truncateEm+0x1e>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <_ZN6SdFile8truncateEm+0x20>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	7c 01       	movw	r14, r24
    15a8:	5a 01       	movw	r10, r20
    15aa:	6b 01       	movw	r12, r22
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    15ac:	dc 01       	movw	r26, r24
    15ae:	15 96       	adiw	r26, 0x05	; 5
    15b0:	8c 91       	ld	r24, X
    15b2:	15 97       	sbiw	r26, 0x05	; 5
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	09 f0       	breq	.+2      	; 0x15ba <_ZN6SdFile8truncateEm+0x38>
    15b8:	8b c0       	rjmp	.+278    	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>
    15ba:	14 96       	adiw	r26, 0x04	; 4
    15bc:	8c 91       	ld	r24, X
    15be:	81 ff       	sbrs	r24, 1
    15c0:	87 c0       	rjmp	.+270    	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>
    15c2:	9a c0       	rjmp	.+308    	; 0x16f8 <_ZN6SdFile8truncateEm+0x176>

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	a1 05       	cpc	r26, r1
    15c8:	b1 05       	cpc	r27, r1
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <_ZN6SdFile8truncateEm+0x4e>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	81 c0       	rjmp	.+258    	; 0x16d2 <_ZN6SdFile8truncateEm+0x150>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    15d0:	f7 01       	movw	r30, r14
    15d2:	62 84       	ldd	r6, Z+10	; 0x0a
    15d4:	73 84       	ldd	r7, Z+11	; 0x0b
    15d6:	84 84       	ldd	r8, Z+12	; 0x0c
    15d8:	95 84       	ldd	r9, Z+13	; 0x0d

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    15da:	c7 01       	movw	r24, r14
    15dc:	b6 01       	movw	r22, r12
    15de:	a5 01       	movw	r20, r10
    15e0:	b8 de       	rcall	.-656    	; 0x1352 <_ZN6SdFile7seekSetEm>
    15e2:	88 23       	and	r24, r24
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <_ZN6SdFile8truncateEm+0x66>
    15e6:	74 c0       	rjmp	.+232    	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>
    15e8:	d7 01       	movw	r26, r14
    15ea:	5b 96       	adiw	r26, 0x1b	; 27
    15ec:	8d 91       	ld	r24, X+
    15ee:	9c 91       	ld	r25, X
    15f0:	5c 97       	sbiw	r26, 0x1c	; 28
    15f2:	a1 14       	cp	r10, r1

  if (length == 0) {
    15f4:	b1 04       	cpc	r11, r1
    15f6:	c1 04       	cpc	r12, r1
    15f8:	d1 04       	cpc	r13, r1
    15fa:	89 f4       	brne	.+34     	; 0x161e <_ZN6SdFile8truncateEm+0x9c>
    15fc:	57 96       	adiw	r26, 0x17	; 23
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    15fe:	4d 91       	ld	r20, X+
    1600:	5d 91       	ld	r21, X+
    1602:	6d 91       	ld	r22, X+
    1604:	7c 91       	ld	r23, X
    1606:	5a 97       	sbiw	r26, 0x1a	; 26
    1608:	0e 94 15 14 	call	0x282a	; 0x282a <_ZN8SdVolume9freeChainEm>
    160c:	88 23       	and	r24, r24
    160e:	09 f4       	brne	.+2      	; 0x1612 <_ZN6SdFile8truncateEm+0x90>
    1610:	5f c0       	rjmp	.+190    	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>
    1612:	f7 01       	movw	r30, r14
    firstCluster_ = 0;
    1614:	17 8a       	std	Z+23, r1	; 0x17
    1616:	10 8e       	std	Z+24, r1	; 0x18
    1618:	11 8e       	std	Z+25, r1	; 0x19
    161a:	12 8e       	std	Z+26, r1	; 0x1a
    161c:	3c c0       	rjmp	.+120    	; 0x1696 <_ZN6SdFile8truncateEm+0x114>
    161e:	d7 01       	movw	r26, r14
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    1620:	16 96       	adiw	r26, 0x06	; 6
    1622:	4d 91       	ld	r20, X+
    1624:	5d 91       	ld	r21, X+
    1626:	6d 91       	ld	r22, X+
    1628:	7c 91       	ld	r23, X
    162a:	19 97       	sbiw	r26, 0x09	; 9
    162c:	9e 01       	movw	r18, r28
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	0e 94 a3 13 	call	0x2746	; 0x2746 <_ZNK8SdVolume6fatGetEmPm>
    1636:	88 23       	and	r24, r24
    1638:	09 f4       	brne	.+2      	; 0x163c <_ZN6SdFile8truncateEm+0xba>
    163a:	4a c0       	rjmp	.+148    	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>
    163c:	d7 01       	movw	r26, r14

    if (!vol_->isEOC(toFree)) {
    163e:	5b 96       	adiw	r26, 0x1b	; 27
    1640:	ed 91       	ld	r30, X+
    1642:	fc 91       	ld	r31, X
    1644:	5c 97       	sbiw	r26, 0x1c	; 28
    1646:	49 81       	ldd	r20, Y+1	; 0x01
    1648:	5a 81       	ldd	r21, Y+2	; 0x02
    164a:	6b 81       	ldd	r22, Y+3	; 0x03
    164c:	7c 81       	ldd	r23, Y+4	; 0x04
    164e:	87 89       	ldd	r24, Z+23	; 0x17
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1650:	80 31       	cpi	r24, 0x10	; 16
    1652:	29 f0       	breq	.+10     	; 0x165e <_ZN6SdFile8truncateEm+0xdc>
    1654:	88 ef       	ldi	r24, 0xF8	; 248
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	af ef       	ldi	r26, 0xFF	; 255
    165a:	bf e0       	ldi	r27, 0x0F	; 15
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <_ZN6SdFile8truncateEm+0xe4>
    165e:	88 ef       	ldi	r24, 0xF8	; 248
    1660:	9f ef       	ldi	r25, 0xFF	; 255
    1662:	a0 e0       	ldi	r26, 0x00	; 0
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	48 17       	cp	r20, r24
    1668:	59 07       	cpc	r21, r25
    166a:	6a 07       	cpc	r22, r26
    166c:	7b 07       	cpc	r23, r27
    166e:	98 f4       	brcc	.+38     	; 0x1696 <_ZN6SdFile8truncateEm+0x114>
    1670:	cf 01       	movw	r24, r30
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    1672:	0e 94 15 14 	call	0x282a	; 0x282a <_ZN8SdVolume9freeChainEm>
    1676:	88 23       	and	r24, r24
    1678:	59 f1       	breq	.+86     	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>
    167a:	f7 01       	movw	r30, r14
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    167c:	46 81       	ldd	r20, Z+6	; 0x06
    167e:	57 81       	ldd	r21, Z+7	; 0x07
    1680:	60 85       	ldd	r22, Z+8	; 0x08
    1682:	71 85       	ldd	r23, Z+9	; 0x09
    1684:	83 8d       	ldd	r24, Z+27	; 0x1b
    1686:	94 8d       	ldd	r25, Z+28	; 0x1c
    1688:	0f ef       	ldi	r16, 0xFF	; 255
    168a:	1f ef       	ldi	r17, 0xFF	; 255
    168c:	2f ef       	ldi	r18, 0xFF	; 255
    168e:	3f e0       	ldi	r19, 0x0F	; 15
    1690:	bf d7       	rcall	.+3966   	; 0x2610 <_ZN8SdVolume6fatPutEmm>
    1692:	88 23       	and	r24, r24
    1694:	e9 f0       	breq	.+58     	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    1696:	d7 01       	movw	r26, r14
    1698:	53 96       	adiw	r26, 0x13	; 19
    }
  }
  fileSize_ = length;
    169a:	ad 92       	st	X+, r10
    169c:	bd 92       	st	X+, r11
    169e:	cd 92       	st	X+, r12
    16a0:	dc 92       	st	X, r13
    16a2:	56 97       	sbiw	r26, 0x16	; 22
    16a4:	14 96       	adiw	r26, 0x04	; 4
    16a6:	8c 91       	ld	r24, X

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    16a8:	14 97       	sbiw	r26, 0x04	; 4
    16aa:	80 68       	ori	r24, 0x80	; 128
    16ac:	14 96       	adiw	r26, 0x04	; 4
    16ae:	8c 93       	st	X, r24
    16b0:	c7 01       	movw	r24, r14
    16b2:	14 df       	rcall	.-472    	; 0x14dc <_ZN6SdFile4syncEv>

  if (!sync()) return false;
    16b4:	88 23       	and	r24, r24
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>
    16b8:	b6 01       	movw	r22, r12
    16ba:	a5 01       	movw	r20, r10
    16bc:	6a 14       	cp	r6, r10

  // set file to correct position
  return seekSet(newPos);
    16be:	7b 04       	cpc	r7, r11
    16c0:	8c 04       	cpc	r8, r12
    16c2:	9d 04       	cpc	r9, r13
    16c4:	10 f4       	brcc	.+4      	; 0x16ca <_ZN6SdFile8truncateEm+0x148>
    16c6:	b4 01       	movw	r22, r8
    16c8:	a3 01       	movw	r20, r6
    16ca:	c7 01       	movw	r24, r14
    16cc:	42 de       	rcall	.-892    	; 0x1352 <_ZN6SdFile7seekSetEm>
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <_ZN6SdFile8truncateEm+0x150>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	9f 90       	pop	r9
    16f0:	8f 90       	pop	r8
    16f2:	7f 90       	pop	r7
    16f4:	6f 90       	pop	r6
    16f6:	08 95       	ret
    16f8:	f7 01       	movw	r30, r14
    16fa:	83 89       	ldd	r24, Z+19	; 0x13
    16fc:	94 89       	ldd	r25, Z+20	; 0x14
    16fe:	a5 89       	ldd	r26, Z+21	; 0x15
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;

  // error if length is greater than current size
  if (length > fileSize_) return false;
    1700:	b6 89       	ldd	r27, Z+22	; 0x16
    1702:	84 17       	cp	r24, r20
    1704:	95 07       	cpc	r25, r21
    1706:	a6 07       	cpc	r26, r22
    1708:	b7 07       	cpc	r27, r23
    170a:	08 f0       	brcs	.+2      	; 0x170e <_ZN6SdFile8truncateEm+0x18c>
    170c:	5b cf       	rjmp	.-330    	; 0x15c4 <_ZN6SdFile8truncateEm+0x42>
    170e:	e0 cf       	rjmp	.-64     	; 0x16d0 <_ZN6SdFile8truncateEm+0x14e>

00001710 <_ZN6SdFile6removeEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	ec 01       	movw	r28, r24
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	31 df       	rcall	.-414    	; 0x1582 <_ZN6SdFile8truncateEm>
    1720:	88 23       	and	r24, r24
    1722:	59 f0       	breq	.+22     	; 0x173a <_ZN6SdFile6removeEv+0x2a>
    1724:	ce 01       	movw	r24, r28

  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	bd de       	rcall	.-646    	; 0x14a4 <_ZN6SdFile13cacheDirEntryEh>
    172a:	fc 01       	movw	r30, r24
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	29 f0       	breq	.+10     	; 0x173a <_ZN6SdFile6removeEv+0x2a>
  if (!d) return false;
    1730:	85 ee       	ldi	r24, 0xE5	; 229
    1732:	80 83       	st	Z, r24

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    1734:	1d 82       	std	Y+5, r1	; 0x05
    1736:	91 d5       	rcall	.+2850   	; 0x225a <_ZN8SdVolume10cacheFlushEv>

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    1738:	01 c0       	rjmp	.+2      	; 0x173c <_ZN6SdFile6removeEv+0x2c>

  // write entry to SD
  return SdVolume::cacheFlush();
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	08 95       	ret

00001742 <_ZN6SdFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    1742:	2f 92       	push	r2
    1744:	3f 92       	push	r3
    1746:	4f 92       	push	r4
    1748:	5f 92       	push	r5
    174a:	6f 92       	push	r6
    174c:	7f 92       	push	r7
    174e:	8f 92       	push	r8
    1750:	9f 92       	push	r9
    1752:	af 92       	push	r10
    1754:	bf 92       	push	r11
    1756:	cf 92       	push	r12
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	ec 01       	movw	r28, r24
    1768:	2a 01       	movw	r4, r20
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	88 23       	and	r24, r24
    176e:	09 f4       	brne	.+2      	; 0x1772 <_ZN6SdFile4readEPvj+0x30>
    1770:	c4 c0       	rjmp	.+392    	; 0x18fa <_ZN6SdFile4readEPvj+0x1b8>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	80 ff       	sbrs	r24, 0
    1776:	c1 c0       	rjmp	.+386    	; 0x18fa <_ZN6SdFile4readEPvj+0x1b8>
    1778:	d6 c0       	rjmp	.+428    	; 0x1926 <_ZN6SdFile4readEPvj+0x1e4>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    177a:	25 01       	movw	r4, r10
    177c:	4e 18       	sub	r4, r14
    177e:	5f 08       	sbc	r5, r15
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    1780:	4b 01       	movw	r8, r22
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    1782:	76 e0       	ldi	r23, 0x06	; 6
    1784:	27 2e       	mov	r2, r23
    1786:	31 2c       	mov	r3, r1
    1788:	2c 0e       	add	r2, r28
    178a:	3d 1e       	adc	r3, r29
    178c:	32 01       	movw	r6, r4
    178e:	af c0       	rjmp	.+350    	; 0x18ee <_ZN6SdFile4readEPvj+0x1ac>

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    1790:	2a 85       	ldd	r18, Y+10	; 0x0a
    1792:	3b 85       	ldd	r19, Y+11	; 0x0b
    1794:	4c 85       	ldd	r20, Y+12	; 0x0c
    1796:	5d 85       	ldd	r21, Y+13	; 0x0d
    1798:	6f ef       	ldi	r22, 0xFF	; 255
    179a:	a6 2e       	mov	r10, r22
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	b6 2e       	mov	r11, r22
    17a0:	a2 22       	and	r10, r18
    17a2:	b3 22       	and	r11, r19
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	79 01       	movw	r14, r18
    17a8:	8a 01       	movw	r16, r20
    17aa:	99 e0       	ldi	r25, 0x09	; 9
    17ac:	16 95       	lsr	r17
    17ae:	07 95       	ror	r16
    17b0:	f7 94       	ror	r15
    17b2:	e7 94       	ror	r14
    17b4:	9a 95       	dec	r25
    17b6:	d1 f7       	brne	.-12     	; 0x17ac <_ZN6SdFile4readEPvj+0x6a>
    17b8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    17ba:	fc 8d       	ldd	r31, Y+28	; 0x1c
    17bc:	82 30       	cpi	r24, 0x02	; 2
    17be:	49 f4       	brne	.+18     	; 0x17d2 <_ZN6SdFile4readEPvj+0x90>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    17c0:	42 8d       	ldd	r20, Z+26	; 0x1a
    17c2:	53 8d       	ldd	r21, Z+27	; 0x1b
    17c4:	64 8d       	ldd	r22, Z+28	; 0x1c
    17c6:	75 8d       	ldd	r23, Z+29	; 0x1d
    17c8:	4e 0d       	add	r20, r14
    17ca:	5f 1d       	adc	r21, r15
    17cc:	60 1f       	adc	r22, r16
    17ce:	71 1f       	adc	r23, r17
    17d0:	3e c0       	rjmp	.+124    	; 0x184e <_ZN6SdFile4readEPvj+0x10c>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    17d2:	d4 80       	ldd	r13, Z+4	; 0x04
    17d4:	da 94       	dec	r13
    17d6:	de 20       	and	r13, r14
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    17d8:	a1 14       	cp	r10, r1
    17da:	b1 04       	cpc	r11, r1
    17dc:	d1 f4       	brne	.+52     	; 0x1812 <_ZN6SdFile4readEPvj+0xd0>
    17de:	dd 20       	and	r13, r13
    17e0:	c1 f4       	brne	.+48     	; 0x1812 <_ZN6SdFile4readEPvj+0xd0>
        // start of new cluster
        if (curPosition_ == 0) {
    17e2:	21 15       	cp	r18, r1
    17e4:	31 05       	cpc	r19, r1
    17e6:	41 05       	cpc	r20, r1
    17e8:	51 05       	cpc	r21, r1
    17ea:	49 f4       	brne	.+18     	; 0x17fe <_ZN6SdFile4readEPvj+0xbc>
          // use first cluster in file
          curCluster_ = firstCluster_;
    17ec:	8f 89       	ldd	r24, Y+23	; 0x17
    17ee:	98 8d       	ldd	r25, Y+24	; 0x18
    17f0:	a9 8d       	ldd	r26, Y+25	; 0x19
    17f2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    17f4:	8e 83       	std	Y+6, r24	; 0x06
    17f6:	9f 83       	std	Y+7, r25	; 0x07
    17f8:	a8 87       	std	Y+8, r26	; 0x08
    17fa:	b9 87       	std	Y+9, r27	; 0x09
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <_ZN6SdFile4readEPvj+0xd0>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    17fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1800:	5f 81       	ldd	r21, Y+7	; 0x07
    1802:	68 85       	ldd	r22, Y+8	; 0x08
    1804:	79 85       	ldd	r23, Y+9	; 0x09
    1806:	cf 01       	movw	r24, r30
    1808:	91 01       	movw	r18, r2
    180a:	9d d7       	rcall	.+3898   	; 0x2746 <_ZNK8SdVolume6fatGetEmPm>
    180c:	88 23       	and	r24, r24
    180e:	09 f4       	brne	.+2      	; 0x1812 <_ZN6SdFile4readEPvj+0xd0>
    1810:	74 c0       	rjmp	.+232    	; 0x18fa <_ZN6SdFile4readEPvj+0x1b8>
    1812:	eb 8d       	ldd	r30, Y+27	; 0x1b
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1814:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1816:	4e 81       	ldd	r20, Y+6	; 0x06
    1818:	5f 81       	ldd	r21, Y+7	; 0x07
    181a:	68 85       	ldd	r22, Y+8	; 0x08
    181c:	79 85       	ldd	r23, Y+9	; 0x09
    181e:	42 50       	subi	r20, 0x02	; 2
    1820:	50 40       	sbci	r21, 0x00	; 0
    1822:	60 40       	sbci	r22, 0x00	; 0
    1824:	70 40       	sbci	r23, 0x00	; 0
    1826:	05 84       	ldd	r0, Z+13	; 0x0d
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <_ZN6SdFile4readEPvj+0xf0>
    182a:	44 0f       	add	r20, r20
    182c:	55 1f       	adc	r21, r21
    182e:	66 1f       	adc	r22, r22
    1830:	77 1f       	adc	r23, r23
    1832:	0a 94       	dec	r0
    1834:	d2 f7       	brpl	.-12     	; 0x182a <_ZN6SdFile4readEPvj+0xe8>
    1836:	86 85       	ldd	r24, Z+14	; 0x0e
    1838:	97 85       	ldd	r25, Z+15	; 0x0f
    183a:	a0 89       	ldd	r26, Z+16	; 0x10
    183c:	b1 89       	ldd	r27, Z+17	; 0x11
    183e:	48 0f       	add	r20, r24
    1840:	59 1f       	adc	r21, r25
    1842:	6a 1f       	adc	r22, r26
    1844:	7b 1f       	adc	r23, r27
    1846:	4d 0d       	add	r20, r13
    1848:	51 1d       	adc	r21, r1
    184a:	61 1d       	adc	r22, r1
    184c:	71 1d       	adc	r23, r1
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	92 e0       	ldi	r25, 0x02	; 2
    1852:	8a 19       	sub	r24, r10
    1854:	9b 09       	sbc	r25, r11
    1856:	63 01       	movw	r12, r6
    1858:	86 15       	cp	r24, r6
    185a:	97 05       	cpc	r25, r7
    185c:	08 f4       	brcc	.+2      	; 0x1860 <_ZN6SdFile4readEPvj+0x11e>
    185e:	6c 01       	movw	r12, r24
    1860:	8c 81       	ldd	r24, Y+4	; 0x04

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    1862:	86 fd       	sbrc	r24, 6
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <_ZN6SdFile4readEPvj+0x130>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	c8 16       	cp	r12, r24
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	d8 06       	cpc	r13, r24
    186e:	09 f0       	breq	.+2      	; 0x1872 <_ZN6SdFile4readEPvj+0x130>
    1870:	72 c0       	rjmp	.+228    	; 0x1956 <_ZN6SdFile4readEPvj+0x214>
    1872:	80 91 28 02 	lds	r24, 0x0228
    1876:	90 91 29 02 	lds	r25, 0x0229
    187a:	a0 91 2a 02 	lds	r26, 0x022A
    187e:	b0 91 2b 02 	lds	r27, 0x022B
    1882:	48 17       	cp	r20, r24
    1884:	59 07       	cpc	r21, r25
    1886:	6a 07       	cpc	r22, r26
    1888:	7b 07       	cpc	r23, r27
    188a:	09 f4       	brne	.+2      	; 0x188e <_ZN6SdFile4readEPvj+0x14c>
    188c:	64 c0       	rjmp	.+200    	; 0x1956 <_ZN6SdFile4readEPvj+0x214>
    188e:	80 91 7a 05 	lds	r24, 0x057A
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    1892:	90 91 7b 05 	lds	r25, 0x057B
    1896:	95 01       	movw	r18, r10
    1898:	86 01       	movw	r16, r12
    189a:	74 01       	movw	r14, r8
    189c:	a8 db       	rcall	.-2224   	; 0xfee <_ZN7Sd2Card8readDataEmjjPh>
    189e:	88 23       	and	r24, r24
    18a0:	61 f1       	breq	.+88     	; 0x18fa <_ZN6SdFile4readEPvj+0x1b8>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    18a2:	8c 0c       	add	r8, r12
    18a4:	9d 1c       	adc	r9, r13
      dst += n;
    18a6:	12 c0       	rjmp	.+36     	; 0x18cc <_ZN6SdFile4readEPvj+0x18a>
    18a8:	95 01       	movw	r18, r10
    18aa:	26 58       	subi	r18, 0x86	; 134
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    18ac:	3c 4f       	sbci	r19, 0xFC	; 252
    18ae:	a9 01       	movw	r20, r18
    18b0:	4c 0d       	add	r20, r12
      uint8_t* end = src + n;
    18b2:	5d 1d       	adc	r21, r13
    18b4:	d4 01       	movw	r26, r8
    18b6:	f9 01       	movw	r30, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <_ZN6SdFile4readEPvj+0x17c>
    18ba:	81 91       	ld	r24, Z+
    18bc:	8d 93       	st	X+, r24
      while (src != end) *dst++ = *src++;
    18be:	e4 17       	cp	r30, r20
    18c0:	f5 07       	cpc	r31, r21
    18c2:	d9 f7       	brne	.-10     	; 0x18ba <_ZN6SdFile4readEPvj+0x178>
    18c4:	e2 1b       	sub	r30, r18
    18c6:	f3 0b       	sbc	r31, r19
    18c8:	8e 0e       	add	r8, r30
    18ca:	9f 1e       	adc	r9, r31
    18cc:	96 01       	movw	r18, r12
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    }
    curPosition_ += n;
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d6:	ac 85       	ldd	r26, Y+12	; 0x0c
    18d8:	bd 85       	ldd	r27, Y+13	; 0x0d
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	a4 1f       	adc	r26, r20
    18e0:	b5 1f       	adc	r27, r21
    18e2:	8a 87       	std	Y+10, r24	; 0x0a
    18e4:	9b 87       	std	Y+11, r25	; 0x0b
    18e6:	ac 87       	std	Y+12, r26	; 0x0c
    18e8:	bd 87       	std	Y+13, r27	; 0x0d
    18ea:	6c 18       	sub	r6, r12
    18ec:	7d 08       	sbc	r7, r13
    toRead -= n;
    18ee:	61 14       	cp	r6, r1
    18f0:	71 04       	cpc	r7, r1
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <_ZN6SdFile4readEPvj+0x1b4>
    18f4:	4d cf       	rjmp	.-358    	; 0x1790 <_ZN6SdFile4readEPvj+0x4e>
    18f6:	a2 01       	movw	r20, r4
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <_ZN6SdFile4readEPvj+0x1bc>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    18fa:	4f ef       	ldi	r20, 0xFF	; 255
    18fc:	5f ef       	ldi	r21, 0xFF	; 255
    18fe:	ca 01       	movw	r24, r20
    1900:	df 91       	pop	r29
}
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	bf 90       	pop	r11
    1912:	af 90       	pop	r10
    1914:	9f 90       	pop	r9
    1916:	8f 90       	pop	r8
    1918:	7f 90       	pop	r7
    191a:	6f 90       	pop	r6
    191c:	5f 90       	pop	r5
    191e:	4f 90       	pop	r4
    1920:	3f 90       	pop	r3
    1922:	2f 90       	pop	r2
    1924:	08 95       	ret
    1926:	ab 88       	ldd	r10, Y+19	; 0x13
    1928:	bc 88       	ldd	r11, Y+20	; 0x14

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    192a:	cd 88       	ldd	r12, Y+21	; 0x15
    192c:	de 88       	ldd	r13, Y+22	; 0x16
    192e:	ea 84       	ldd	r14, Y+10	; 0x0a
    1930:	fb 84       	ldd	r15, Y+11	; 0x0b
    1932:	0c 85       	ldd	r16, Y+12	; 0x0c
    1934:	1d 85       	ldd	r17, Y+13	; 0x0d
    1936:	9a 01       	movw	r18, r20
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	50 e0       	ldi	r21, 0x00	; 0
    193c:	d6 01       	movw	r26, r12
    193e:	c5 01       	movw	r24, r10
    1940:	8e 19       	sub	r24, r14
    1942:	9f 09       	sbc	r25, r15
    1944:	a0 0b       	sbc	r26, r16
    1946:	b1 0b       	sbc	r27, r17
    1948:	82 17       	cp	r24, r18
    194a:	93 07       	cpc	r25, r19
    194c:	a4 07       	cpc	r26, r20
    194e:	b5 07       	cpc	r27, r21
    1950:	08 f4       	brcc	.+2      	; 0x1954 <_ZN6SdFile4readEPvj+0x212>
    1952:	13 cf       	rjmp	.-474    	; 0x177a <_ZN6SdFile4readEPvj+0x38>
    1954:	15 cf       	rjmp	.-470    	; 0x1780 <_ZN6SdFile4readEPvj+0x3e>
    1956:	cb 01       	movw	r24, r22
    1958:	ba 01       	movw	r22, r20
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	dc d4       	rcall	.+2488   	; 0x2316 <_ZN8SdVolume13cacheRawBlockEmh>
    195e:	88 23       	and	r24, r24
    1960:	09 f0       	breq	.+2      	; 0x1964 <_ZN6SdFile4readEPvj+0x222>
    1962:	a2 cf       	rjmp	.-188    	; 0x18a8 <_ZN6SdFile4readEPvj+0x166>
    1964:	ca cf       	rjmp	.-108    	; 0x18fa <_ZN6SdFile4readEPvj+0x1b8>

00001966 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	6c 01       	movw	r12, r24
  // error if not directory
  if (!isDir()) return NULL;
    197e:	fc 01       	movw	r30, r24
    1980:	85 81       	ldd	r24, Z+5	; 0x05
    1982:	82 30       	cpi	r24, 0x02	; 2
    1984:	68 f0       	brcs	.+26     	; 0x19a0 <_ZN6SdFile12readDirCacheEv+0x3a>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    1986:	e2 84       	ldd	r14, Z+10	; 0x0a
    1988:	f3 84       	ldd	r15, Z+11	; 0x0b
    198a:	04 85       	ldd	r16, Z+12	; 0x0c
    198c:	15 85       	ldd	r17, Z+13	; 0x0d
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    198e:	c6 01       	movw	r24, r12
    1990:	be 01       	movw	r22, r28
    1992:	6f 5f       	subi	r22, 0xFF	; 255
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	d3 de       	rcall	.-602    	; 0x1742 <_ZN6SdFile4readEPvj>
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	69 f0       	breq	.+26     	; 0x19ba <_ZN6SdFile12readDirCacheEv+0x54>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	c9 01       	movw	r24, r18
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	08 95       	ret
    19ba:	f6 01       	movw	r30, r12

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    19bc:	82 85       	ldd	r24, Z+10	; 0x0a
    19be:	93 85       	ldd	r25, Z+11	; 0x0b
    19c0:	a4 85       	ldd	r26, Z+12	; 0x0c
    19c2:	b5 85       	ldd	r27, Z+13	; 0x0d
    19c4:	4f 96       	adiw	r24, 0x1f	; 31
    19c6:	a1 1d       	adc	r26, r1
    19c8:	b1 1d       	adc	r27, r1
    19ca:	82 87       	std	Z+10, r24	; 0x0a
    19cc:	93 87       	std	Z+11, r25	; 0x0b
    19ce:	a4 87       	std	Z+12, r26	; 0x0c
    19d0:	b5 87       	std	Z+13, r27	; 0x0d
    19d2:	f5 e0       	ldi	r31, 0x05	; 5

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    19d4:	16 95       	lsr	r17
    19d6:	07 95       	ror	r16
    19d8:	f7 94       	ror	r15
    19da:	e7 94       	ror	r14
    19dc:	fa 95       	dec	r31
    19de:	d1 f7       	brne	.-12     	; 0x19d4 <_ZN6SdFile12readDirCacheEv+0x6e>
    19e0:	8e 2d       	mov	r24, r14
    19e2:	8f 70       	andi	r24, 0x0F	; 15
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	e5 e0       	ldi	r30, 0x05	; 5
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	ea 95       	dec	r30
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <_ZN6SdFile12readDirCacheEv+0x84>
    19f2:	26 58       	subi	r18, 0x86	; 134
    19f4:	3c 4f       	sbci	r19, 0xFC	; 252
    19f6:	d6 cf       	rjmp	.-84     	; 0x19a4 <_ZN6SdFile12readDirCacheEv+0x3e>

000019f8 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	ec 01       	movw	r28, r24
    1a02:	8b 01       	movw	r16, r22
  // error if file is already open
  if (isOpen()) return false;
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	88 23       	and	r24, r24
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <_ZN6SdFile8openRootEP8SdVolume+0x14>
    1a0a:	40 c0       	rjmp	.+128    	; 0x1a8c <_ZN6SdFile8openRootEP8SdVolume+0x94>
  /** \return The number of FAT structures on the volume. */
  uint8_t fatCount(void) const {return fatCount_;}
  /** \return The logical block number for the start of the first FAT. */
  uint32_t fatStartBlock(void) const {return fatStartBlock_;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType(void) const {return fatType_;}
    1a0c:	fb 01       	movw	r30, r22
    1a0e:	87 89       	ldd	r24, Z+23	; 0x17

  if (vol->fatType() == 16) {
    1a10:	80 31       	cpi	r24, 0x10	; 16
    1a12:	b1 f4       	brne	.+44     	; 0x1a40 <_ZN6SdFile8openRootEP8SdVolume+0x48>
    type_ = FAT_FILE_TYPE_ROOT16;
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    firstCluster_ = 0;
    1a18:	1f 8a       	std	Y+23, r1	; 0x17
    1a1a:	18 8e       	std	Y+24, r1	; 0x18
    1a1c:	19 8e       	std	Y+25, r1	; 0x19
    1a1e:	1a 8e       	std	Y+26, r1	; 0x1a
    fileSize_ = 32 * vol->rootDirEntryCount();
    1a20:	80 8d       	ldd	r24, Z+24	; 0x18
    1a22:	91 8d       	ldd	r25, Z+25	; 0x19
    1a24:	a0 e0       	ldi	r26, 0x00	; 0
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	45 e0       	ldi	r20, 0x05	; 5
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	aa 1f       	adc	r26, r26
    1a30:	bb 1f       	adc	r27, r27
    1a32:	4a 95       	dec	r20
    1a34:	d1 f7       	brne	.-12     	; 0x1a2a <_ZN6SdFile8openRootEP8SdVolume+0x32>
    1a36:	8b 8b       	std	Y+19, r24	; 0x13
    1a38:	9c 8b       	std	Y+20, r25	; 0x14
    1a3a:	ad 8b       	std	Y+21, r26	; 0x15
    1a3c:	be 8b       	std	Y+22, r27	; 0x16
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <_ZN6SdFile8openRootEP8SdVolume+0x70>
  } else if (vol->fatType() == 32) {
    1a40:	80 32       	cpi	r24, 0x20	; 32
    1a42:	21 f5       	brne	.+72     	; 0x1a8c <_ZN6SdFile8openRootEP8SdVolume+0x94>
    type_ = FAT_FILE_TYPE_ROOT32;
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	8d 83       	std	Y+5, r24	; 0x05
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
  /** \return The logical block number for the start of the root directory
       on FAT16 volumes or the first cluster number on FAT32 volumes. */
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    1a48:	fb 01       	movw	r30, r22
    1a4a:	42 8d       	ldd	r20, Z+26	; 0x1a
    1a4c:	53 8d       	ldd	r21, Z+27	; 0x1b
    1a4e:	64 8d       	ldd	r22, Z+28	; 0x1c
    1a50:	75 8d       	ldd	r23, Z+29	; 0x1d
    firstCluster_ = vol->rootDirStart();
    1a52:	4f 8b       	std	Y+23, r20	; 0x17
    1a54:	58 8f       	std	Y+24, r21	; 0x18
    1a56:	69 8f       	std	Y+25, r22	; 0x19
    1a58:	7a 8f       	std	Y+26, r23	; 0x1a
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    1a5a:	9e 01       	movw	r18, r28
    1a5c:	2d 5e       	subi	r18, 0xED	; 237
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	c8 01       	movw	r24, r16
    1a62:	3a d7       	rcall	.+3700   	; 0x28d8 <_ZNK8SdVolume9chainSizeEmPm>
    1a64:	88 23       	and	r24, r24
    1a66:	91 f0       	breq	.+36     	; 0x1a8c <_ZN6SdFile8openRootEP8SdVolume+0x94>
    1a68:	1c 8f       	std	Y+28, r17	; 0x1c
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    1a6a:	0b 8f       	std	Y+27, r16	; 0x1b
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
  // read only
  flags_ = O_READ;
    1a6e:	8c 83       	std	Y+4, r24	; 0x04
    1a70:	1e 82       	std	Y+6, r1	; 0x06

  // set to start of file
  curCluster_ = 0;
    1a72:	1f 82       	std	Y+7, r1	; 0x07
    1a74:	18 86       	std	Y+8, r1	; 0x08
    1a76:	19 86       	std	Y+9, r1	; 0x09
    1a78:	1a 86       	std	Y+10, r1	; 0x0a
  curPosition_ = 0;
    1a7a:	1b 86       	std	Y+11, r1	; 0x0b
    1a7c:	1c 86       	std	Y+12, r1	; 0x0c
    1a7e:	1d 86       	std	Y+13, r1	; 0x0d
    1a80:	1e 86       	std	Y+14, r1	; 0x0e

  // root has no directory entry
  dirBlock_ = 0;
    1a82:	1f 86       	std	Y+15, r1	; 0x0f
    1a84:	18 8a       	std	Y+16, r1	; 0x10
    1a86:	19 8a       	std	Y+17, r1	; 0x11
    1a88:	1a 8a       	std	Y+18, r1	; 0x12
  dirIndex_ = 0;
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <_ZN6SdFile8openRootEP8SdVolume+0x96>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
  return true;
    1a8e:	df 91       	pop	r29
}
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	08 95       	ret

00001a98 <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	ec 01       	movw	r28, r24
    1aa0:	14 2f       	mov	r17, r20
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    1aa2:	e6 2f       	mov	r30, r22
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	75 e0       	ldi	r23, 0x05	; 5
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	7a 95       	dec	r23
    1aae:	e1 f7       	brne	.-8      	; 0x1aa8 <_ZN6SdFile15openCachedEntryEhh+0x10>
    1ab0:	e6 58       	subi	r30, 0x86	; 134
    1ab2:	fc 4f       	sbci	r31, 0xFC	; 252

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    1ab4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ab6:	81 71       	andi	r24, 0x11	; 17
    1ab8:	21 f0       	breq	.+8      	; 0x1ac2 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    1aba:	84 2f       	mov	r24, r20
    1abc:	82 74       	andi	r24, 0x42	; 66
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    1ac0:	52 c0       	rjmp	.+164    	; 0x1b66 <_ZN6SdFile15openCachedEntryEhh+0xce>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    1ac2:	6a 8b       	std	Y+18, r22	; 0x12
  dirBlock_ = SdVolume::cacheBlockNumber_;
    1ac4:	80 91 28 02 	lds	r24, 0x0228
    1ac8:	90 91 29 02 	lds	r25, 0x0229
    1acc:	a0 91 2a 02 	lds	r26, 0x022A
    1ad0:	b0 91 2b 02 	lds	r27, 0x022B
    1ad4:	8e 87       	std	Y+14, r24	; 0x0e
    1ad6:	9f 87       	std	Y+15, r25	; 0x0f
    1ad8:	a8 8b       	std	Y+16, r26	; 0x10
    1ada:	b9 8b       	std	Y+17, r27	; 0x11

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    1adc:	84 89       	ldd	r24, Z+20	; 0x14
    1ade:	95 89       	ldd	r25, Z+21	; 0x15
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	55 27       	eor	r21, r21
    1ae8:	44 27       	eor	r20, r20
  firstCluster_ |= p->firstClusterLow;
    1aea:	82 8d       	ldd	r24, Z+26	; 0x1a
    1aec:	93 8d       	ldd	r25, Z+27	; 0x1b
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	48 2b       	or	r20, r24
    1af4:	59 2b       	or	r21, r25
    1af6:	6a 2b       	or	r22, r26
    1af8:	7b 2b       	or	r23, r27
    1afa:	4f 8b       	std	Y+23, r20	; 0x17
    1afc:	58 8f       	std	Y+24, r21	; 0x18
    1afe:	69 8f       	std	Y+25, r22	; 0x19
    1b00:	7a 8f       	std	Y+26, r23	; 0x1a
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    1b02:	83 85       	ldd	r24, Z+11	; 0x0b
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	88 71       	andi	r24, 0x18	; 24
    1b08:	90 70       	andi	r25, 0x00	; 0

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	51 f4       	brne	.+20     	; 0x1b22 <_ZN6SdFile15openCachedEntryEhh+0x8a>
    fileSize_ = p->fileSize;
    1b0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b10:	95 8d       	ldd	r25, Z+29	; 0x1d
    1b12:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1b14:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1b16:	8b 8b       	std	Y+19, r24	; 0x13
    1b18:	9c 8b       	std	Y+20, r25	; 0x14
    1b1a:	ad 8b       	std	Y+21, r26	; 0x15
    1b1c:	be 8b       	std	Y+22, r27	; 0x16
    type_ = FAT_FILE_TYPE_NORMAL;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	0b c0       	rjmp	.+22     	; 0x1b38 <_ZN6SdFile15openCachedEntryEhh+0xa0>
  } else if (DIR_IS_SUBDIR(p)) {
    1b22:	40 97       	sbiw	r24, 0x10	; 16
    1b24:	01 f5       	brne	.+64     	; 0x1b66 <_ZN6SdFile15openCachedEntryEhh+0xce>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    1b26:	9e 01       	movw	r18, r28
    1b28:	2d 5e       	subi	r18, 0xED	; 237
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b30:	d3 d6       	rcall	.+3494   	; 0x28d8 <_ZNK8SdVolume9chainSizeEmPm>
    1b32:	88 23       	and	r24, r24
    1b34:	c1 f0       	breq	.+48     	; 0x1b66 <_ZN6SdFile15openCachedEntryEhh+0xce>
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    type_ = FAT_FILE_TYPE_SUBDIR;
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	81 2f       	mov	r24, r17
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    1b3c:	8f 70       	andi	r24, 0x0F	; 15
    1b3e:	8c 83       	std	Y+4, r24	; 0x04
    1b40:	1e 82       	std	Y+6, r1	; 0x06

  // set to start of file
  curCluster_ = 0;
    1b42:	1f 82       	std	Y+7, r1	; 0x07
    1b44:	18 86       	std	Y+8, r1	; 0x08
    1b46:	19 86       	std	Y+9, r1	; 0x09
    1b48:	1a 86       	std	Y+10, r1	; 0x0a
  curPosition_ = 0;
    1b4a:	1b 86       	std	Y+11, r1	; 0x0b
    1b4c:	1c 86       	std	Y+12, r1	; 0x0c
    1b4e:	1d 86       	std	Y+13, r1	; 0x0d
    1b50:	16 fd       	sbrc	r17, 6

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <_ZN6SdFile15openCachedEntryEhh+0xc0>
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	08 c0       	rjmp	.+16     	; 0x1b68 <_ZN6SdFile15openCachedEntryEhh+0xd0>
    1b58:	ce 01       	movw	r24, r28
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	0f dd       	rcall	.-1506   	; 0x1582 <_ZN6SdFile8truncateEm>
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <_ZN6SdFile15openCachedEntryEhh+0xd0>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
  return true;
}
    1b6c:	1f 91       	pop	r17
    1b6e:	08 95       	ret

00001b70 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    1b76:	9c 01       	movw	r18, r24
    1b78:	2a 5f       	subi	r18, 0xFA	; 250
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	15 d7       	rcall	.+3626   	; 0x29b4 <_ZN8SdVolume15allocContiguousEmPm>
    1b8a:	88 23       	and	r24, r24
    1b8c:	a1 f0       	breq	.+40     	; 0x1bb6 <_ZN6SdFile10addClusterEv+0x46>
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	a9 8d       	ldd	r26, Y+25	; 0x19
    1b94:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	a1 05       	cpc	r26, r1
    1b9a:	b1 05       	cpc	r27, r1
    1b9c:	59 f4       	brne	.+22     	; 0x1bb4 <_ZN6SdFile10addClusterEv+0x44>
    1b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    firstCluster_ = curCluster_;
    1ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba2:	a8 85       	ldd	r26, Y+8	; 0x08
    1ba4:	b9 85       	ldd	r27, Y+9	; 0x09
    1ba6:	8f 8b       	std	Y+23, r24	; 0x17
    1ba8:	98 8f       	std	Y+24, r25	; 0x18
    1baa:	a9 8f       	std	Y+25, r26	; 0x19
    1bac:	ba 8f       	std	Y+26, r27	; 0x1a
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    flags_ |= F_FILE_DIR_DIRTY;
    1bb0:	80 68       	ori	r24, 0x80	; 128
    1bb2:	8c 83       	std	Y+4, r24	; 0x04
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	df 91       	pop	r29
  }
  return true;
}
    1bb8:	cf 91       	pop	r28
    1bba:	08 95       	ret

00001bbc <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    1bbc:	2f 92       	push	r2
    1bbe:	3f 92       	push	r3
    1bc0:	4f 92       	push	r4
    1bc2:	5f 92       	push	r5
    1bc4:	7f 92       	push	r7
    1bc6:	8f 92       	push	r8
    1bc8:	9f 92       	push	r9
    1bca:	af 92       	push	r10
    1bcc:	bf 92       	push	r11
    1bce:	cf 92       	push	r12
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <_ZN6SdFile5writeEPKvj+0x24>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <_ZN6SdFile5writeEPKvj+0x26>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <_ZN6SdFile5writeEPKvj+0x28>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	6c 01       	movw	r12, r24
    1bea:	16 2f       	mov	r17, r22
    1bec:	07 2f       	mov	r16, r23
    1bee:	5e 83       	std	Y+6, r21	; 0x06
    1bf0:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	15 96       	adiw	r26, 0x05	; 5
    1bf6:	8c 91       	ld	r24, X
    1bf8:	15 97       	sbiw	r26, 0x05	; 5
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <_ZN6SdFile5writeEPKvj+0x44>
    1bfe:	69 c1       	rjmp	.+722    	; 0x1ed2 <_ZN6SdFile5writeEPKvj+0x316>
    1c00:	14 96       	adiw	r26, 0x04	; 4
    1c02:	8c 91       	ld	r24, X
    1c04:	81 ff       	sbrs	r24, 1
    1c06:	65 c1       	rjmp	.+714    	; 0x1ed2 <_ZN6SdFile5writeEPKvj+0x316>
    1c08:	87 c1       	rjmp	.+782    	; 0x1f18 <_ZN6SdFile5writeEPKvj+0x35c>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1c0a:	f6 01       	movw	r30, r12
    1c0c:	43 89       	ldd	r20, Z+19	; 0x13
    1c0e:	54 89       	ldd	r21, Z+20	; 0x14
    1c10:	65 89       	ldd	r22, Z+21	; 0x15
    1c12:	76 89       	ldd	r23, Z+22	; 0x16
    1c14:	82 85       	ldd	r24, Z+10	; 0x0a
    1c16:	93 85       	ldd	r25, Z+11	; 0x0b
    1c18:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c1a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c1c:	84 17       	cp	r24, r20
    1c1e:	95 07       	cpc	r25, r21
    1c20:	a6 07       	cpc	r26, r22
    1c22:	b7 07       	cpc	r27, r23
    1c24:	29 f0       	breq	.+10     	; 0x1c30 <_ZN6SdFile5writeEPKvj+0x74>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1c26:	c6 01       	movw	r24, r12
    1c28:	94 db       	rcall	.-2264   	; 0x1352 <_ZN6SdFile7seekSetEm>
    1c2a:	88 23       	and	r24, r24
    if (!seekEnd()) goto writeErrorReturn;
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <_ZN6SdFile5writeEPKvj+0x74>
    1c2e:	51 c1       	rjmp	.+674    	; 0x1ed2 <_ZN6SdFile5writeEPKvj+0x316>
    1c30:	81 2f       	mov	r24, r17
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    1c32:	90 2f       	mov	r25, r16
    1c34:	9c 01       	movw	r18, r24
    1c36:	29 01       	movw	r4, r18
    1c38:	2d 80       	ldd	r2, Y+5	; 0x05
    1c3a:	3e 80       	ldd	r3, Y+6	; 0x06
    1c3c:	12 c1       	rjmp	.+548    	; 0x1e62 <_ZN6SdFile5writeEPKvj+0x2a6>
    1c3e:	d6 01       	movw	r26, r12
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    1c40:	5b 96       	adiw	r26, 0x1b	; 27
    1c42:	ed 91       	ld	r30, X+
    1c44:	fc 91       	ld	r31, X
    1c46:	5c 97       	sbiw	r26, 0x1c	; 28
    1c48:	da 01       	movw	r26, r20
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    1c4a:	c9 01       	movw	r24, r18
    1c4c:	19 e0       	ldi	r17, 0x09	; 9
    1c4e:	b6 95       	lsr	r27
    1c50:	a7 95       	ror	r26
    1c52:	97 95       	ror	r25
    1c54:	87 95       	ror	r24
    1c56:	1a 95       	dec	r17
    1c58:	d1 f7       	brne	.-12     	; 0x1c4e <_ZN6SdFile5writeEPKvj+0x92>
    1c5a:	74 80       	ldd	r7, Z+4	; 0x04
    1c5c:	7a 94       	dec	r7
    1c5e:	78 22       	and	r7, r24
    1c60:	7f ef       	ldi	r23, 0xFF	; 255
    uint16_t blockOffset = curPosition_ & 0X1FF;
    1c62:	87 2e       	mov	r8, r23
    1c64:	71 e0       	ldi	r23, 0x01	; 1
    1c66:	97 2e       	mov	r9, r23
    1c68:	82 22       	and	r8, r18
    1c6a:	93 22       	and	r9, r19
    1c6c:	77 20       	and	r7, r7
    if (blockOfCluster == 0 && blockOffset == 0) {
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <_ZN6SdFile5writeEPKvj+0xb6>
    1c70:	4c c0       	rjmp	.+152    	; 0x1d0a <_ZN6SdFile5writeEPKvj+0x14e>
    1c72:	81 14       	cp	r8, r1
    1c74:	91 04       	cpc	r9, r1
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <_ZN6SdFile5writeEPKvj+0xbe>
    1c78:	48 c0       	rjmp	.+144    	; 0x1d0a <_ZN6SdFile5writeEPKvj+0x14e>
    1c7a:	d6 01       	movw	r26, r12
      // start of new cluster
      if (curCluster_ == 0) {
    1c7c:	16 96       	adiw	r26, 0x06	; 6
    1c7e:	4d 91       	ld	r20, X+
    1c80:	5d 91       	ld	r21, X+
    1c82:	6d 91       	ld	r22, X+
    1c84:	7c 91       	ld	r23, X
    1c86:	19 97       	sbiw	r26, 0x09	; 9
    1c88:	41 15       	cp	r20, r1
    1c8a:	51 05       	cpc	r21, r1
    1c8c:	61 05       	cpc	r22, r1
    1c8e:	71 05       	cpc	r23, r1
    1c90:	81 f4       	brne	.+32     	; 0x1cb2 <_ZN6SdFile5writeEPKvj+0xf6>
    1c92:	57 96       	adiw	r26, 0x17	; 23
        if (firstCluster_ == 0) {
    1c94:	8d 91       	ld	r24, X+
    1c96:	9d 91       	ld	r25, X+
    1c98:	0d 90       	ld	r0, X+
    1c9a:	bc 91       	ld	r27, X
    1c9c:	a0 2d       	mov	r26, r0
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	a1 05       	cpc	r26, r1
    1ca2:	b1 05       	cpc	r27, r1
    1ca4:	41 f1       	breq	.+80     	; 0x1cf6 <_ZN6SdFile5writeEPKvj+0x13a>
    1ca6:	f6 01       	movw	r30, r12
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = firstCluster_;
    1ca8:	86 83       	std	Z+6, r24	; 0x06
    1caa:	97 83       	std	Z+7, r25	; 0x07
    1cac:	a0 87       	std	Z+8, r26	; 0x08
    1cae:	b1 87       	std	Z+9, r27	; 0x09
    1cb0:	2c c0       	rjmp	.+88     	; 0x1d0a <_ZN6SdFile5writeEPKvj+0x14e>
    1cb2:	cf 01       	movw	r24, r30
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1cb4:	9e 01       	movw	r18, r28
    1cb6:	2f 5f       	subi	r18, 0xFF	; 255
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cba:	45 d5       	rcall	.+2698   	; 0x2746 <_ZNK8SdVolume6fatGetEmPm>
    1cbc:	88 23       	and	r24, r24
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <_ZN6SdFile5writeEPKvj+0x106>
    1cc0:	0f c1       	rjmp	.+542    	; 0x1ee0 <_ZN6SdFile5writeEPKvj+0x324>
    1cc2:	29 81       	ldd	r18, Y+1	; 0x01
    1cc4:	3a 81       	ldd	r19, Y+2	; 0x02
        if (vol_->isEOC(next)) {
    1cc6:	4b 81       	ldd	r20, Y+3	; 0x03
    1cc8:	5c 81       	ldd	r21, Y+4	; 0x04
    1cca:	d6 01       	movw	r26, r12
    1ccc:	5b 96       	adiw	r26, 0x1b	; 27
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1cce:	ed 91       	ld	r30, X+
    1cd0:	fc 91       	ld	r31, X
    1cd2:	5c 97       	sbiw	r26, 0x1c	; 28
    1cd4:	87 89       	ldd	r24, Z+23	; 0x17
    1cd6:	80 31       	cpi	r24, 0x10	; 16
    1cd8:	29 f0       	breq	.+10     	; 0x1ce4 <_ZN6SdFile5writeEPKvj+0x128>
    1cda:	88 ef       	ldi	r24, 0xF8	; 248
    1cdc:	9f ef       	ldi	r25, 0xFF	; 255
    1cde:	af ef       	ldi	r26, 0xFF	; 255
    1ce0:	bf e0       	ldi	r27, 0x0F	; 15
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <_ZN6SdFile5writeEPKvj+0x130>
    1ce4:	88 ef       	ldi	r24, 0xF8	; 248
    1ce6:	9f ef       	ldi	r25, 0xFF	; 255
    1ce8:	a0 e0       	ldi	r26, 0x00	; 0
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	28 17       	cp	r18, r24
    1cee:	39 07       	cpc	r19, r25
    1cf0:	4a 07       	cpc	r20, r26
    1cf2:	5b 07       	cpc	r21, r27
    1cf4:	28 f0       	brcs	.+10     	; 0x1d00 <_ZN6SdFile5writeEPKvj+0x144>
    1cf6:	c6 01       	movw	r24, r12
    1cf8:	3b df       	rcall	.-394    	; 0x1b70 <_ZN6SdFile10addClusterEv>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1cfa:	88 23       	and	r24, r24
    1cfc:	31 f4       	brne	.+12     	; 0x1d0a <_ZN6SdFile5writeEPKvj+0x14e>
    1cfe:	e9 c0       	rjmp	.+466    	; 0x1ed2 <_ZN6SdFile5writeEPKvj+0x316>
    1d00:	f6 01       	movw	r30, r12
    1d02:	26 83       	std	Z+6, r18	; 0x06
    1d04:	37 83       	std	Z+7, r19	; 0x07
        } else {
          curCluster_ = next;
    1d06:	40 87       	std	Z+8, r20	; 0x08
    1d08:	51 87       	std	Z+9, r21	; 0x09
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	92 e0       	ldi	r25, 0x02	; 2
    1d0e:	88 19       	sub	r24, r8
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1d10:	99 09       	sbc	r25, r9
    1d12:	51 01       	movw	r10, r2
    1d14:	82 15       	cp	r24, r2
    1d16:	93 05       	cpc	r25, r3
    1d18:	08 f4       	brcc	.+2      	; 0x1d1c <_ZN6SdFile5writeEPKvj+0x160>
    1d1a:	5c 01       	movw	r10, r24
    1d1c:	d6 01       	movw	r26, r12
    1d1e:	5b 96       	adiw	r26, 0x1b	; 27
    1d20:	ed 91       	ld	r30, X+

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1d22:	fc 91       	ld	r31, X
    1d24:	5c 97       	sbiw	r26, 0x1c	; 28
    1d26:	16 96       	adiw	r26, 0x06	; 6
    1d28:	ed 90       	ld	r14, X+
    1d2a:	fd 90       	ld	r15, X+
    1d2c:	0d 91       	ld	r16, X+
    1d2e:	1c 91       	ld	r17, X
    1d30:	19 97       	sbiw	r26, 0x09	; 9
    1d32:	8e ef       	ldi	r24, 0xFE	; 254
    1d34:	9f ef       	ldi	r25, 0xFF	; 255
    1d36:	af ef       	ldi	r26, 0xFF	; 255
    1d38:	bf ef       	ldi	r27, 0xFF	; 255
    1d3a:	e8 0e       	add	r14, r24
    1d3c:	f9 1e       	adc	r15, r25
    1d3e:	0a 1f       	adc	r16, r26
    1d40:	1b 1f       	adc	r17, r27
    1d42:	05 84       	ldd	r0, Z+13	; 0x0d
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <_ZN6SdFile5writeEPKvj+0x192>
    1d46:	ee 0c       	add	r14, r14
    1d48:	ff 1c       	adc	r15, r15
    1d4a:	00 1f       	adc	r16, r16
    1d4c:	11 1f       	adc	r17, r17
    1d4e:	0a 94       	dec	r0
    1d50:	d2 f7       	brpl	.-12     	; 0x1d46 <_ZN6SdFile5writeEPKvj+0x18a>
    1d52:	86 85       	ldd	r24, Z+14	; 0x0e
    1d54:	97 85       	ldd	r25, Z+15	; 0x0f
    1d56:	a0 89       	ldd	r26, Z+16	; 0x10
    1d58:	b1 89       	ldd	r27, Z+17	; 0x11
    1d5a:	e8 0e       	add	r14, r24
    1d5c:	f9 1e       	adc	r15, r25
    1d5e:	0a 1f       	adc	r16, r26
    1d60:	1b 1f       	adc	r17, r27
    1d62:	e7 0c       	add	r14, r7
    1d64:	f1 1c       	adc	r15, r1
    1d66:	01 1d       	adc	r16, r1
    1d68:	11 1d       	adc	r17, r1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a9 16       	cp	r10, r25
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    if (n == 512) {
    1d70:	b9 06       	cpc	r11, r25
    1d72:	49 f5       	brne	.+82     	; 0x1dc6 <_ZN6SdFile5writeEPKvj+0x20a>
    1d74:	80 91 28 02 	lds	r24, 0x0228
    1d78:	90 91 29 02 	lds	r25, 0x0229
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    1d7c:	a0 91 2a 02 	lds	r26, 0x022A
    1d80:	b0 91 2b 02 	lds	r27, 0x022B
    1d84:	8e 15       	cp	r24, r14
    1d86:	9f 05       	cpc	r25, r15
    1d88:	a0 07       	cpc	r26, r16
    1d8a:	b1 07       	cpc	r27, r17
    1d8c:	61 f4       	brne	.+24     	; 0x1da6 <_ZN6SdFile5writeEPKvj+0x1ea>
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	9f ef       	ldi	r25, 0xFF	; 255
    1d92:	af ef       	ldi	r26, 0xFF	; 255
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    1d94:	bf ef       	ldi	r27, 0xFF	; 255
    1d96:	80 93 28 02 	sts	0x0228, r24
    1d9a:	90 93 29 02 	sts	0x0229, r25
    1d9e:	a0 93 2a 02 	sts	0x022A, r26
    1da2:	b0 93 2b 02 	sts	0x022B, r27
    1da6:	80 91 7a 05 	lds	r24, 0x057A
    1daa:	90 91 7b 05 	lds	r25, 0x057B
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1dae:	b8 01       	movw	r22, r16
    1db0:	a7 01       	movw	r20, r14
    1db2:	92 01       	movw	r18, r4
    1db4:	c5 d8       	rcall	.-3702   	; 0xf40 <_ZN7Sd2Card10writeBlockEmPKh>
    1db6:	88 23       	and	r24, r24
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <_ZN6SdFile5writeEPKvj+0x200>
    1dba:	8b c0       	rjmp	.+278    	; 0x1ed2 <_ZN6SdFile5writeEPKvj+0x316>
    1dbc:	a0 e0       	ldi	r26, 0x00	; 0
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1dbe:	b2 e0       	ldi	r27, 0x02	; 2
    1dc0:	4a 0e       	add	r4, r26
    1dc2:	5b 1e       	adc	r5, r27
      src += 512;
    1dc4:	3c c0       	rjmp	.+120    	; 0x1e3e <_ZN6SdFile5writeEPKvj+0x282>
    1dc6:	81 14       	cp	r8, r1
    1dc8:	91 04       	cpc	r9, r1
    1dca:	01 f5       	brne	.+64     	; 0x1e0c <_ZN6SdFile5writeEPKvj+0x250>
    1dcc:	f6 01       	movw	r30, r12
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1dce:	22 85       	ldd	r18, Z+10	; 0x0a
    1dd0:	33 85       	ldd	r19, Z+11	; 0x0b
    1dd2:	44 85       	ldd	r20, Z+12	; 0x0c
    1dd4:	55 85       	ldd	r21, Z+13	; 0x0d
    1dd6:	83 89       	ldd	r24, Z+19	; 0x13
    1dd8:	94 89       	ldd	r25, Z+20	; 0x14
    1dda:	a5 89       	ldd	r26, Z+21	; 0x15
    1ddc:	b6 89       	ldd	r27, Z+22	; 0x16
    1dde:	28 17       	cp	r18, r24
    1de0:	39 07       	cpc	r19, r25
    1de2:	4a 07       	cpc	r20, r26
    1de4:	5b 07       	cpc	r21, r27
    1de6:	90 f0       	brcs	.+36     	; 0x1e0c <_ZN6SdFile5writeEPKvj+0x250>
    1de8:	38 d2       	rcall	.+1136   	; 0x225a <_ZN8SdVolume10cacheFlushEv>
    1dea:	88 23       	and	r24, r24
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <_ZN6SdFile5writeEPKvj+0x234>
    1dee:	71 c0       	rjmp	.+226    	; 0x1ed2 <_ZN6SdFile5writeEPKvj+0x316>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1df0:	e0 92 28 02 	sts	0x0228, r14
    1df4:	f0 92 29 02 	sts	0x0229, r15
    1df8:	00 93 2a 02 	sts	0x022A, r16
        SdVolume::cacheBlockNumber_ = block;
    1dfc:	10 93 2b 02 	sts	0x022B, r17
    1e00:	80 91 7c 05 	lds	r24, 0x057C
    1e04:	81 60       	ori	r24, 0x01	; 1
    1e06:	80 93 7c 05 	sts	0x057C, r24
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1e0a:	07 c0       	rjmp	.+14     	; 0x1e1a <_ZN6SdFile5writeEPKvj+0x25e>
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	b7 01       	movw	r22, r14
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	81 d2       	rcall	.+1282   	; 0x2316 <_ZN8SdVolume13cacheRawBlockEmh>
    1e14:	88 23       	and	r24, r24
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <_ZN6SdFile5writeEPKvj+0x25e>
    1e18:	5c c0       	rjmp	.+184    	; 0x1ed2 <_ZN6SdFile5writeEPKvj+0x316>
    1e1a:	94 01       	movw	r18, r8
    1e1c:	26 58       	subi	r18, 0x86	; 134
    1e1e:	3c 4f       	sbci	r19, 0xFC	; 252
    1e20:	a9 01       	movw	r20, r18
    1e22:	4a 0d       	add	r20, r10
    1e24:	5b 1d       	adc	r21, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    1e26:	d2 01       	movw	r26, r4
    1e28:	f9 01       	movw	r30, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <_ZN6SdFile5writeEPKvj+0x274>
      uint8_t* end = dst + n;
    1e2c:	8d 91       	ld	r24, X+
    1e2e:	81 93       	st	Z+, r24
    1e30:	e4 17       	cp	r30, r20
    1e32:	f5 07       	cpc	r31, r21
    1e34:	d9 f7       	brne	.-10     	; 0x1e2c <_ZN6SdFile5writeEPKvj+0x270>
    1e36:	e2 1b       	sub	r30, r18
      while (dst != end) *dst++ = *src++;
    1e38:	f3 0b       	sbc	r31, r19
    1e3a:	4e 0e       	add	r4, r30
    1e3c:	5f 1e       	adc	r5, r31
    1e3e:	2a 18       	sub	r2, r10
    1e40:	3b 08       	sbc	r3, r11
    1e42:	95 01       	movw	r18, r10
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	f6 01       	movw	r30, r12
    }
    nToWrite -= n;
    1e4a:	82 85       	ldd	r24, Z+10	; 0x0a
    1e4c:	93 85       	ldd	r25, Z+11	; 0x0b
    curPosition_ += n;
    1e4e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e50:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e52:	82 0f       	add	r24, r18
    1e54:	93 1f       	adc	r25, r19
    1e56:	a4 1f       	adc	r26, r20
    1e58:	b5 1f       	adc	r27, r21
    1e5a:	82 87       	std	Z+10, r24	; 0x0a
    1e5c:	93 87       	std	Z+11, r25	; 0x0b
    1e5e:	a4 87       	std	Z+12, r26	; 0x0c
    1e60:	b5 87       	std	Z+13, r27	; 0x0d
    1e62:	d6 01       	movw	r26, r12
    1e64:	1a 96       	adiw	r26, 0x0a	; 10
    1e66:	2d 91       	ld	r18, X+
    1e68:	3d 91       	ld	r19, X+
    1e6a:	4d 91       	ld	r20, X+
    1e6c:	5c 91       	ld	r21, X
    1e6e:	1d 97       	sbiw	r26, 0x0d	; 13
    1e70:	21 14       	cp	r2, r1
    1e72:	31 04       	cpc	r3, r1
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <_ZN6SdFile5writeEPKvj+0x2bc>
    1e76:	e3 ce       	rjmp	.-570    	; 0x1c3e <_ZN6SdFile5writeEPKvj+0x82>
    1e78:	53 96       	adiw	r26, 0x13	; 19
    1e7a:	8d 91       	ld	r24, X+
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1e7c:	9d 91       	ld	r25, X+
    1e7e:	0d 90       	ld	r0, X+
    1e80:	bc 91       	ld	r27, X
    1e82:	a0 2d       	mov	r26, r0
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1e84:	82 17       	cp	r24, r18
    1e86:	93 07       	cpc	r25, r19
    1e88:	a4 07       	cpc	r26, r20
    1e8a:	b5 07       	cpc	r27, r21
    1e8c:	48 f4       	brcc	.+18     	; 0x1ea0 <_ZN6SdFile5writeEPKvj+0x2e4>
    1e8e:	f6 01       	movw	r30, r12
    1e90:	23 8b       	std	Z+19, r18	; 0x13
    1e92:	34 8b       	std	Z+20, r19	; 0x14
    1e94:	45 8b       	std	Z+21, r20	; 0x15
    1e96:	56 8b       	std	Z+22, r21	; 0x16
    1e98:	84 81       	ldd	r24, Z+4	; 0x04
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    1e9a:	80 68       	ori	r24, 0x80	; 128
    1e9c:	84 83       	std	Z+4, r24	; 0x04
    1e9e:	11 c0       	rjmp	.+34     	; 0x1ec2 <_ZN6SdFile5writeEPKvj+0x306>
    1ea0:	80 91 78 03 	lds	r24, 0x0378
    flags_ |= F_FILE_DIR_DIRTY;
    1ea4:	90 91 79 03 	lds	r25, 0x0379
    1ea8:	89 2b       	or	r24, r25
    1eaa:	59 f0       	breq	.+22     	; 0x1ec2 <_ZN6SdFile5writeEPKvj+0x306>
  } else if (dateTime_ && nbyte) {
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	89 2b       	or	r24, r25
    1eb2:	39 f0       	breq	.+14     	; 0x1ec2 <_ZN6SdFile5writeEPKvj+0x306>
    1eb4:	d6 01       	movw	r26, r12
    1eb6:	14 96       	adiw	r26, 0x04	; 4
    1eb8:	8c 91       	ld	r24, X
    1eba:	14 97       	sbiw	r26, 0x04	; 4
    1ebc:	80 68       	ori	r24, 0x80	; 128
    1ebe:	14 96       	adiw	r26, 0x04	; 4
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1ec0:	8c 93       	st	X, r24
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	84 81       	ldd	r24, Z+4	; 0x04
    1ec6:	83 ff       	sbrs	r24, 3
    1ec8:	0d c0       	rjmp	.+26     	; 0x1ee4 <_ZN6SdFile5writeEPKvj+0x328>
    1eca:	c6 01       	movw	r24, r12
    1ecc:	07 db       	rcall	.-2546   	; 0x14dc <_ZN6SdFile4syncEv>
  }

  if (flags_ & O_SYNC) {
    1ece:	88 23       	and	r24, r24
    1ed0:	49 f4       	brne	.+18     	; 0x1ee4 <_ZN6SdFile5writeEPKvj+0x328>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	d6 01       	movw	r26, r12
    1ed8:	13 96       	adiw	r26, 0x03	; 3
    1eda:	9c 93       	st	X, r25
    1edc:	8e 93       	st	-X, r24
    1ede:	12 97       	sbiw	r26, 0x02	; 2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1ee0:	1e 82       	std	Y+6, r1	; 0x06
    1ee2:	1d 82       	std	Y+5, r1	; 0x05
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	26 96       	adiw	r28, 0x06	; 6
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	bf 90       	pop	r11
    1f06:	af 90       	pop	r10
    1f08:	9f 90       	pop	r9
    1f0a:	8f 90       	pop	r8
    1f0c:	7f 90       	pop	r7
    1f0e:	5f 90       	pop	r5
    1f10:	4f 90       	pop	r4
    1f12:	3f 90       	pop	r3
    1f14:	2f 90       	pop	r2
    1f16:	08 95       	ret
    1f18:	82 fd       	sbrc	r24, 2
    1f1a:	77 ce       	rjmp	.-786    	; 0x1c0a <_ZN6SdFile5writeEPKvj+0x4e>
    1f1c:	89 ce       	rjmp	.-750    	; 0x1c30 <_ZN6SdFile5writeEPKvj+0x74>

00001f1e <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	0f 92       	push	r0
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    1f2a:	be 01       	movw	r22, r28
    1f2c:	6f 5f       	subi	r22, 0xFF	; 255
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	43 de       	rcall	.-890    	; 0x1bbc <_ZN6SdFile5writeEPKvj>
    1f36:	0f 90       	pop	r0
}
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <_ZN6SdFile13addDirClusterEv>:
  return true;
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    1f3e:	df 92       	push	r13
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	ec 01       	movw	r28, r24
  if (!addCluster()) return false;
    1f4e:	10 de       	rcall	.-992    	; 0x1b70 <_ZN6SdFile10addClusterEv>
    1f50:	88 23       	and	r24, r24
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <_ZN6SdFile13addDirClusterEv+0x18>
    1f54:	4d c0       	rjmp	.+154    	; 0x1ff0 <_ZN6SdFile13addDirClusterEv+0xb2>
    1f56:	eb 8d       	ldd	r30, Y+27	; 0x1b

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    1f58:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1f5a:	ee 80       	ldd	r14, Y+6	; 0x06
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    1f5c:	ff 80       	ldd	r15, Y+7	; 0x07
    1f5e:	08 85       	ldd	r16, Y+8	; 0x08
    1f60:	19 85       	ldd	r17, Y+9	; 0x09
    1f62:	8e ef       	ldi	r24, 0xFE	; 254
    1f64:	9f ef       	ldi	r25, 0xFF	; 255
    1f66:	af ef       	ldi	r26, 0xFF	; 255
    1f68:	bf ef       	ldi	r27, 0xFF	; 255
    1f6a:	e8 0e       	add	r14, r24
    1f6c:	f9 1e       	adc	r15, r25
    1f6e:	0a 1f       	adc	r16, r26
    1f70:	1b 1f       	adc	r17, r27
    1f72:	05 84       	ldd	r0, Z+13	; 0x0d
    1f74:	04 c0       	rjmp	.+8      	; 0x1f7e <_ZN6SdFile13addDirClusterEv+0x40>
    1f76:	ee 0c       	add	r14, r14
    1f78:	ff 1c       	adc	r15, r15
    1f7a:	00 1f       	adc	r16, r16
    1f7c:	11 1f       	adc	r17, r17
    1f7e:	0a 94       	dec	r0
    1f80:	d2 f7       	brpl	.-12     	; 0x1f76 <_ZN6SdFile13addDirClusterEv+0x38>
    1f82:	86 85       	ldd	r24, Z+14	; 0x0e
    1f84:	97 85       	ldd	r25, Z+15	; 0x0f
    1f86:	a0 89       	ldd	r26, Z+16	; 0x10
    1f88:	b1 89       	ldd	r27, Z+17	; 0x11
    1f8a:	e8 0e       	add	r14, r24
    1f8c:	f9 1e       	adc	r15, r25
    1f8e:	0a 1f       	adc	r16, r26
    1f90:	1b 1f       	adc	r17, r27
    1f92:	d4 80       	ldd	r13, Z+4	; 0x04
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    1f94:	08 94       	sec
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    1f96:	e1 08       	sbc	r14, r1
    1f98:	f1 08       	sbc	r15, r1
    1f9a:	01 09       	sbc	r16, r1
    1f9c:	11 09       	sbc	r17, r1
    1f9e:	0a c0       	rjmp	.+20     	; 0x1fb4 <_ZN6SdFile13addDirClusterEv+0x76>
    1fa0:	c8 01       	movw	r24, r16
    1fa2:	b7 01       	movw	r22, r14
    1fa4:	6d 0d       	add	r22, r13
    1fa6:	71 1d       	adc	r23, r1
    1fa8:	81 1d       	adc	r24, r1
    1faa:	91 1d       	adc	r25, r1
    1fac:	91 d1       	rcall	.+802    	; 0x22d0 <_ZN8SdVolume14cacheZeroBlockEm>
    1fae:	88 23       	and	r24, r24
    1fb0:	f9 f0       	breq	.+62     	; 0x1ff0 <_ZN6SdFile13addDirClusterEv+0xb2>
    1fb2:	da 94       	dec	r13
    1fb4:	dd 20       	and	r13, r13
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    1fb6:	a1 f7       	brne	.-24     	; 0x1fa0 <_ZN6SdFile13addDirClusterEv+0x62>
    1fb8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1fba:	fc 8d       	ldd	r31, Y+28	; 0x1c
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	32 e0       	ldi	r19, 0x02	; 2
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	05 84       	ldd	r0, Z+13	; 0x0d
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <_ZN6SdFile13addDirClusterEv+0x92>
    1fc8:	22 0f       	add	r18, r18
    1fca:	33 1f       	adc	r19, r19
    1fcc:	44 1f       	adc	r20, r20
    1fce:	55 1f       	adc	r21, r21
    1fd0:	0a 94       	dec	r0
    1fd2:	d2 f7       	brpl	.-12     	; 0x1fc8 <_ZN6SdFile13addDirClusterEv+0x8a>
    1fd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd8:	ad 89       	ldd	r26, Y+21	; 0x15
    1fda:	be 89       	ldd	r27, Y+22	; 0x16
    1fdc:	82 0f       	add	r24, r18
    1fde:	93 1f       	adc	r25, r19
    1fe0:	a4 1f       	adc	r26, r20
    1fe2:	b5 1f       	adc	r27, r21
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
    1fe6:	9c 8b       	std	Y+20, r25	; 0x14
    1fe8:	ad 8b       	std	Y+21, r26	; 0x15
    1fea:	be 8b       	std	Y+22, r27	; 0x16
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <_ZN6SdFile13addDirClusterEv+0xb4>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	df 91       	pop	r29
  return true;
    1ff4:	cf 91       	pop	r28
}
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	08 95       	ret

00002002 <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    2002:	6f 92       	push	r6
    2004:	7f 92       	push	r7
    2006:	8f 92       	push	r8
    2008:	9f 92       	push	r9
    200a:	af 92       	push	r10
    200c:	bf 92       	push	r11
    200e:	cf 92       	push	r12
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	2b 97       	sbiw	r28, 0x0b	; 11
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	5c 01       	movw	r10, r24
    2030:	6b 01       	movw	r12, r22
    2032:	82 2e       	mov	r8, r18
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    2034:	dc 01       	movw	r26, r24
    2036:	15 96       	adiw	r26, 0x05	; 5
    2038:	8c 91       	ld	r24, X
    203a:	88 23       	and	r24, r24
    203c:	09 f0       	breq	.+2      	; 0x2040 <_ZN6SdFile4openEPS_PKch+0x3e>
    203e:	cc c0       	rjmp	.+408    	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>

  if (!make83Name(fileName, dname)) return false;
    2040:	ca 01       	movw	r24, r20
    2042:	8e 01       	movw	r16, r28
    2044:	0f 5f       	subi	r16, 0xFF	; 255
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	b8 01       	movw	r22, r16
    204a:	42 d9       	rcall	.-3452   	; 0x12d0 <_ZN6SdFile10make83NameEPKcPh>
    204c:	88 23       	and	r24, r24
    204e:	09 f4       	brne	.+2      	; 0x2052 <_ZN6SdFile4openEPS_PKch+0x50>
    2050:	c3 c0       	rjmp	.+390    	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>
    2052:	f6 01       	movw	r30, r12
  vol_ = dirFile->vol_;
    2054:	83 8d       	ldd	r24, Z+27	; 0x1b
    2056:	94 8d       	ldd	r25, Z+28	; 0x1c
    2058:	d5 01       	movw	r26, r10
    205a:	5c 96       	adiw	r26, 0x1c	; 28
    205c:	9c 93       	st	X, r25
    205e:	8e 93       	st	-X, r24
    2060:	5b 97       	sbiw	r26, 0x1b	; 27
    2062:	16 82       	std	Z+6, r1	; 0x06
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    2064:	17 82       	std	Z+7, r1	; 0x07
    2066:	10 86       	std	Z+8, r1	; 0x08
    2068:	11 86       	std	Z+9, r1	; 0x09
    206a:	d6 01       	movw	r26, r12
    206c:	1a 96       	adiw	r26, 0x0a	; 10
    206e:	1d 92       	st	X+, r1
    2070:	1d 92       	st	X+, r1
    2072:	1d 92       	st	X+, r1
    2074:	1c 92       	st	X, r1
    2076:	1d 97       	sbiw	r26, 0x0d	; 13
    2078:	99 24       	eor	r9, r9
    207a:	38 01       	movw	r6, r16
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    207c:	40 c0       	rjmp	.+128    	; 0x20fe <_ZN6SdFile4openEPS_PKch+0xfc>
    207e:	c6 01       	movw	r24, r12
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    2080:	72 dc       	rcall	.-1820   	; 0x1966 <_ZN6SdFile12readDirCacheEv>
    2082:	fc 01       	movw	r30, r24
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	09 f4       	brne	.+2      	; 0x208a <_ZN6SdFile4openEPS_PKch+0x88>
    if (p == NULL) return false;
    2088:	a7 c0       	rjmp	.+334    	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>
    208a:	85 e0       	ldi	r24, 0x05	; 5
    208c:	16 95       	lsr	r17
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    208e:	07 95       	ror	r16
    2090:	f7 94       	ror	r15
    2092:	e7 94       	ror	r14
    2094:	8a 95       	dec	r24
    2096:	d1 f7       	brne	.-12     	; 0x208c <_ZN6SdFile4openEPS_PKch+0x8a>
    2098:	1e 2d       	mov	r17, r14
    209a:	1f 70       	andi	r17, 0x0F	; 15
    209c:	80 81       	ld	r24, Z
    209e:	88 23       	and	r24, r24
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    20a0:	11 f0       	breq	.+4      	; 0x20a6 <_ZN6SdFile4openEPS_PKch+0xa4>
    20a2:	85 3e       	cpi	r24, 0xE5	; 229
    20a4:	d1 f4       	brne	.+52     	; 0x20da <_ZN6SdFile4openEPS_PKch+0xd8>
    20a6:	99 20       	and	r9, r9
    20a8:	91 f4       	brne	.+36     	; 0x20ce <_ZN6SdFile4openEPS_PKch+0xcc>
      // remember first empty slot
      if (!emptyFound) {
    20aa:	d5 01       	movw	r26, r10
    20ac:	52 96       	adiw	r26, 0x12	; 18
        emptyFound = true;
        dirIndex_ = index;
    20ae:	1c 93       	st	X, r17
    20b0:	52 97       	sbiw	r26, 0x12	; 18
    20b2:	20 91 28 02 	lds	r18, 0x0228
        dirBlock_ = SdVolume::cacheBlockNumber_;
    20b6:	30 91 29 02 	lds	r19, 0x0229
    20ba:	40 91 2a 02 	lds	r20, 0x022A
    20be:	50 91 2b 02 	lds	r21, 0x022B
    20c2:	1e 96       	adiw	r26, 0x0e	; 14
    20c4:	2d 93       	st	X+, r18
    20c6:	3d 93       	st	X+, r19
    20c8:	4d 93       	st	X+, r20
    20ca:	5c 93       	st	X, r21
    20cc:	51 97       	sbiw	r26, 0x11	; 17
    20ce:	80 81       	ld	r24, Z
    20d0:	88 23       	and	r24, r24
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    20d2:	99 f4       	brne	.+38     	; 0x20fa <_ZN6SdFile4openEPS_PKch+0xf8>
    20d4:	99 24       	eor	r9, r9
    20d6:	93 94       	inc	r9
    20d8:	21 c0       	rjmp	.+66     	; 0x211c <_ZN6SdFile4openEPS_PKch+0x11a>
    20da:	c3 01       	movw	r24, r6
    20dc:	bf 01       	movw	r22, r30
    } else if (!memcmp(dname, p->name, 11)) {
    20de:	4b e0       	ldi	r20, 0x0B	; 11
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	0e 94 96 00 	call	0x12c	; 0x12c <memcmp>
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	51 f4       	brne	.+20     	; 0x20fe <_ZN6SdFile4openEPS_PKch+0xfc>
    20ea:	88 2d       	mov	r24, r8
    20ec:	80 73       	andi	r24, 0x30	; 48
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    20ee:	80 33       	cpi	r24, 0x30	; 48
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <_ZN6SdFile4openEPS_PKch+0xf2>
    20f2:	72 c0       	rjmp	.+228    	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>
    20f4:	c5 01       	movw	r24, r10
    20f6:	61 2f       	mov	r22, r17

      // open found file
      return openCachedEntry(0XF & index, oflag);
    20f8:	6c c0       	rjmp	.+216    	; 0x21d2 <_ZN6SdFile4openEPS_PKch+0x1d0>
    20fa:	99 24       	eor	r9, r9
    20fc:	93 94       	inc	r9
    20fe:	f6 01       	movw	r30, r12
    2100:	e2 84       	ldd	r14, Z+10	; 0x0a

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    2102:	f3 84       	ldd	r15, Z+11	; 0x0b
    2104:	04 85       	ldd	r16, Z+12	; 0x0c
    2106:	15 85       	ldd	r17, Z+13	; 0x0d
    2108:	83 89       	ldd	r24, Z+19	; 0x13
    210a:	94 89       	ldd	r25, Z+20	; 0x14
    210c:	a5 89       	ldd	r26, Z+21	; 0x15
    210e:	b6 89       	ldd	r27, Z+22	; 0x16
    2110:	e8 16       	cp	r14, r24
    2112:	f9 06       	cpc	r15, r25
    2114:	0a 07       	cpc	r16, r26
    2116:	1b 07       	cpc	r17, r27
    2118:	08 f4       	brcc	.+2      	; 0x211c <_ZN6SdFile4openEPS_PKch+0x11a>
    211a:	b1 cf       	rjmp	.-158    	; 0x207e <_ZN6SdFile4openEPS_PKch+0x7c>
    211c:	88 2d       	mov	r24, r8
    211e:	82 71       	andi	r24, 0x12	; 18
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    2120:	82 31       	cpi	r24, 0x12	; 18
    2122:	09 f0       	breq	.+2      	; 0x2126 <_ZN6SdFile4openEPS_PKch+0x124>
    2124:	59 c0       	rjmp	.+178    	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>
    2126:	99 20       	and	r9, r9
    2128:	39 f0       	breq	.+14     	; 0x2138 <_ZN6SdFile4openEPS_PKch+0x136>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    212a:	c5 01       	movw	r24, r10
    212c:	61 e0       	ldi	r22, 0x01	; 1
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    212e:	ba d9       	rcall	.-3212   	; 0x14a4 <_ZN6SdFile13cacheDirEntryEh>
    2130:	8c 01       	movw	r16, r24
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	81 f4       	brne	.+32     	; 0x2156 <_ZN6SdFile4openEPS_PKch+0x154>
    2136:	50 c0       	rjmp	.+160    	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>
    if (!p) return false;
    2138:	d6 01       	movw	r26, r12
    213a:	15 96       	adiw	r26, 0x05	; 5
    213c:	8c 91       	ld	r24, X
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	09 f4       	brne	.+2      	; 0x2144 <_ZN6SdFile4openEPS_PKch+0x142>
    2142:	4a c0       	rjmp	.+148    	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>
    2144:	c6 01       	movw	r24, r12
    2146:	fb de       	rcall	.-522    	; 0x1f3e <_ZN6SdFile13addDirClusterEv>
    2148:	88 23       	and	r24, r24

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    214a:	09 f4       	brne	.+2      	; 0x214e <_ZN6SdFile4openEPS_PKch+0x14c>
    214c:	45 c0       	rjmp	.+138    	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>
    214e:	f5 01       	movw	r30, r10
    2150:	12 8a       	std	Z+18, r1	; 0x12
    2152:	0a e7       	ldi	r16, 0x7A	; 122
    2154:	13 e0       	ldi	r17, 0x03	; 3

    // use first entry in cluster
    dirIndex_ = 0;
    2156:	80 e2       	ldi	r24, 0x20	; 32
    2158:	d8 01       	movw	r26, r16
    215a:	1d 92       	st	X+, r1
    215c:	8a 95       	dec	r24
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    215e:	e9 f7       	brne	.-6      	; 0x215a <_ZN6SdFile4openEPS_PKch+0x158>
    2160:	d8 01       	movw	r26, r16
    2162:	fe 01       	movw	r30, r28
    2164:	31 96       	adiw	r30, 0x01	; 1
    2166:	8b e0       	ldi	r24, 0x0B	; 11
  memcpy(p->name, dname, 11);
    2168:	01 90       	ld	r0, Z+
    216a:	0d 92       	st	X+, r0
    216c:	81 50       	subi	r24, 0x01	; 1
    216e:	e1 f7       	brne	.-8      	; 0x2168 <_ZN6SdFile4openEPS_PKch+0x166>
    2170:	e0 91 78 03 	lds	r30, 0x0378
    2174:	f0 91 79 03 	lds	r31, 0x0379

  // set timestamps
  if (dateTime_) {
    2178:	30 97       	sbiw	r30, 0x00	; 0
    217a:	39 f0       	breq	.+14     	; 0x218a <_ZN6SdFile4openEPS_PKch+0x188>
    217c:	b8 01       	movw	r22, r16
    217e:	62 5f       	subi	r22, 0xF2	; 242
    2180:	7f 4f       	sbci	r23, 0xFF	; 255
    2182:	c8 01       	movw	r24, r16
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    2184:	40 96       	adiw	r24, 0x10	; 16
    2186:	09 95       	icall
    2188:	09 c0       	rjmp	.+18     	; 0x219c <_ZN6SdFile4openEPS_PKch+0x19a>
    218a:	81 e2       	ldi	r24, 0x21	; 33
    218c:	98 e2       	ldi	r25, 0x28	; 40
    218e:	f8 01       	movw	r30, r16
    2190:	91 8b       	std	Z+17, r25	; 0x11
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    2192:	80 8b       	std	Z+16, r24	; 0x10
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	98 e0       	ldi	r25, 0x08	; 8
    2198:	97 87       	std	Z+15, r25	; 0x0f
    219a:	86 87       	std	Z+14, r24	; 0x0e
    p->creationTime = FAT_DEFAULT_TIME;
    219c:	d8 01       	movw	r26, r16
    219e:	50 96       	adiw	r26, 0x10	; 16
    21a0:	8d 91       	ld	r24, X+
    21a2:	9c 91       	ld	r25, X
  }
  p->lastAccessDate = p->creationDate;
    21a4:	51 97       	sbiw	r26, 0x11	; 17
    21a6:	53 96       	adiw	r26, 0x13	; 19
    21a8:	9c 93       	st	X, r25
    21aa:	8e 93       	st	-X, r24
    21ac:	52 97       	sbiw	r26, 0x12	; 18
    21ae:	59 96       	adiw	r26, 0x19	; 25
    21b0:	9c 93       	st	X, r25
    21b2:	8e 93       	st	-X, r24
    21b4:	58 97       	sbiw	r26, 0x18	; 24
  p->lastWriteDate = p->creationDate;
    21b6:	1e 96       	adiw	r26, 0x0e	; 14
    21b8:	8d 91       	ld	r24, X+
    21ba:	9c 91       	ld	r25, X
    21bc:	1f 97       	sbiw	r26, 0x0f	; 15
  p->lastWriteTime = p->creationTime;
    21be:	57 96       	adiw	r26, 0x17	; 23
    21c0:	9c 93       	st	X, r25
    21c2:	8e 93       	st	-X, r24
    21c4:	56 97       	sbiw	r26, 0x16	; 22
    21c6:	49 d0       	rcall	.+146    	; 0x225a <_ZN8SdVolume10cacheFlushEv>
    21c8:	88 23       	and	r24, r24
    21ca:	31 f0       	breq	.+12     	; 0x21d8 <_ZN6SdFile4openEPS_PKch+0x1d6>
    21cc:	c5 01       	movw	r24, r10

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    21ce:	f5 01       	movw	r30, r10
    21d0:	62 89       	ldd	r22, Z+18	; 0x12
    21d2:	48 2d       	mov	r20, r8
    21d4:	61 dc       	rcall	.-1854   	; 0x1a98 <_ZN6SdFile15openCachedEntryEhh>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <_ZN6SdFile4openEPS_PKch+0x1d8>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	2b 96       	adiw	r28, 0x0b	; 11
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
}
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	ff 90       	pop	r15
    21f0:	ef 90       	pop	r14
    21f2:	df 90       	pop	r13
    21f4:	cf 90       	pop	r12
    21f6:	bf 90       	pop	r11
    21f8:	af 90       	pop	r10
    21fa:	9f 90       	pop	r9
    21fc:	8f 90       	pop	r8
    21fe:	7f 90       	pop	r7
    2200:	6f 90       	pop	r6
    2202:	08 95       	ret

00002204 <_ZN6SdFile6removeEPS_PKc>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	6d 97       	sbiw	r28, 0x1d	; 29
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	9c 01       	movw	r18, r24
    221e:	ab 01       	movw	r20, r22
  public:
    Print() : write_error(0) {}
    2220:	1c 82       	std	Y+4, r1	; 0x04
    2222:	1b 82       	std	Y+3, r1	; 0x03
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2224:	86 e3       	ldi	r24, 0x36	; 54
    2226:	92 e0       	ldi	r25, 0x02	; 2
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	1e 82       	std	Y+6, r1	; 0x06
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
    222e:	8e 01       	movw	r16, r28
    2230:	0f 5f       	subi	r16, 0xFF	; 255
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    2234:	c8 01       	movw	r24, r16
    2236:	b9 01       	movw	r22, r18
    2238:	22 e0       	ldi	r18, 0x02	; 2
    223a:	e3 de       	rcall	.-570    	; 0x2002 <_ZN6SdFile4openEPS_PKch>
    223c:	88 23       	and	r24, r24
    223e:	11 f0       	breq	.+4      	; 0x2244 <_ZN6SdFile6removeEPS_PKc+0x40>
    2240:	c8 01       	movw	r24, r16
  return file.remove();
    2242:	66 da       	rcall	.-2868   	; 0x1710 <_ZN6SdFile6removeEv>
    2244:	6d 96       	adiw	r28, 0x1d	; 29
    2246:	0f b6       	in	r0, 0x3f	; 63
}
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	08 95       	ret

0000225a <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    225a:	80 91 7c 05 	lds	r24, 0x057C
    225e:	88 23       	and	r24, r24
    2260:	99 f1       	breq	.+102    	; 0x22c8 <_ZN8SdVolume10cacheFlushEv+0x6e>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2262:	40 91 28 02 	lds	r20, 0x0228
    2266:	50 91 29 02 	lds	r21, 0x0229
    226a:	60 91 2a 02 	lds	r22, 0x022A
    226e:	70 91 2b 02 	lds	r23, 0x022B
    2272:	80 91 7a 05 	lds	r24, 0x057A
    2276:	90 91 7b 05 	lds	r25, 0x057B
    227a:	2a e7       	ldi	r18, 0x7A	; 122
    227c:	33 e0       	ldi	r19, 0x03	; 3
    227e:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN7Sd2Card10writeBlockEmPKh>
    2282:	88 23       	and	r24, r24
    2284:	19 f1       	breq	.+70     	; 0x22cc <_ZN8SdVolume10cacheFlushEv+0x72>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2286:	40 91 7d 05 	lds	r20, 0x057D
    228a:	50 91 7e 05 	lds	r21, 0x057E
    228e:	60 91 7f 05 	lds	r22, 0x057F
    2292:	70 91 80 05 	lds	r23, 0x0580
    2296:	41 15       	cp	r20, r1
    2298:	51 05       	cpc	r21, r1
    229a:	61 05       	cpc	r22, r1
    229c:	71 05       	cpc	r23, r1
    229e:	91 f0       	breq	.+36     	; 0x22c4 <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    22a0:	80 91 7a 05 	lds	r24, 0x057A
    22a4:	90 91 7b 05 	lds	r25, 0x057B
    22a8:	2a e7       	ldi	r18, 0x7A	; 122
    22aa:	33 e0       	ldi	r19, 0x03	; 3
    22ac:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN7Sd2Card10writeBlockEmPKh>
    22b0:	88 23       	and	r24, r24
    22b2:	61 f0       	breq	.+24     	; 0x22cc <_ZN8SdVolume10cacheFlushEv+0x72>
        return false;
      }
      cacheMirrorBlock_ = 0;
    22b4:	10 92 7d 05 	sts	0x057D, r1
    22b8:	10 92 7e 05 	sts	0x057E, r1
    22bc:	10 92 7f 05 	sts	0x057F, r1
    22c0:	10 92 80 05 	sts	0x0580, r1
    }
    cacheDirty_ = 0;
    22c4:	10 92 7c 05 	sts	0x057C, r1
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	08 95       	ret
    22cc:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
}
    22ce:	08 95       	ret

000022d0 <_ZN8SdVolume14cacheZeroBlockEm>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	7b 01       	movw	r14, r22
    22da:	8c 01       	movw	r16, r24
  if (!cacheFlush()) return false;
    22dc:	be df       	rcall	.-132    	; 0x225a <_ZN8SdVolume10cacheFlushEv>
    22de:	88 23       	and	r24, r24
    22e0:	a9 f0       	breq	.+42     	; 0x230c <_ZN8SdVolume14cacheZeroBlockEm+0x3c>
    22e2:	ea e7       	ldi	r30, 0x7A	; 122
    22e4:	f3 e0       	ldi	r31, 0x03	; 3
    22e6:	11 92       	st	Z+, r1

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    22e8:	85 e0       	ldi	r24, 0x05	; 5
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    22ea:	ea 37       	cpi	r30, 0x7A	; 122
    22ec:	f8 07       	cpc	r31, r24
    22ee:	d9 f7       	brne	.-10     	; 0x22e6 <_ZN8SdVolume14cacheZeroBlockEm+0x16>
    22f0:	e0 92 28 02 	sts	0x0228, r14
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    22f4:	f0 92 29 02 	sts	0x0229, r15
    22f8:	00 93 2a 02 	sts	0x022A, r16
    22fc:	10 93 2b 02 	sts	0x022B, r17
    2300:	80 91 7c 05 	lds	r24, 0x057C
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2304:	81 60       	ori	r24, 0x01	; 1
    2306:	80 93 7c 05 	sts	0x057C, r24
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	1f 91       	pop	r17
  cacheSetDirty();
  return true;
}
    230e:	0f 91       	pop	r16
    2310:	ff 90       	pop	r15
    2312:	ef 90       	pop	r14
    2314:	08 95       	ret

00002316 <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	7b 01       	movw	r14, r22
    2322:	8c 01       	movw	r16, r24
    2324:	d4 2e       	mov	r13, r20
  if (cacheBlockNumber_ != blockNumber) {
    2326:	80 91 28 02 	lds	r24, 0x0228
    232a:	90 91 29 02 	lds	r25, 0x0229
    232e:	a0 91 2a 02 	lds	r26, 0x022A
    2332:	b0 91 2b 02 	lds	r27, 0x022B
    2336:	8e 15       	cp	r24, r14
    2338:	9f 05       	cpc	r25, r15
    233a:	a0 07       	cpc	r26, r16
    233c:	b1 07       	cpc	r27, r17
    233e:	b9 f0       	breq	.+46     	; 0x236e <_ZN8SdVolume13cacheRawBlockEmh+0x58>
    if (!cacheFlush()) return false;
    2340:	8c df       	rcall	.-232    	; 0x225a <_ZN8SdVolume10cacheFlushEv>
    2342:	88 23       	and	r24, r24
    2344:	d9 f0       	breq	.+54     	; 0x237c <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    2346:	80 91 7a 05 	lds	r24, 0x057A
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    234a:	90 91 7b 05 	lds	r25, 0x057B
    234e:	b8 01       	movw	r22, r16
    2350:	a7 01       	movw	r20, r14
    2352:	2a e7       	ldi	r18, 0x7A	; 122
    2354:	33 e0       	ldi	r19, 0x03	; 3
    2356:	0e 94 90 08 	call	0x1120	; 0x1120 <_ZN7Sd2Card9readBlockEmPh>
    235a:	88 23       	and	r24, r24
    235c:	79 f0       	breq	.+30     	; 0x237c <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    235e:	e0 92 28 02 	sts	0x0228, r14
    cacheBlockNumber_ = blockNumber;
    2362:	f0 92 29 02 	sts	0x0229, r15
    2366:	00 93 2a 02 	sts	0x022A, r16
    236a:	10 93 2b 02 	sts	0x022B, r17
    236e:	80 91 7c 05 	lds	r24, 0x057C
  }
  cacheDirty_ |= action;
    2372:	8d 29       	or	r24, r13
    2374:	80 93 7c 05 	sts	0x057C, r24
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	01 c0       	rjmp	.+2      	; 0x237e <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    237c:	80 e0       	ldi	r24, 0x00	; 0
  return true;
    237e:	1f 91       	pop	r17
}
    2380:	0f 91       	pop	r16
    2382:	ff 90       	pop	r15
    2384:	ef 90       	pop	r14
    2386:	df 90       	pop	r13
    2388:	08 95       	ret

0000238a <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    238a:	8f 92       	push	r8
    238c:	9f 92       	push	r9
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	cf 92       	push	r12
    2394:	df 92       	push	r13
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	6c 01       	movw	r12, r24
    23a4:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    23a6:	70 93 7b 05 	sts	0x057B, r23
    23aa:	60 93 7a 05 	sts	0x057A, r22
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    23ae:	44 23       	and	r20, r20
    23b0:	21 f4       	brne	.+8      	; 0x23ba <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    23b2:	88 24       	eor	r8, r8
    23b4:	99 24       	eor	r9, r9
    23b6:	54 01       	movw	r10, r8
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <_ZN8SdVolume4initEP7Sd2Cardh+0xae>
    if (part > 4)return false;
    23ba:	45 30       	cpi	r20, 0x05	; 5
    23bc:	08 f0       	brcs	.+2      	; 0x23c0 <_ZN8SdVolume4initEP7Sd2Cardh+0x36>
    23be:	1a c1       	rjmp	.+564    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	70 e0       	ldi	r23, 0x00	; 0
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	a5 df       	rcall	.-182    	; 0x2316 <_ZN8SdVolume13cacheRawBlockEmh>
    23cc:	88 23       	and	r24, r24
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <_ZN8SdVolume4initEP7Sd2Cardh+0x48>
    23d0:	11 c1       	rjmp	.+546    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    23d2:	c1 2f       	mov	r28, r17
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    23d4:	d0 e0       	ldi	r29, 0x00	; 0
    23d6:	21 97       	sbiw	r28, 0x01	; 1
    23d8:	fe 01       	movw	r30, r28
    if ((p->boot & 0X7F) !=0  ||
    23da:	74 e0       	ldi	r23, 0x04	; 4
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	7a 95       	dec	r23
    23e2:	e1 f7       	brne	.-8      	; 0x23dc <_ZN8SdVolume4initEP7Sd2Cardh+0x52>
    23e4:	e6 58       	subi	r30, 0x86	; 134
    23e6:	fc 4f       	sbci	r31, 0xFC	; 252
    23e8:	e2 54       	subi	r30, 0x42	; 66
    23ea:	fe 4f       	sbci	r31, 0xFE	; 254
    23ec:	80 81       	ld	r24, Z
    23ee:	ee 5b       	subi	r30, 0xBE	; 190
    23f0:	f1 40       	sbci	r31, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	8f 77       	andi	r24, 0x7F	; 127
    23f6:	90 70       	andi	r25, 0x00	; 0
    23f8:	89 2b       	or	r24, r25
    23fa:	09 f0       	breq	.+2      	; 0x23fe <_ZN8SdVolume4initEP7Sd2Cardh+0x74>
    23fc:	fb c0       	rjmp	.+502    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    23fe:	e6 53       	subi	r30, 0x36	; 54
    2400:	fe 4f       	sbci	r31, 0xFE	; 254
    2402:	80 81       	ld	r24, Z
    2404:	91 81       	ldd	r25, Z+1	; 0x01
    2406:	a2 81       	ldd	r26, Z+2	; 0x02
    2408:	b3 81       	ldd	r27, Z+3	; 0x03
    240a:	84 36       	cpi	r24, 0x64	; 100
    240c:	91 05       	cpc	r25, r1
    240e:	a1 05       	cpc	r26, r1
    2410:	b1 05       	cpc	r27, r1
    2412:	08 f4       	brcc	.+2      	; 0x2416 <_ZN8SdVolume4initEP7Sd2Cardh+0x8c>
    2414:	ef c0       	rjmp	.+478    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    2416:	64 e0       	ldi	r22, 0x04	; 4
    2418:	cc 0f       	add	r28, r28
    241a:	dd 1f       	adc	r29, r29
    241c:	6a 95       	dec	r22
    241e:	e1 f7       	brne	.-8      	; 0x2418 <_ZN8SdVolume4initEP7Sd2Cardh+0x8e>
    2420:	c0 5c       	subi	r28, 0xC0	; 192
    2422:	da 4f       	sbci	r29, 0xFA	; 250
    2424:	88 80       	ld	r8, Y
    2426:	99 80       	ldd	r9, Y+1	; 0x01
    2428:	aa 80       	ldd	r10, Y+2	; 0x02
    242a:	bb 80       	ldd	r11, Y+3	; 0x03
    242c:	81 14       	cp	r8, r1
    242e:	91 04       	cpc	r9, r1
    2430:	a1 04       	cpc	r10, r1
    2432:	b1 04       	cpc	r11, r1
    2434:	09 f4       	brne	.+2      	; 0x2438 <_ZN8SdVolume4initEP7Sd2Cardh+0xae>
    2436:	de c0       	rjmp	.+444    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    2438:	c5 01       	movw	r24, r10
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    243a:	b4 01       	movw	r22, r8
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	6b df       	rcall	.-298    	; 0x2316 <_ZN8SdVolume13cacheRawBlockEmh>
    2440:	88 23       	and	r24, r24
    2442:	09 f4       	brne	.+2      	; 0x2446 <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    2444:	d7 c0       	rjmp	.+430    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    2446:	80 91 85 03 	lds	r24, 0x0385
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    244a:	90 91 86 03 	lds	r25, 0x0386
    244e:	80 50       	subi	r24, 0x00	; 0
    2450:	92 40       	sbci	r25, 0x02	; 2
    2452:	09 f0       	breq	.+2      	; 0x2456 <_ZN8SdVolume4initEP7Sd2Cardh+0xcc>
    2454:	cf c0       	rjmp	.+414    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    2456:	20 91 8a 03 	lds	r18, 0x038A
    245a:	22 23       	and	r18, r18
    245c:	09 f4       	brne	.+2      	; 0x2460 <_ZN8SdVolume4initEP7Sd2Cardh+0xd6>
    245e:	ca c0       	rjmp	.+404    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    2460:	80 91 88 03 	lds	r24, 0x0388
    2464:	90 91 89 03 	lds	r25, 0x0389
    2468:	89 2b       	or	r24, r25
    246a:	09 f4       	brne	.+2      	; 0x246e <_ZN8SdVolume4initEP7Sd2Cardh+0xe4>
    246c:	c3 c0       	rjmp	.+390    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    246e:	80 91 87 03 	lds	r24, 0x0387
    2472:	88 23       	and	r24, r24
    2474:	09 f4       	brne	.+2      	; 0x2478 <_ZN8SdVolume4initEP7Sd2Cardh+0xee>
    2476:	be c0       	rjmp	.+380    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    2478:	f6 01       	movw	r30, r12
    247a:	22 8b       	std	Z+18, r18	; 0x12
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    247c:	80 91 87 03 	lds	r24, 0x0387
  blocksPerCluster_ = bpb->sectorsPerCluster;
    2480:	84 83       	std	Z+4, r24	; 0x04
    2482:	15 86       	std	Z+13, r1	; 0x0d
    2484:	61 e0       	ldi	r22, 0x01	; 1

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    2486:	70 e0       	ldi	r23, 0x00	; 0
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    2488:	07 c0       	rjmp	.+14     	; 0x2498 <_ZN8SdVolume4initEP7Sd2Cardh+0x10e>
    248a:	4f 5f       	subi	r20, 0xFF	; 255
    248c:	f6 01       	movw	r30, r12
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    248e:	45 87       	std	Z+13, r20	; 0x0d
    2490:	41 50       	subi	r20, 0x01	; 1
    2492:	48 30       	cpi	r20, 0x08	; 8
    2494:	08 f0       	brcs	.+2      	; 0x2498 <_ZN8SdVolume4initEP7Sd2Cardh+0x10e>
    2496:	ae c0       	rjmp	.+348    	; 0x25f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    2498:	f6 01       	movw	r30, r12
    249a:	45 85       	ldd	r20, Z+13	; 0x0d
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    249c:	84 81       	ldd	r24, Z+4	; 0x04
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9b 01       	movw	r18, r22
    24a2:	04 2e       	mov	r0, r20
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <_ZN8SdVolume4initEP7Sd2Cardh+0x120>
    24a6:	22 0f       	add	r18, r18
    24a8:	33 1f       	adc	r19, r19
    24aa:	0a 94       	dec	r0
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <_ZN8SdVolume4initEP7Sd2Cardh+0x11c>
    24ae:	82 17       	cp	r24, r18
    24b0:	93 07       	cpc	r25, r19
    24b2:	59 f7       	brne	.-42     	; 0x248a <_ZN8SdVolume4initEP7Sd2Cardh+0x100>
    24b4:	20 91 90 03 	lds	r18, 0x0390
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    24b8:	30 91 91 03 	lds	r19, 0x0391
    24bc:	21 15       	cp	r18, r1
    24be:	31 05       	cpc	r19, r1
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x13e>
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	50 e0       	ldi	r21, 0x00	; 0
    24c6:	08 c0       	rjmp	.+16     	; 0x24d8 <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    24c8:	20 91 9e 03 	lds	r18, 0x039E
    24cc:	30 91 9f 03 	lds	r19, 0x039F
    24d0:	40 91 a0 03 	lds	r20, 0x03A0
    24d4:	50 91 a1 03 	lds	r21, 0x03A1
    24d8:	f6 01       	movw	r30, r12
    24da:	25 83       	std	Z+5, r18	; 0x05
    24dc:	36 83       	std	Z+6, r19	; 0x06
    24de:	47 83       	std	Z+7, r20	; 0x07
    24e0:	50 87       	std	Z+8, r21	; 0x08
    24e2:	e0 90 88 03 	lds	r14, 0x0388

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    24e6:	f0 90 89 03 	lds	r15, 0x0389
    24ea:	00 e0       	ldi	r16, 0x00	; 0
    24ec:	10 e0       	ldi	r17, 0x00	; 0
    24ee:	e8 0c       	add	r14, r8
    24f0:	f9 1c       	adc	r15, r9
    24f2:	0a 1d       	adc	r16, r10
    24f4:	1b 1d       	adc	r17, r11
    24f6:	e3 8a       	std	Z+19, r14	; 0x13
    24f8:	f4 8a       	std	Z+20, r15	; 0x14
    24fa:	05 8b       	std	Z+21, r16	; 0x15
    24fc:	16 8b       	std	Z+22, r17	; 0x16
    24fe:	80 91 8b 03 	lds	r24, 0x038B

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    2502:	90 91 8c 03 	lds	r25, 0x038C
    2506:	91 8f       	std	Z+25, r25	; 0x19
    2508:	80 8f       	std	Z+24, r24	; 0x18
    250a:	60 91 8a 03 	lds	r22, 0x038A

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsi3>
    2518:	6e 0d       	add	r22, r14
    251a:	7f 1d       	adc	r23, r15
    251c:	80 1f       	adc	r24, r16
    251e:	91 1f       	adc	r25, r17
    2520:	f6 01       	movw	r30, r12
    2522:	62 8f       	std	Z+26, r22	; 0x1a
    2524:	73 8f       	std	Z+27, r23	; 0x1b
    2526:	84 8f       	std	Z+28, r24	; 0x1c
    2528:	95 8f       	std	Z+29, r25	; 0x1d
    252a:	20 91 8b 03 	lds	r18, 0x038B

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    252e:	30 91 8c 03 	lds	r19, 0x038C
    2532:	55 e0       	ldi	r21, 0x05	; 5
    2534:	22 0f       	add	r18, r18
    2536:	33 1f       	adc	r19, r19
    2538:	5a 95       	dec	r21
    253a:	e1 f7       	brne	.-8      	; 0x2534 <_ZN8SdVolume4initEP7Sd2Cardh+0x1aa>
    253c:	21 50       	subi	r18, 0x01	; 1
    253e:	3e 4f       	sbci	r19, 0xFE	; 254
    2540:	23 2f       	mov	r18, r19
    2542:	33 27       	eor	r19, r19
    2544:	26 95       	lsr	r18
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	26 0f       	add	r18, r22
    254c:	37 1f       	adc	r19, r23
    254e:	48 1f       	adc	r20, r24
    2550:	59 1f       	adc	r21, r25
    2552:	26 87       	std	Z+14, r18	; 0x0e
    2554:	37 87       	std	Z+15, r19	; 0x0f
    2556:	40 8b       	std	Z+16, r20	; 0x10
    2558:	51 8b       	std	Z+17, r21	; 0x11
    255a:	80 91 8d 03 	lds	r24, 0x038D

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    255e:	90 91 8e 03 	lds	r25, 0x038E
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	19 f0       	breq	.+6      	; 0x256c <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    2566:	a0 e0       	ldi	r26, 0x00	; 0
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	08 c0       	rjmp	.+16     	; 0x257c <_ZN8SdVolume4initEP7Sd2Cardh+0x1f2>
    256c:	80 91 9a 03 	lds	r24, 0x039A
    2570:	90 91 9b 03 	lds	r25, 0x039B
    2574:	a0 91 9c 03 	lds	r26, 0x039C
    2578:	b0 91 9d 03 	lds	r27, 0x039D
    257c:	85 01       	movw	r16, r10
    257e:	74 01       	movw	r14, r8
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    2580:	e2 1a       	sub	r14, r18
    2582:	f3 0a       	sbc	r15, r19
    2584:	04 0b       	sbc	r16, r20
    2586:	15 0b       	sbc	r17, r21
    2588:	a8 01       	movw	r20, r16
    258a:	97 01       	movw	r18, r14
    258c:	28 0f       	add	r18, r24
    258e:	39 1f       	adc	r19, r25
    2590:	4a 1f       	adc	r20, r26
    2592:	5b 1f       	adc	r21, r27
    2594:	f6 01       	movw	r30, r12
    2596:	05 84       	ldd	r0, Z+13	; 0x0d

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <_ZN8SdVolume4initEP7Sd2Cardh+0x218>
    259a:	56 95       	lsr	r21
    259c:	47 95       	ror	r20
    259e:	37 95       	ror	r19
    25a0:	27 95       	ror	r18
    25a2:	0a 94       	dec	r0
    25a4:	d2 f7       	brpl	.-12     	; 0x259a <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
    25a6:	21 87       	std	Z+9, r18	; 0x09
    25a8:	32 87       	std	Z+10, r19	; 0x0a
    25aa:	43 87       	std	Z+11, r20	; 0x0b
    25ac:	54 87       	std	Z+12, r21	; 0x0c
    25ae:	25 3f       	cpi	r18, 0xF5	; 245
    25b0:	ff e0       	ldi	r31, 0x0F	; 15

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    25b2:	3f 07       	cpc	r19, r31
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	4f 07       	cpc	r20, r31
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	5f 07       	cpc	r21, r31
    25bc:	10 f4       	brcc	.+4      	; 0x25c2 <_ZN8SdVolume4initEP7Sd2Cardh+0x238>
    25be:	8c e0       	ldi	r24, 0x0C	; 12
    25c0:	06 c0       	rjmp	.+12     	; 0x25ce <_ZN8SdVolume4initEP7Sd2Cardh+0x244>
    fatType_ = 12;
    25c2:	25 5f       	subi	r18, 0xF5	; 245
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
  } else if (clusterCount_ < 65525) {
    25c6:	40 40       	sbci	r20, 0x00	; 0
    25c8:	50 40       	sbci	r21, 0x00	; 0
    25ca:	28 f4       	brcc	.+10     	; 0x25d6 <_ZN8SdVolume4initEP7Sd2Cardh+0x24c>
    25cc:	80 e1       	ldi	r24, 0x10	; 16
    25ce:	f6 01       	movw	r30, r12
    fatType_ = 16;
    25d0:	87 8b       	std	Z+23, r24	; 0x17
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	10 c0       	rjmp	.+32     	; 0x25f6 <_ZN8SdVolume4initEP7Sd2Cardh+0x26c>
    25d6:	80 91 a6 03 	lds	r24, 0x03A6
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    25da:	90 91 a7 03 	lds	r25, 0x03A7
    25de:	a0 91 a8 03 	lds	r26, 0x03A8
    25e2:	b0 91 a9 03 	lds	r27, 0x03A9
    25e6:	f6 01       	movw	r30, r12
    25e8:	82 8f       	std	Z+26, r24	; 0x1a
    25ea:	93 8f       	std	Z+27, r25	; 0x1b
    25ec:	a4 8f       	std	Z+28, r26	; 0x1c
    25ee:	b5 8f       	std	Z+29, r27	; 0x1d
    25f0:	80 e2       	ldi	r24, 0x20	; 32
    25f2:	ee cf       	rjmp	.-36     	; 0x25d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x246>
    fatType_ = 32;
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
  }
  return true;
}
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	df 90       	pop	r13
    2604:	cf 90       	pop	r12
    2606:	bf 90       	pop	r11
    2608:	af 90       	pop	r10
    260a:	9f 90       	pop	r9
    260c:	8f 90       	pop	r8
    260e:	08 95       	ret

00002610 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2610:	4f 92       	push	r4
    2612:	5f 92       	push	r5
    2614:	6f 92       	push	r6
    2616:	7f 92       	push	r7
    2618:	8f 92       	push	r8
    261a:	9f 92       	push	r9
    261c:	af 92       	push	r10
    261e:	bf 92       	push	r11
    2620:	cf 92       	push	r12
    2622:	df 92       	push	r13
    2624:	ef 92       	push	r14
    2626:	ff 92       	push	r15
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	ec 01       	movw	r28, r24
    2632:	6a 01       	movw	r12, r20
    2634:	7b 01       	movw	r14, r22
    2636:	28 01       	movw	r4, r16
    2638:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    263a:	42 30       	cpi	r20, 0x02	; 2
    263c:	51 05       	cpc	r21, r1
    263e:	61 05       	cpc	r22, r1
    2640:	71 05       	cpc	r23, r1
    2642:	08 f4       	brcc	.+2      	; 0x2646 <_ZN8SdVolume6fatPutEmm+0x36>
    2644:	6e c0       	rjmp	.+220    	; 0x2722 <_ZN8SdVolume6fatPutEmm+0x112>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	ab 85       	ldd	r26, Y+11	; 0x0b
    264c:	bc 85       	ldd	r27, Y+12	; 0x0c
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	a1 1d       	adc	r26, r1
    2652:	b1 1d       	adc	r27, r1
    2654:	84 17       	cp	r24, r20
    2656:	95 07       	cpc	r25, r21
    2658:	a6 07       	cpc	r26, r22
    265a:	b7 07       	cpc	r27, r23
    265c:	08 f4       	brcc	.+2      	; 0x2660 <_ZN8SdVolume6fatPutEmm+0x50>
    265e:	61 c0       	rjmp	.+194    	; 0x2722 <_ZN8SdVolume6fatPutEmm+0x112>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2660:	2b 89       	ldd	r18, Y+19	; 0x13
    2662:	3c 89       	ldd	r19, Y+20	; 0x14
    2664:	4d 89       	ldd	r20, Y+21	; 0x15
    2666:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2668:	8f 89       	ldd	r24, Y+23	; 0x17
    266a:	80 31       	cpi	r24, 0x10	; 16
    266c:	29 f4       	brne	.+10     	; 0x2678 <_ZN8SdVolume6fatPutEmm+0x68>
    266e:	99 27       	eor	r25, r25
    2670:	8f 2d       	mov	r24, r15
    2672:	7e 2d       	mov	r23, r14
    2674:	6d 2d       	mov	r22, r13
    2676:	09 c0       	rjmp	.+18     	; 0x268a <_ZN8SdVolume6fatPutEmm+0x7a>
    2678:	c7 01       	movw	r24, r14
    267a:	b6 01       	movw	r22, r12
    267c:	17 e0       	ldi	r17, 0x07	; 7
    267e:	96 95       	lsr	r25
    2680:	87 95       	ror	r24
    2682:	77 95       	ror	r23
    2684:	67 95       	ror	r22
    2686:	1a 95       	dec	r17
    2688:	d1 f7       	brne	.-12     	; 0x267e <_ZN8SdVolume6fatPutEmm+0x6e>
    268a:	4b 01       	movw	r8, r22
    268c:	5c 01       	movw	r10, r24
    268e:	82 0e       	add	r8, r18
    2690:	93 1e       	adc	r9, r19
    2692:	a4 1e       	adc	r10, r20
    2694:	b5 1e       	adc	r11, r21

  if (lba != cacheBlockNumber_) {
    2696:	80 91 28 02 	lds	r24, 0x0228
    269a:	90 91 29 02 	lds	r25, 0x0229
    269e:	a0 91 2a 02 	lds	r26, 0x022A
    26a2:	b0 91 2b 02 	lds	r27, 0x022B
    26a6:	88 16       	cp	r8, r24
    26a8:	99 06       	cpc	r9, r25
    26aa:	aa 06       	cpc	r10, r26
    26ac:	bb 06       	cpc	r11, r27
    26ae:	31 f0       	breq	.+12     	; 0x26bc <_ZN8SdVolume6fatPutEmm+0xac>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    26b0:	c5 01       	movw	r24, r10
    26b2:	b4 01       	movw	r22, r8
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	2f de       	rcall	.-930    	; 0x2316 <_ZN8SdVolume13cacheRawBlockEmh>
    26b8:	88 23       	and	r24, r24
    26ba:	99 f1       	breq	.+102    	; 0x2722 <_ZN8SdVolume6fatPutEmm+0x112>
    26bc:	8f 89       	ldd	r24, Y+23	; 0x17
  }
  // store entry
  if (fatType_ == 16) {
    26be:	80 31       	cpi	r24, 0x10	; 16
    26c0:	49 f4       	brne	.+18     	; 0x26d4 <_ZN8SdVolume6fatPutEmm+0xc4>
    26c2:	f6 01       	movw	r30, r12
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    26c4:	f0 70       	andi	r31, 0x00	; 0
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	e6 58       	subi	r30, 0x86	; 134
    26cc:	fc 4f       	sbci	r31, 0xFC	; 252
    26ce:	51 82       	std	Z+1, r5	; 0x01
    26d0:	40 82       	st	Z, r4
    26d2:	0d c0       	rjmp	.+26     	; 0x26ee <_ZN8SdVolume6fatPutEmm+0xde>
    26d4:	f6 01       	movw	r30, r12
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    26d6:	ef 77       	andi	r30, 0x7F	; 127
    26d8:	f0 70       	andi	r31, 0x00	; 0
    26da:	ee 0f       	add	r30, r30
    26dc:	ff 1f       	adc	r31, r31
    26de:	ee 0f       	add	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	e6 58       	subi	r30, 0x86	; 134
    26e4:	fc 4f       	sbci	r31, 0xFC	; 252
    26e6:	40 82       	st	Z, r4
    26e8:	51 82       	std	Z+1, r5	; 0x01
    26ea:	62 82       	std	Z+2, r6	; 0x02
    26ec:	73 82       	std	Z+3, r7	; 0x03
    26ee:	80 91 7c 05 	lds	r24, 0x057C
    26f2:	81 60       	ori	r24, 0x01	; 1
    26f4:	80 93 7c 05 	sts	0x057C, r24
    26f8:	8a 89       	ldd	r24, Y+18	; 0x12
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	80 f0       	brcs	.+32     	; 0x271e <_ZN8SdVolume6fatPutEmm+0x10e>
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	af 81       	ldd	r26, Y+7	; 0x07
    2704:	b8 85       	ldd	r27, Y+8	; 0x08
    2706:	88 0e       	add	r8, r24
    2708:	99 1e       	adc	r9, r25
    270a:	aa 1e       	adc	r10, r26
    270c:	bb 1e       	adc	r11, r27
    270e:	80 92 7d 05 	sts	0x057D, r8
    2712:	90 92 7e 05 	sts	0x057E, r9
    2716:	a0 92 7f 05 	sts	0x057F, r10
    271a:	b0 92 80 05 	sts	0x0580, r11
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <_ZN8SdVolume6fatPutEmm+0x114>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	df 91       	pop	r29
  return true;
}
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	0f 91       	pop	r16
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	df 90       	pop	r13
    2732:	cf 90       	pop	r12
    2734:	bf 90       	pop	r11
    2736:	af 90       	pop	r10
    2738:	9f 90       	pop	r9
    273a:	8f 90       	pop	r8
    273c:	7f 90       	pop	r7
    273e:	6f 90       	pop	r6
    2740:	5f 90       	pop	r5
    2742:	4f 90       	pop	r4
    2744:	08 95       	ret

00002746 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	ec 01       	movw	r28, r24
    2758:	7a 01       	movw	r14, r20
    275a:	8b 01       	movw	r16, r22
    275c:	69 01       	movw	r12, r18
  if (cluster > (clusterCount_ + 1)) return false;
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	ab 85       	ldd	r26, Y+11	; 0x0b
    2764:	bc 85       	ldd	r27, Y+12	; 0x0c
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	a1 1d       	adc	r26, r1
    276a:	b1 1d       	adc	r27, r1
    276c:	84 17       	cp	r24, r20
    276e:	95 07       	cpc	r25, r21
    2770:	a6 07       	cpc	r26, r22
    2772:	b7 07       	cpc	r27, r23
    2774:	08 f4       	brcc	.+2      	; 0x2778 <_ZNK8SdVolume6fatGetEmPm+0x32>
    2776:	4f c0       	rjmp	.+158    	; 0x2816 <_ZNK8SdVolume6fatGetEmPm+0xd0>
  uint32_t lba = fatStartBlock_;
    2778:	2b 89       	ldd	r18, Y+19	; 0x13
    277a:	3c 89       	ldd	r19, Y+20	; 0x14
    277c:	4d 89       	ldd	r20, Y+21	; 0x15
    277e:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2780:	8f 89       	ldd	r24, Y+23	; 0x17
    2782:	80 31       	cpi	r24, 0x10	; 16
    2784:	29 f4       	brne	.+10     	; 0x2790 <_ZNK8SdVolume6fatGetEmPm+0x4a>
    2786:	99 27       	eor	r25, r25
    2788:	81 2f       	mov	r24, r17
    278a:	70 2f       	mov	r23, r16
    278c:	6f 2d       	mov	r22, r15
    278e:	09 c0       	rjmp	.+18     	; 0x27a2 <_ZNK8SdVolume6fatGetEmPm+0x5c>
    2790:	c8 01       	movw	r24, r16
    2792:	b7 01       	movw	r22, r14
    2794:	e7 e0       	ldi	r30, 0x07	; 7
    2796:	96 95       	lsr	r25
    2798:	87 95       	ror	r24
    279a:	77 95       	ror	r23
    279c:	67 95       	ror	r22
    279e:	ea 95       	dec	r30
    27a0:	d1 f7       	brne	.-12     	; 0x2796 <_ZNK8SdVolume6fatGetEmPm+0x50>
    27a2:	26 0f       	add	r18, r22
    27a4:	37 1f       	adc	r19, r23
    27a6:	48 1f       	adc	r20, r24
    27a8:	59 1f       	adc	r21, r25
  if (lba != cacheBlockNumber_) {
    27aa:	80 91 28 02 	lds	r24, 0x0228
    27ae:	90 91 29 02 	lds	r25, 0x0229
    27b2:	a0 91 2a 02 	lds	r26, 0x022A
    27b6:	b0 91 2b 02 	lds	r27, 0x022B
    27ba:	28 17       	cp	r18, r24
    27bc:	39 07       	cpc	r19, r25
    27be:	4a 07       	cpc	r20, r26
    27c0:	5b 07       	cpc	r21, r27
    27c2:	31 f0       	breq	.+12     	; 0x27d0 <_ZNK8SdVolume6fatGetEmPm+0x8a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    27c4:	ca 01       	movw	r24, r20
    27c6:	b9 01       	movw	r22, r18
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	a5 dd       	rcall	.-1206   	; 0x2316 <_ZN8SdVolume13cacheRawBlockEmh>
    27cc:	88 23       	and	r24, r24
    27ce:	19 f1       	breq	.+70     	; 0x2816 <_ZNK8SdVolume6fatGetEmPm+0xd0>
    27d0:	8f 89       	ldd	r24, Y+23	; 0x17
  }
  if (fatType_ == 16) {
    27d2:	80 31       	cpi	r24, 0x10	; 16
    27d4:	59 f4       	brne	.+22     	; 0x27ec <_ZNK8SdVolume6fatGetEmPm+0xa6>
    27d6:	f7 01       	movw	r30, r14
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    27d8:	f0 70       	andi	r31, 0x00	; 0
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	e6 58       	subi	r30, 0x86	; 134
    27e0:	fc 4f       	sbci	r31, 0xFC	; 252
    27e2:	80 81       	ld	r24, Z
    27e4:	91 81       	ldd	r25, Z+1	; 0x01
    27e6:	a0 e0       	ldi	r26, 0x00	; 0
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	0e c0       	rjmp	.+28     	; 0x2808 <_ZNK8SdVolume6fatGetEmPm+0xc2>
    27ec:	f7 01       	movw	r30, r14
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    27ee:	ef 77       	andi	r30, 0x7F	; 127
    27f0:	f0 70       	andi	r31, 0x00	; 0
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	e6 58       	subi	r30, 0x86	; 134
    27fc:	fc 4f       	sbci	r31, 0xFC	; 252
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	a2 81       	ldd	r26, Z+2	; 0x02
    2804:	b3 81       	ldd	r27, Z+3	; 0x03
    2806:	bf 70       	andi	r27, 0x0F	; 15
    2808:	f6 01       	movw	r30, r12
    280a:	80 83       	st	Z, r24
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	a2 83       	std	Z+2, r26	; 0x02
    2810:	b3 83       	std	Z+3, r27	; 0x03
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <_ZNK8SdVolume6fatGetEmPm+0xd2>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	df 91       	pop	r29
  }
  return true;
}
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	08 95       	ret

0000282a <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    282a:	af 92       	push	r10
    282c:	bf 92       	push	r11
    282e:	cf 92       	push	r12
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <_ZN8SdVolume9freeChainEm+0x16>
    2840:	00 d0       	rcall	.+0      	; 0x2842 <_ZN8SdVolume9freeChainEm+0x18>
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	6c 01       	movw	r12, r24
    2848:	7a 01       	movw	r14, r20
    284a:	8b 01       	movw	r16, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e0       	ldi	r26, 0x00	; 0
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	f6 01       	movw	r30, r12
    2856:	80 83       	st	Z, r24
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	a2 83       	std	Z+2, r26	; 0x02
    285c:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    285e:	5e 01       	movw	r10, r28
    2860:	08 94       	sec
    2862:	a1 1c       	adc	r10, r1
    2864:	b1 1c       	adc	r11, r1
    2866:	c6 01       	movw	r24, r12
    2868:	b8 01       	movw	r22, r16
    286a:	a7 01       	movw	r20, r14
    286c:	95 01       	movw	r18, r10
    286e:	6b df       	rcall	.-298    	; 0x2746 <_ZNK8SdVolume6fatGetEmPm>
    2870:	88 23       	and	r24, r24
    2872:	11 f1       	breq	.+68     	; 0x28b8 <_ZN8SdVolume9freeChainEm+0x8e>
    2874:	c6 01       	movw	r24, r12

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    2876:	b8 01       	movw	r22, r16
    2878:	a7 01       	movw	r20, r14
    287a:	00 e0       	ldi	r16, 0x00	; 0
    287c:	10 e0       	ldi	r17, 0x00	; 0
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	c6 de       	rcall	.-628    	; 0x2610 <_ZN8SdVolume6fatPutEmm>
    2884:	88 23       	and	r24, r24
    2886:	c1 f0       	breq	.+48     	; 0x28b8 <_ZN8SdVolume9freeChainEm+0x8e>
    2888:	e9 80       	ldd	r14, Y+1	; 0x01
    288a:	fa 80       	ldd	r15, Y+2	; 0x02

    cluster = next;
    288c:	0b 81       	ldd	r16, Y+3	; 0x03
    288e:	1c 81       	ldd	r17, Y+4	; 0x04
    2890:	f6 01       	movw	r30, r12
    2892:	87 89       	ldd	r24, Z+23	; 0x17
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2894:	80 31       	cpi	r24, 0x10	; 16
    2896:	29 f0       	breq	.+10     	; 0x28a2 <_ZN8SdVolume9freeChainEm+0x78>
    2898:	88 ef       	ldi	r24, 0xF8	; 248
    289a:	9f ef       	ldi	r25, 0xFF	; 255
    289c:	af ef       	ldi	r26, 0xFF	; 255
    289e:	bf e0       	ldi	r27, 0x0F	; 15
    28a0:	04 c0       	rjmp	.+8      	; 0x28aa <_ZN8SdVolume9freeChainEm+0x80>
    28a2:	88 ef       	ldi	r24, 0xF8	; 248
    28a4:	9f ef       	ldi	r25, 0xFF	; 255
    28a6:	a0 e0       	ldi	r26, 0x00	; 0
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e8 16       	cp	r14, r24
    28ac:	f9 06       	cpc	r15, r25
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    28ae:	0a 07       	cpc	r16, r26
    28b0:	1b 07       	cpc	r17, r27
    28b2:	c8 f2       	brcs	.-78     	; 0x2866 <_ZN8SdVolume9freeChainEm+0x3c>
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	01 c0       	rjmp	.+2      	; 0x28ba <_ZN8SdVolume9freeChainEm+0x90>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	1f 91       	pop	r17
    28c8:	0f 91       	pop	r16
    28ca:	ff 90       	pop	r15
    28cc:	ef 90       	pop	r14
    28ce:	df 90       	pop	r13
    28d0:	cf 90       	pop	r12
    28d2:	bf 90       	pop	r11
    28d4:	af 90       	pop	r10
    28d6:	08 95       	ret

000028d8 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    28d8:	4f 92       	push	r4
    28da:	5f 92       	push	r5
    28dc:	6f 92       	push	r6
    28de:	7f 92       	push	r7
    28e0:	8f 92       	push	r8
    28e2:	9f 92       	push	r9
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <_ZNK8SdVolume9chainSizeEmPm+0x22>
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <_ZNK8SdVolume9chainSizeEmPm+0x24>
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	6c 01       	movw	r12, r24
    2902:	49 83       	std	Y+1, r20	; 0x01
    2904:	5a 83       	std	Y+2, r21	; 0x02
    2906:	6b 83       	std	Y+3, r22	; 0x03
    2908:	7c 83       	std	Y+4, r23	; 0x04
    290a:	39 01       	movw	r6, r18
    290c:	ee 24       	eor	r14, r14
    290e:	ff 24       	eor	r15, r15
    2910:	87 01       	movw	r16, r14
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2912:	2e 01       	movw	r4, r28
    2914:	08 94       	sec
    2916:	41 1c       	adc	r4, r1
    2918:	51 1c       	adc	r5, r1
    s += 512UL << clusterSizeShift_;
    291a:	81 2c       	mov	r8, r1
    291c:	a2 e0       	ldi	r26, 0x02	; 2
    291e:	9a 2e       	mov	r9, r26
    2920:	a1 2c       	mov	r10, r1
    2922:	b1 2c       	mov	r11, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2924:	49 81       	ldd	r20, Y+1	; 0x01
    2926:	5a 81       	ldd	r21, Y+2	; 0x02
    2928:	6b 81       	ldd	r22, Y+3	; 0x03
    292a:	7c 81       	ldd	r23, Y+4	; 0x04
    292c:	c6 01       	movw	r24, r12
    292e:	92 01       	movw	r18, r4
    2930:	0a df       	rcall	.-492    	; 0x2746 <_ZNK8SdVolume6fatGetEmPm>
    2932:	88 23       	and	r24, r24
    2934:	51 f1       	breq	.+84     	; 0x298a <_ZNK8SdVolume9chainSizeEmPm+0xb2>
    2936:	d5 01       	movw	r26, r10
    s += 512UL << clusterSizeShift_;
    2938:	c4 01       	movw	r24, r8
    293a:	f6 01       	movw	r30, r12
    293c:	05 84       	ldd	r0, Z+13	; 0x0d
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <_ZNK8SdVolume9chainSizeEmPm+0x70>
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	aa 1f       	adc	r26, r26
    2946:	bb 1f       	adc	r27, r27
    2948:	0a 94       	dec	r0
    294a:	d2 f7       	brpl	.-12     	; 0x2940 <_ZNK8SdVolume9chainSizeEmPm+0x68>
    294c:	e8 0e       	add	r14, r24
    294e:	f9 1e       	adc	r15, r25
    2950:	0a 1f       	adc	r16, r26
    2952:	1b 1f       	adc	r17, r27
    2954:	29 81       	ldd	r18, Y+1	; 0x01
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2956:	3a 81       	ldd	r19, Y+2	; 0x02
    2958:	4b 81       	ldd	r20, Y+3	; 0x03
    295a:	5c 81       	ldd	r21, Y+4	; 0x04
    295c:	87 89       	ldd	r24, Z+23	; 0x17
    295e:	80 31       	cpi	r24, 0x10	; 16
    2960:	29 f0       	breq	.+10     	; 0x296c <_ZNK8SdVolume9chainSizeEmPm+0x94>
    2962:	88 ef       	ldi	r24, 0xF8	; 248
    2964:	9f ef       	ldi	r25, 0xFF	; 255
    2966:	af ef       	ldi	r26, 0xFF	; 255
    2968:	bf e0       	ldi	r27, 0x0F	; 15
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <_ZNK8SdVolume9chainSizeEmPm+0x9c>
    296c:	88 ef       	ldi	r24, 0xF8	; 248
    296e:	9f ef       	ldi	r25, 0xFF	; 255
    2970:	a0 e0       	ldi	r26, 0x00	; 0
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	28 17       	cp	r18, r24
    2976:	39 07       	cpc	r19, r25
    2978:	4a 07       	cpc	r20, r26
    297a:	5b 07       	cpc	r21, r27
    297c:	98 f2       	brcs	.-90     	; 0x2924 <_ZNK8SdVolume9chainSizeEmPm+0x4c>
    297e:	f3 01       	movw	r30, r6
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2980:	e0 82       	st	Z, r14
    2982:	f1 82       	std	Z+1, r15	; 0x01
    2984:	02 83       	std	Z+2, r16	; 0x02
    2986:	13 83       	std	Z+3, r17	; 0x03
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	0f 90       	pop	r0
  return true;
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	df 90       	pop	r13
    29a0:	cf 90       	pop	r12
    29a2:	bf 90       	pop	r11
    29a4:	af 90       	pop	r10
    29a6:	9f 90       	pop	r9
    29a8:	8f 90       	pop	r8
    29aa:	7f 90       	pop	r7
    29ac:	6f 90       	pop	r6
    29ae:	5f 90       	pop	r5
    29b0:	4f 90       	pop	r4
    29b2:	08 95       	ret

000029b4 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    29b4:	2f 92       	push	r2
    29b6:	3f 92       	push	r3
    29b8:	4f 92       	push	r4
    29ba:	5f 92       	push	r5
    29bc:	6f 92       	push	r6
    29be:	7f 92       	push	r7
    29c0:	8f 92       	push	r8
    29c2:	9f 92       	push	r9
    29c4:	af 92       	push	r10
    29c6:	bf 92       	push	r11
    29c8:	cf 92       	push	r12
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	2f 97       	sbiw	r28, 0x0f	; 15
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	1c 01       	movw	r2, r24
    29ea:	4a 87       	std	Y+10, r20	; 0x0a
    29ec:	5b 87       	std	Y+11, r21	; 0x0b
    29ee:	6c 87       	std	Y+12, r22	; 0x0c
    29f0:	7d 87       	std	Y+13, r23	; 0x0d
    29f2:	3f 87       	std	Y+15, r19	; 0x0f
    29f4:	2e 87       	std	Y+14, r18	; 0x0e

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    29f6:	d9 01       	movw	r26, r18
    29f8:	0d 91       	ld	r16, X+
    29fa:	1d 91       	ld	r17, X+
    29fc:	2d 91       	ld	r18, X+
    29fe:	3c 91       	ld	r19, X
    2a00:	01 15       	cp	r16, r1
    2a02:	11 05       	cpc	r17, r1
    2a04:	21 05       	cpc	r18, r1
    2a06:	31 05       	cpc	r19, r1
    2a08:	49 f0       	breq	.+18     	; 0x2a1c <_ZN8SdVolume15allocContiguousEmPm+0x68>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2a0a:	48 01       	movw	r8, r16
    2a0c:	59 01       	movw	r10, r18
    2a0e:	08 94       	sec
    2a10:	81 1c       	adc	r8, r1
    2a12:	91 1c       	adc	r9, r1
    2a14:	a1 1c       	adc	r10, r1
    2a16:	b1 1c       	adc	r11, r1
    2a18:	19 86       	std	Y+9, r1	; 0x09
    2a1a:	10 c0       	rjmp	.+32     	; 0x2a3c <_ZN8SdVolume15allocContiguousEmPm+0x88>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	80 80       	ld	r8, Z
    2a20:	91 80       	ldd	r9, Z+1	; 0x01
    2a22:	a2 80       	ldd	r10, Z+2	; 0x02
    2a24:	b3 80       	ldd	r11, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2a26:	19 86       	std	Y+9, r1	; 0x09
    2a28:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a2c:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a2e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	a1 05       	cpc	r26, r1
    2a34:	b1 05       	cpc	r27, r1
    2a36:	11 f4       	brne	.+4      	; 0x2a3c <_ZN8SdVolume15allocContiguousEmPm+0x88>
    2a38:	91 e0       	ldi	r25, 0x01	; 1
    2a3a:	99 87       	std	Y+9, r25	; 0x09
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2a3c:	d1 01       	movw	r26, r2
    2a3e:	19 96       	adiw	r26, 0x09	; 9
    2a40:	8d 91       	ld	r24, X+
    2a42:	9d 91       	ld	r25, X+
    2a44:	0d 90       	ld	r0, X+
    2a46:	bc 91       	ld	r27, X
    2a48:	a0 2d       	mov	r26, r0
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	a1 1d       	adc	r26, r1
    2a4e:	b1 1d       	adc	r27, r1
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	af 83       	std	Y+7, r26	; 0x07
    2a56:	b8 87       	std	Y+8, r27	; 0x08
    2a58:	75 01       	movw	r14, r10
    2a5a:	64 01       	movw	r12, r8
    2a5c:	44 24       	eor	r4, r4
    2a5e:	55 24       	eor	r5, r5
    2a60:	32 01       	movw	r6, r4
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2a62:	8e 01       	movw	r16, r28
    2a64:	0f 5f       	subi	r16, 0xFF	; 255
    2a66:	1f 4f       	sbci	r17, 0xFF	; 255
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2a68:	f1 01       	movw	r30, r2
    2a6a:	81 85       	ldd	r24, Z+9	; 0x09
    2a6c:	92 85       	ldd	r25, Z+10	; 0x0a
    2a6e:	a3 85       	ldd	r26, Z+11	; 0x0b
    2a70:	b4 85       	ldd	r27, Z+12	; 0x0c
    2a72:	48 16       	cp	r4, r24
    2a74:	59 06       	cpc	r5, r25
    2a76:	6a 06       	cpc	r6, r26
    2a78:	7b 06       	cpc	r7, r27
    2a7a:	08 f0       	brcs	.+2      	; 0x2a7e <_ZN8SdVolume15allocContiguousEmPm+0xca>
    2a7c:	8c c0       	rjmp	.+280    	; 0x2b96 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	af 81       	ldd	r26, Y+7	; 0x07
    2a84:	b8 85       	ldd	r27, Y+8	; 0x08
    2a86:	8c 15       	cp	r24, r12
    2a88:	9d 05       	cpc	r25, r13
    2a8a:	ae 05       	cpc	r26, r14
    2a8c:	bf 05       	cpc	r27, r15
    2a8e:	50 f4       	brcc	.+20     	; 0x2aa4 <_ZN8SdVolume15allocContiguousEmPm+0xf0>
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	88 2e       	mov	r8, r24
    2a94:	91 2c       	mov	r9, r1
    2a96:	a1 2c       	mov	r10, r1
    2a98:	b1 2c       	mov	r11, r1
    2a9a:	b2 e0       	ldi	r27, 0x02	; 2
    2a9c:	cb 2e       	mov	r12, r27
    2a9e:	d1 2c       	mov	r13, r1
    2aa0:	e1 2c       	mov	r14, r1
    2aa2:	f1 2c       	mov	r15, r1
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2aa4:	c1 01       	movw	r24, r2
    2aa6:	b7 01       	movw	r22, r14
    2aa8:	a6 01       	movw	r20, r12
    2aaa:	98 01       	movw	r18, r16
    2aac:	4c de       	rcall	.-872    	; 0x2746 <_ZNK8SdVolume6fatGetEmPm>
    2aae:	88 23       	and	r24, r24
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <_ZN8SdVolume15allocContiguousEmPm+0x100>
    2ab2:	71 c0       	rjmp	.+226    	; 0x2b96 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01

    if (f != 0) {
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	ab 81       	ldd	r26, Y+3	; 0x03
    2aba:	bc 81       	ldd	r27, Y+4	; 0x04
    2abc:	a7 01       	movw	r20, r14
    2abe:	96 01       	movw	r18, r12
    2ac0:	2f 5f       	subi	r18, 0xFF	; 255
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	a1 05       	cpc	r26, r1
    2acc:	b1 05       	cpc	r27, r1
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <_ZN8SdVolume15allocContiguousEmPm+0x122>
    2ad0:	49 01       	movw	r8, r18
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2ad2:	5a 01       	movw	r10, r20
    2ad4:	0d c0       	rjmp	.+26     	; 0x2af0 <_ZN8SdVolume15allocContiguousEmPm+0x13c>
    2ad6:	28 19       	sub	r18, r8
    } else if ((endCluster - bgnCluster + 1) == count) {
    2ad8:	39 09       	sbc	r19, r9
    2ada:	4a 09       	sbc	r20, r10
    2adc:	5b 09       	sbc	r21, r11
    2ade:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae2:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ae4:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ae6:	28 17       	cp	r18, r24
    2ae8:	39 07       	cpc	r19, r25
    2aea:	4a 07       	cpc	r20, r26
    2aec:	5b 07       	cpc	r21, r27
    2aee:	59 f0       	breq	.+22     	; 0x2b06 <_ZN8SdVolume15allocContiguousEmPm+0x152>
    2af0:	08 94       	sec

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2af2:	41 1c       	adc	r4, r1
    2af4:	51 1c       	adc	r5, r1
    2af6:	61 1c       	adc	r6, r1
    2af8:	71 1c       	adc	r7, r1
    2afa:	08 94       	sec
    2afc:	c1 1c       	adc	r12, r1
    2afe:	d1 1c       	adc	r13, r1
    2b00:	e1 1c       	adc	r14, r1
    2b02:	f1 1c       	adc	r15, r1
    2b04:	b1 cf       	rjmp	.-158    	; 0x2a68 <_ZN8SdVolume15allocContiguousEmPm+0xb4>
    2b06:	c1 01       	movw	r24, r2
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2b08:	a6 01       	movw	r20, r12
    2b0a:	b7 01       	movw	r22, r14
    2b0c:	0f ef       	ldi	r16, 0xFF	; 255
    2b0e:	1f ef       	ldi	r17, 0xFF	; 255
    2b10:	2f ef       	ldi	r18, 0xFF	; 255
    2b12:	3f e0       	ldi	r19, 0x0F	; 15
    2b14:	7d dd       	rcall	.-1286   	; 0x2610 <_ZN8SdVolume6fatPutEmm>
    2b16:	88 23       	and	r24, r24
    2b18:	91 f4       	brne	.+36     	; 0x2b3e <_ZN8SdVolume15allocContiguousEmPm+0x18a>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2b1a:	3d c0       	rjmp	.+122    	; 0x2b96 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    2b1c:	26 01       	movw	r4, r12
    2b1e:	37 01       	movw	r6, r14

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2b20:	08 94       	sec
    2b22:	41 08       	sbc	r4, r1
    2b24:	51 08       	sbc	r5, r1
    2b26:	61 08       	sbc	r6, r1
    2b28:	71 08       	sbc	r7, r1
    2b2a:	c1 01       	movw	r24, r2
    2b2c:	b3 01       	movw	r22, r6
    2b2e:	a2 01       	movw	r20, r4
    2b30:	97 01       	movw	r18, r14
    2b32:	86 01       	movw	r16, r12
    2b34:	6d dd       	rcall	.-1318   	; 0x2610 <_ZN8SdVolume6fatPutEmm>
    2b36:	88 23       	and	r24, r24
    2b38:	71 f1       	breq	.+92     	; 0x2b96 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    2b3a:	73 01       	movw	r14, r6
    2b3c:	62 01       	movw	r12, r4
    2b3e:	8c 14       	cp	r8, r12
    2b40:	9d 04       	cpc	r9, r13
    2b42:	ae 04       	cpc	r10, r14
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2b44:	bf 04       	cpc	r11, r15
    2b46:	50 f3       	brcs	.-44     	; 0x2b1c <_ZN8SdVolume15allocContiguousEmPm+0x168>
    2b48:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b4a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b4c:	4d 91       	ld	r20, X+
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2b4e:	5d 91       	ld	r21, X+
    2b50:	6d 91       	ld	r22, X+
    2b52:	7c 91       	ld	r23, X
    2b54:	41 15       	cp	r20, r1
    2b56:	51 05       	cpc	r21, r1
    2b58:	61 05       	cpc	r22, r1
    2b5a:	71 05       	cpc	r23, r1
    2b5c:	31 f0       	breq	.+12     	; 0x2b6a <_ZN8SdVolume15allocContiguousEmPm+0x1b6>
    2b5e:	c1 01       	movw	r24, r2
    2b60:	95 01       	movw	r18, r10
    2b62:	84 01       	movw	r16, r8
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2b64:	55 dd       	rcall	.-1366   	; 0x2610 <_ZN8SdVolume6fatPutEmm>
    2b66:	88 23       	and	r24, r24
    2b68:	b1 f0       	breq	.+44     	; 0x2b96 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    2b6a:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b6c:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b6e:	80 82       	st	Z, r8
    2b70:	91 82       	std	Z+1, r9	; 0x01
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2b72:	a2 82       	std	Z+2, r10	; 0x02
    2b74:	b3 82       	std	Z+3, r11	; 0x03
    2b76:	f9 85       	ldd	r31, Y+9	; 0x09
    2b78:	ff 23       	and	r31, r31
    2b7a:	59 f0       	breq	.+22     	; 0x2b92 <_ZN8SdVolume15allocContiguousEmPm+0x1de>
    2b7c:	08 94       	sec

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2b7e:	81 1c       	adc	r8, r1
    2b80:	91 1c       	adc	r9, r1
    2b82:	a1 1c       	adc	r10, r1
    2b84:	b1 1c       	adc	r11, r1
    2b86:	d1 01       	movw	r26, r2
    2b88:	8d 92       	st	X+, r8
    2b8a:	9d 92       	st	X+, r9
    2b8c:	ad 92       	st	X+, r10
    2b8e:	bc 92       	st	X, r11
    2b90:	13 97       	sbiw	r26, 0x03	; 3
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	01 c0       	rjmp	.+2      	; 0x2b98 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	2f 96       	adiw	r28, 0x0f	; 15
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62

  return true;
}
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	ff 90       	pop	r15
    2bae:	ef 90       	pop	r14
    2bb0:	df 90       	pop	r13
    2bb2:	cf 90       	pop	r12
    2bb4:	bf 90       	pop	r11
    2bb6:	af 90       	pop	r10
    2bb8:	9f 90       	pop	r9
    2bba:	8f 90       	pop	r8
    2bbc:	7f 90       	pop	r7
    2bbe:	6f 90       	pop	r6
    2bc0:	5f 90       	pop	r5
    2bc2:	4f 90       	pop	r4
    2bc4:	3f 90       	pop	r3
    2bc6:	2f 90       	pop	r2
    2bc8:	08 95       	ret

00002bca <_ZN11EEPROMClass4readEi>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2bca:	f9 99       	sbic	0x1f, 1	; 31
    2bcc:	fe cf       	rjmp	.-4      	; 0x2bca <_ZN11EEPROMClass4readEi>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2bce:	72 bd       	out	0x22, r23	; 34
    2bd0:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2bd2:	f8 9a       	sbi	0x1f, 0	; 31
    2bd4:	80 b5       	in	r24, 0x20	; 32
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
    2bd6:	08 95       	ret

00002bd8 <_ZN11EEPROMClass5writeEih>:
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2bd8:	f9 99       	sbic	0x1f, 1	; 31
    2bda:	fe cf       	rjmp	.-4      	; 0x2bd8 <_ZN11EEPROMClass5writeEih>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2bdc:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2bde:	72 bd       	out	0x22, r23	; 34
    2be0:	61 bd       	out	0x21, r22	; 33
#endif
    EEDR = __value;
    2be2:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	fa 9a       	sbi	0x1f, 2	; 31
    2bea:	f9 9a       	sbi	0x1f, 1	; 31
    2bec:	0f be       	out	0x3f, r0	; 63

void EEPROMClass::write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
}
    2bee:	08 95       	ret

00002bf0 <_ZN4FileC1Ev>:
       Serial.println(nfilecount, DEC);
    */
  }
}

File::File(void) {
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	13 82       	std	Z+3, r1	; 0x03
    2bf4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2bf6:	88 ee       	ldi	r24, 0xE8	; 232
    2bf8:	93 e0       	ldi	r25, 0x03	; 3
    2bfa:	a0 e0       	ldi	r26, 0x00	; 0
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	84 83       	std	Z+4, r24	; 0x04
    2c00:	95 83       	std	Z+5, r25	; 0x05
    2c02:	a6 83       	std	Z+6, r26	; 0x06
    2c04:	b7 83       	std	Z+7, r27	; 0x07
    2c06:	8e e3       	ldi	r24, 0x3E	; 62
    2c08:	92 e0       	ldi	r25, 0x02	; 2
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
  _file = 0;
    2c0e:	12 8e       	std	Z+26, r1	; 0x1a
    2c10:	11 8e       	std	Z+25, r1	; 0x19
  _name[0] = 0;
    2c12:	14 86       	std	Z+12, r1	; 0x0c
  //Serial.print("Created empty file object");
}
    2c14:	08 95       	ret

00002c16 <_ZN4FileD1Ev>:

File::~File(void) {
    2c16:	fc 01       	movw	r30, r24
    2c18:	8e e3       	ldi	r24, 0x3E	; 62
    2c1a:	92 e0       	ldi	r25, 0x02	; 2
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
  //  Serial.print("Deleted file object");
}
    2c20:	08 95       	ret

00002c22 <_ZN4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	0f 92       	push	r0
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	69 83       	std	Y+1, r22	; 0x01
  return write(&val, 1);
    2c30:	a0 81       	ld	r26, Z
    2c32:	b1 81       	ldd	r27, Z+1	; 0x01
    2c34:	12 96       	adiw	r26, 0x02	; 2
    2c36:	2d 91       	ld	r18, X+
    2c38:	3c 91       	ld	r19, X
    2c3a:	13 97       	sbiw	r26, 0x03	; 3
    2c3c:	be 01       	movw	r22, r28
    2c3e:	6f 5f       	subi	r22, 0xFF	; 255
    2c40:	7f 4f       	sbci	r23, 0xFF	; 255
    2c42:	41 e0       	ldi	r20, 0x01	; 1
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	f9 01       	movw	r30, r18
    2c48:	09 95       	icall
}
    2c4a:	0f 90       	pop	r0
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <_ZN4File9availableEv>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    2c52:	dc 01       	movw	r26, r24
    2c54:	59 96       	adiw	r26, 0x19	; 25
    2c56:	ed 91       	ld	r30, X+
    2c58:	fc 91       	ld	r31, X
    2c5a:	5a 97       	sbiw	r26, 0x1a	; 26
    2c5c:	30 97       	sbiw	r30, 0x00	; 0
    2c5e:	19 f4       	brne	.+6      	; 0x2c66 <_ZN4File9availableEv+0x14>
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	18 c0       	rjmp	.+48     	; 0x2c96 <_ZN4File9availableEv+0x44>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    2c66:	23 89       	ldd	r18, Z+19	; 0x13
    2c68:	34 89       	ldd	r19, Z+20	; 0x14
    2c6a:	45 89       	ldd	r20, Z+21	; 0x15
    2c6c:	56 89       	ldd	r21, Z+22	; 0x16
    2c6e:	82 85       	ldd	r24, Z+10	; 0x0a
    2c70:	93 85       	ldd	r25, Z+11	; 0x0b
    2c72:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c74:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c76:	28 1b       	sub	r18, r24
    2c78:	39 0b       	sbc	r19, r25
    2c7a:	4a 0b       	sbc	r20, r26
    2c7c:	5b 0b       	sbc	r21, r27
    2c7e:	20 30       	cpi	r18, 0x00	; 0
    2c80:	b0 e8       	ldi	r27, 0x80	; 128
    2c82:	3b 07       	cpc	r19, r27
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	4b 07       	cpc	r20, r27
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	5b 07       	cpc	r21, r27
    2c8c:	20 f0       	brcs	.+8      	; 0x2c96 <_ZN4File9availableEv+0x44>
    2c8e:	2f ef       	ldi	r18, 0xFF	; 255
    2c90:	3f e7       	ldi	r19, 0x7F	; 127
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	50 e0       	ldi	r21, 0x00	; 0
}
    2c96:	c9 01       	movw	r24, r18
    2c98:	08 95       	ret

00002c9a <_ZN4FilecvbEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	59 96       	adiw	r26, 0x19	; 25
    2c9e:	ed 91       	ld	r30, X+
    2ca0:	fc 91       	ld	r31, X
    2ca2:	5a 97       	sbiw	r26, 0x1a	; 26
    2ca4:	30 97       	sbiw	r30, 0x00	; 0
    2ca6:	11 f4       	brne	.+4      	; 0x2cac <_ZN4FilecvbEv+0x12>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	08 95       	ret
    return  _file->isOpen();
    2cac:	85 81       	ldd	r24, Z+5	; 0x05
    2cae:	81 11       	cpse	r24, r1
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    2cb2:	08 95       	ret

00002cb4 <_ZN4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	ec 01       	movw	r28, r24
  if (_file) {
    2cba:	89 8d       	ldd	r24, Y+25	; 0x19
    2cbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	39 f0       	breq	.+14     	; 0x2cd0 <_ZN4File5closeEv+0x1c>
    _file->close();
    2cc2:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
    free(_file); 
    2cc6:	89 8d       	ldd	r24, Y+25	; 0x19
    2cc8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cca:	2c d5       	rcall	.+2648   	; 0x3724 <free>
    2ccc:	1a 8e       	std	Y+26, r1	; 0x1a
    _file = 0;
    2cce:	19 8e       	std	Y+25, r1	; 0x19
    2cd0:	df 91       	pop	r29
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    2cd2:	cf 91       	pop	r28
    2cd4:	08 95       	ret

00002cd6 <_ZN4File5flushEv>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	81 8d       	ldd	r24, Z+25	; 0x19
    2cda:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	11 f0       	breq	.+4      	; 0x2ce4 <_ZN4File5flushEv+0xe>
    _file->sync();
    2ce0:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <_ZN6SdFile4syncEv>
    2ce4:	08 95       	ret

00002ce6 <_ZN4File4readEv>:
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	0f 92       	push	r0
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
  if (_file) 
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	81 8d       	ldd	r24, Z+25	; 0x19
    2cf4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	49 f0       	breq	.+18     	; 0x2d0c <_ZN4File4readEv+0x26>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2cfa:	be 01       	movw	r22, r28
    2cfc:	6f 5f       	subi	r22, 0xFF	; 255
    2cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2d00:	41 e0       	ldi	r20, 0x01	; 1
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_ZN6SdFile4readEPvj>
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	19 f0       	breq	.+6      	; 0x2d12 <_ZN4File4readEv+0x2c>
    2d0c:	2f ef       	ldi	r18, 0xFF	; 255
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	03 c0       	rjmp	.+6      	; 0x2d18 <_ZN4File4readEv+0x32>
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    return _file->read();
  return -1;
}
    2d18:	c9 01       	movw	r24, r18
    2d1a:	0f 90       	pop	r0
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <_ZN4File4peekEv>:
    return 0;
  }
  return t;
}

int File::peek() {
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	0f 93       	push	r16
    2d28:	1f 93       	push	r17
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	0f 92       	push	r0
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	7c 01       	movw	r14, r24
  if (! _file) 
    2d36:	dc 01       	movw	r26, r24
    2d38:	59 96       	adiw	r26, 0x19	; 25
    2d3a:	8d 91       	ld	r24, X+
    2d3c:	9c 91       	ld	r25, X
    2d3e:	5a 97       	sbiw	r26, 0x1a	; 26
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	19 f4       	brne	.+6      	; 0x2d4a <_ZN4File4peekEv+0x28>
    2d44:	00 e0       	ldi	r16, 0x00	; 0
    2d46:	10 e0       	ldi	r17, 0x00	; 0
    2d48:	1f c0       	rjmp	.+62     	; 0x2d88 <_ZN4File4peekEv+0x66>
    2d4a:	be 01       	movw	r22, r28
    2d4c:	6f 5f       	subi	r22, 0xFF	; 255
    2d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_ZN6SdFile4readEPvj>
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	19 f0       	breq	.+6      	; 0x2d62 <_ZN4File4peekEv+0x40>
    2d5c:	0f ef       	ldi	r16, 0xFF	; 255
    2d5e:	1f ef       	ldi	r17, 0xFF	; 255
    2d60:	13 c0       	rjmp	.+38     	; 0x2d88 <_ZN4File4peekEv+0x66>
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	08 2f       	mov	r16, r24
    2d66:	10 e0       	ldi	r17, 0x00	; 0
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    2d68:	d7 01       	movw	r26, r14
    2d6a:	59 96       	adiw	r26, 0x19	; 25
    2d6c:	ed 91       	ld	r30, X+
    2d6e:	fc 91       	ld	r31, X
    2d70:	5a 97       	sbiw	r26, 0x1a	; 26
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    2d72:	42 85       	ldd	r20, Z+10	; 0x0a
    2d74:	53 85       	ldd	r21, Z+11	; 0x0b
    2d76:	64 85       	ldd	r22, Z+12	; 0x0c
    2d78:	75 85       	ldd	r23, Z+13	; 0x0d
    2d7a:	41 50       	subi	r20, 0x01	; 1
    2d7c:	50 40       	sbci	r21, 0x00	; 0
    2d7e:	60 40       	sbci	r22, 0x00	; 0
    2d80:	70 40       	sbci	r23, 0x00	; 0
    2d82:	cf 01       	movw	r24, r30
    2d84:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN6SdFile7seekSetEm>
  return c;
}
    2d88:	c8 01       	movw	r24, r16
    2d8a:	0f 90       	pop	r0
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	08 95       	ret

00002d9a <_ZN4File5writeEPKhj>:

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	ec 01       	movw	r28, r24
  size_t t;
  if (!_file) {
    2da0:	e9 8d       	ldd	r30, Y+25	; 0x19
    2da2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2da4:	30 97       	sbiw	r30, 0x00	; 0
    2da6:	61 f0       	breq	.+24     	; 0x2dc0 <_ZN4File5writeEPKhj+0x26>
    setWriteError();
    return 0;
    2da8:	13 82       	std	Z+3, r1	; 0x03
    2daa:	12 82       	std	Z+2, r1	; 0x02
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    2dac:	cf 01       	movw	r24, r30
    2dae:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN6SdFile5writeEPKvj>
    2db2:	9c 01       	movw	r18, r24
  if (_file->getWriteError()) {
    2db4:	e9 8d       	ldd	r30, Y+25	; 0x19
    2db6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	89 2b       	or	r24, r25
    2dbe:	31 f0       	breq	.+12     	; 0x2dcc <_ZN4File5writeEPKhj+0x32>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	9b 83       	std	Y+3, r25	; 0x03
    2dc6:	8a 83       	std	Y+2, r24	; 0x02
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    setWriteError();
    return 0;
  }
  return t;
}
    2dcc:	c9 01       	movw	r24, r18
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret

00002dd4 <_ZN4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	ec 01       	movw	r28, r24
    2de2:	f6 2e       	mov	r15, r22
    2de4:	e7 2e       	mov	r14, r23
    2de6:	8a 01       	movw	r16, r20
  public:
    Print() : write_error(0) {}
    2de8:	1b 82       	std	Y+3, r1	; 0x03
    2dea:	1a 82       	std	Y+2, r1	; 0x02
    2dec:	88 ee       	ldi	r24, 0xE8	; 232
    2dee:	93 e0       	ldi	r25, 0x03	; 3
    2df0:	a0 e0       	ldi	r26, 0x00	; 0
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	8c 83       	std	Y+4, r24	; 0x04
    2df6:	9d 83       	std	Y+5, r25	; 0x05
    2df8:	ae 83       	std	Y+6, r26	; 0x06
    2dfa:	bf 83       	std	Y+7, r27	; 0x07
    2dfc:	8e e3       	ldi	r24, 0x3E	; 62
    2dfe:	92 e0       	ldi	r25, 0x02	; 2
    2e00:	99 83       	std	Y+1, r25	; 0x01
    2e02:	88 83       	st	Y, r24
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    2e04:	8d e1       	ldi	r24, 0x1D	; 29
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	f0 d3       	rcall	.+2016   	; 0x35ea <malloc>
    2e0a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e0c:	89 8f       	std	Y+25, r24	; 0x19
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
  if (_file) {
    2e10:	91 f0       	breq	.+36     	; 0x2e36 <_ZN4FileC1E6SdFilePKc+0x62>
    2e12:	dc 01       	movw	r26, r24
    memcpy(_file, &f, sizeof(SdFile));
    2e14:	8f 2d       	mov	r24, r15
    2e16:	9e 2d       	mov	r25, r14
    2e18:	9c 01       	movw	r18, r24
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	8d e1       	ldi	r24, 0x1D	; 29
    2e1e:	01 90       	ld	r0, Z+
    2e20:	0d 92       	st	X+, r0
    2e22:	81 50       	subi	r24, 0x01	; 1
    2e24:	e1 f7       	brne	.-8      	; 0x2e1e <_ZN4FileC1E6SdFilePKc+0x4a>
    2e26:	ce 01       	movw	r24, r28
    
    strncpy(_name, n, 12);
    2e28:	0c 96       	adiw	r24, 0x0c	; 12
    2e2a:	b8 01       	movw	r22, r16
    2e2c:	4c e0       	ldi	r20, 0x0C	; 12
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	0e 94 b5 00 	call	0x16a	; 0x16a <strncpy>
    2e34:	18 8e       	std	Y+24, r1	; 0x18
    _name[12] = 0;
    2e36:	df 91       	pop	r29
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    2e38:	cf 91       	pop	r28
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	ff 90       	pop	r15
    2e40:	ef 90       	pop	r14
    2e42:	08 95       	ret

00002e44 <_Z20getNextPathComponentPcPjS_>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(char *path, unsigned int *p_offset,
			  char *buffer) {
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	8c 01       	movw	r16, r24
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    2e4e:	fb 01       	movw	r30, r22
    2e50:	c0 81       	ld	r28, Z
    2e52:	d1 81       	ldd	r29, Z+1	; 0x01

  // Skip root or other separator
  if (path[offset] == '/') {
    2e54:	fc 01       	movw	r30, r24
    2e56:	ec 0f       	add	r30, r28
    2e58:	fd 1f       	adc	r31, r29
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8f 32       	cpi	r24, 0x2F	; 47
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <_Z20getNextPathComponentPcPjS_+0x1e>
    offset++;
    2e60:	21 96       	adiw	r28, 0x01	; 1
    2e62:	98 01       	movw	r18, r16
    2e64:	2c 0f       	add	r18, r28
    2e66:	3d 1f       	adc	r19, r29
    2e68:	a0 e0       	ldi	r26, 0x00	; 0
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	0b c0       	rjmp	.+22     	; 0x2e84 <_Z20getNextPathComponentPcPjS_+0x40>
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
    2e6e:	fa 01       	movw	r30, r20
    2e70:	ea 0f       	add	r30, r26
    2e72:	fb 1f       	adc	r31, r27
    2e74:	80 83       	st	Z, r24
    2e76:	11 96       	adiw	r26, 0x01	; 1
    2e78:	21 96       	adiw	r28, 0x01	; 1
    2e7a:	2f 5f       	subi	r18, 0xFF	; 255
    2e7c:	3f 4f       	sbci	r19, 0xFF	; 255
  if (path[offset] == '/') {
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
    2e7e:	ac 30       	cpi	r26, 0x0C	; 12
    2e80:	b1 05       	cpc	r27, r1
    2e82:	31 f0       	breq	.+12     	; 0x2e90 <_Z20getNextPathComponentPcPjS_+0x4c>
    2e84:	f9 01       	movw	r30, r18
    2e86:	80 81       	ld	r24, Z
    2e88:	8f 32       	cpi	r24, 0x2F	; 47
    2e8a:	11 f0       	breq	.+4      	; 0x2e90 <_Z20getNextPathComponentPcPjS_+0x4c>
    2e8c:	88 23       	and	r24, r24
    2e8e:	79 f7       	brne	.-34     	; 0x2e6e <_Z20getNextPathComponentPcPjS_+0x2a>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    2e90:	a4 0f       	add	r26, r20
    2e92:	b5 1f       	adc	r27, r21
    2e94:	1c 92       	st	X, r1

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    2e96:	f8 01       	movw	r30, r16
    2e98:	ec 0f       	add	r30, r28
    2e9a:	fd 1f       	adc	r31, r29
    2e9c:	80 81       	ld	r24, Z
    2e9e:	8f 32       	cpi	r24, 0x2F	; 47
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <_Z20getNextPathComponentPcPjS_+0x60>
    offset++;
    2ea2:	21 96       	adiw	r28, 0x01	; 1
  }

  *p_offset = offset;
    2ea4:	fb 01       	movw	r30, r22
    2ea6:	d1 83       	std	Z+1, r29	; 0x01
    2ea8:	c0 83       	st	Z, r28
    2eaa:	c0 0f       	add	r28, r16
    2eac:	d1 1f       	adc	r29, r17
    2eae:	88 81       	ld	r24, Y
    2eb0:	81 11       	cpse	r24, r1
    2eb2:	81 e0       	ldi	r24, 0x01	; 1

  return (path[offset] != '\0');
}
    2eb4:	df 91       	pop	r29
    2eb6:	cf 91       	pop	r28
    2eb8:	1f 91       	pop	r17
    2eba:	0f 91       	pop	r16
    2ebc:	08 95       	ret

00002ebe <_GLOBAL__I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    2ebe:	10 92 87 05 	sts	0x0587, r1
    2ec2:	10 92 88 05 	sts	0x0588, r1
    2ec6:	10 92 8b 05 	sts	0x058B, r1
    2eca:	10 92 8d 05 	sts	0x058D, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	a0 e0       	ldi	r26, 0x00	; 0
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	80 93 8e 05 	sts	0x058E, r24
    2eda:	90 93 8f 05 	sts	0x058F, r25
    2ede:	a0 93 90 05 	sts	0x0590, r26
    2ee2:	b0 93 91 05 	sts	0x0591, r27
    2ee6:	10 92 a5 05 	sts	0x05A5, r1
    2eea:	10 92 af 05 	sts	0x05AF, r1
    2eee:	10 92 ae 05 	sts	0x05AE, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2ef2:	86 e3       	ldi	r24, 0x36	; 54
    2ef4:	92 e0       	ldi	r25, 0x02	; 2
    2ef6:	90 93 ad 05 	sts	0x05AD, r25
    2efa:	80 93 ac 05 	sts	0x05AC, r24
    2efe:	10 92 b1 05 	sts	0x05B1, r1
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
    2f02:	08 95       	ret

00002f04 <_Z19callback_pathExistsR6SdFilePchPv>:
   a pointer to an arbitrary object used for context.

 */

boolean callback_pathExists(SdFile& parentDir, char *filePathComponent, 
			    boolean isLastComponent, void *object) {
    2f04:	ef 92       	push	r14
    2f06:	ff 92       	push	r15
    2f08:	1f 93       	push	r17
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	6d 97       	sbiw	r28, 0x1d	; 29
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	9c 01       	movw	r18, r24
    2f20:	ab 01       	movw	r20, r22
    2f22:	1c 82       	std	Y+4, r1	; 0x04
    2f24:	1b 82       	std	Y+3, r1	; 0x03
    2f26:	86 e3       	ldi	r24, 0x36	; 54
    2f28:	92 e0       	ldi	r25, 0x02	; 2
    2f2a:	9a 83       	std	Y+2, r25	; 0x02
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	1e 82       	std	Y+6, r1	; 0x06
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    2f30:	7e 01       	movw	r14, r28
    2f32:	08 94       	sec
    2f34:	e1 1c       	adc	r14, r1
    2f36:	f1 1c       	adc	r15, r1
    2f38:	c7 01       	movw	r24, r14
    2f3a:	b9 01       	movw	r22, r18
    2f3c:	21 e0       	ldi	r18, 0x01	; 1
    2f3e:	61 d8       	rcall	.-3902   	; 0x2002 <_ZN6SdFile4openEPS_PKch>
    2f40:	18 2f       	mov	r17, r24
    2f42:	88 23       	and	r24, r24
  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
    2f44:	19 f0       	breq	.+6      	; 0x2f4c <_Z19callback_pathExistsR6SdFilePchPv+0x48>
    2f46:	c7 01       	movw	r24, r14
     child.close(); 
    2f48:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
    2f4c:	81 2f       	mov	r24, r17
  }
  
  return exists;
}
    2f4e:	6d 96       	adiw	r28, 0x1d	; 29
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	1f 91       	pop	r17
    2f60:	ff 90       	pop	r15
    2f62:	ef 90       	pop	r14
    2f64:	08 95       	ret

00002f66 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>:
boolean walkPath(char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    2f66:	2f 92       	push	r2
    2f68:	3f 92       	push	r3
    2f6a:	4f 92       	push	r4
    2f6c:	5f 92       	push	r5
    2f6e:	6f 92       	push	r6
    2f70:	7f 92       	push	r7
    2f72:	8f 92       	push	r8
    2f74:	9f 92       	push	r9
    2f76:	bf 92       	push	r11
    2f78:	cf 92       	push	r12
    2f7a:	df 92       	push	r13
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	c9 54       	subi	r28, 0x49	; 73
    2f8e:	d0 40       	sbci	r29, 0x00	; 0
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	1c 01       	movw	r2, r24
    2f9c:	7b 01       	movw	r14, r22
    2f9e:	2a 01       	movw	r4, r20
    2fa0:	39 01       	movw	r6, r18
    2fa2:	1b 8a       	std	Y+19, r1	; 0x13
    2fa4:	1a 8a       	std	Y+18, r1	; 0x12
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2fa6:	86 e3       	ldi	r24, 0x36	; 54
    2fa8:	92 e0       	ldi	r25, 0x02	; 2
    2faa:	99 8b       	std	Y+17, r25	; 0x11
    2fac:	88 8b       	std	Y+16, r24	; 0x10
    2fae:	1d 8a       	std	Y+21, r1	; 0x15
    2fb0:	18 aa       	std	Y+48, r1	; 0x30
    2fb2:	1f a6       	std	Y+47, r1	; 0x2f
    2fb4:	9e a7       	std	Y+46, r25	; 0x2e
    2fb6:	8d a7       	std	Y+45, r24	; 0x2d
    2fb8:	1a aa       	std	Y+50, r1	; 0x32
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    2fba:	1a 82       	std	Y+2, r1	; 0x02
    2fbc:	19 82       	std	Y+1, r1	; 0x01
    2fbe:	8b 01       	movw	r16, r22
    2fc0:	20 e1       	ldi	r18, 0x10	; 16
    2fc2:	c2 2e       	mov	r12, r18
    2fc4:	d1 2c       	mov	r13, r1
    2fc6:	cc 0e       	add	r12, r28
    2fc8:	dd 1e       	adc	r13, r29
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    2fca:	93 e0       	ldi	r25, 0x03	; 3
    2fcc:	89 2e       	mov	r8, r25
    2fce:	91 2c       	mov	r9, r1
    2fd0:	8c 0e       	add	r8, r28
    2fd2:	9d 1e       	adc	r9, r29
    2fd4:	03 c0       	rjmp	.+6      	; 0x2fdc <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x76>
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    2fd6:	c8 01       	movw	r24, r16
    2fd8:	86 01       	movw	r16, r12
    2fda:	6c 01       	movw	r12, r24
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    2fdc:	c1 01       	movw	r24, r2
    2fde:	be 01       	movw	r22, r28
    2fe0:	6f 5f       	subi	r22, 0xFF	; 255
    2fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe4:	a4 01       	movw	r20, r8
    2fe6:	2e df       	rcall	.-420    	; 0x2e44 <_Z20getNextPathComponentPcPjS_>
    2fe8:	b8 2e       	mov	r11, r24
    2fea:	40 e0       	ldi	r20, 0x00	; 0

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    2fec:	88 23       	and	r24, r24
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x8c>
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	c8 01       	movw	r24, r16
    2ff4:	b4 01       	movw	r22, r8
    2ff6:	93 01       	movw	r18, r6
    2ff8:	f2 01       	movw	r30, r4
    2ffa:	09 95       	icall
    2ffc:	88 23       	and	r24, r24

    if (!shouldContinue) {
    2ffe:	39 f4       	brne	.+14     	; 0x300e <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xa8>
    3000:	0e 15       	cp	r16, r14
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    3002:	1f 05       	cpc	r17, r15
    3004:	19 f1       	breq	.+70     	; 0x304c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe6>
    3006:	c8 01       	movw	r24, r16
        (*p_parent).close();
    3008:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
    300c:	1f c0       	rjmp	.+62     	; 0x304c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe6>
    300e:	bb 20       	and	r11, r11
      }
      return false;
    }
    
    if (!moreComponents) {
    3010:	a9 f0       	breq	.+42     	; 0x303c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xd6>
    3012:	c6 01       	movw	r24, r12
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    3014:	b8 01       	movw	r22, r16
    3016:	a4 01       	movw	r20, r8
    3018:	21 e0       	ldi	r18, 0x01	; 1
    301a:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN6SdFile4openEPS_PKch>
    301e:	b8 2e       	mov	r11, r24
    3020:	0e 15       	cp	r16, r14
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    3022:	1f 05       	cpc	r17, r15
    3024:	19 f0       	breq	.+6      	; 0x302c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xc6>
    3026:	c8 01       	movw	r24, r16
      (*p_parent).close();
    3028:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
    302c:	bb 20       	and	r11, r11
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    302e:	71 f0       	breq	.+28     	; 0x304c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe6>
    3030:	0e 15       	cp	r16, r14
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
    3032:	1f 05       	cpc	r17, r15
    3034:	81 f6       	brne	.-96     	; 0x2fd6 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x70>
    3036:	ce 01       	movw	r24, r28
    3038:	8d 96       	adiw	r24, 0x2d	; 45
    303a:	ce cf       	rjmp	.-100    	; 0x2fd8 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x72>
    303c:	0e 15       	cp	r16, r14
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    303e:	1f 05       	cpc	r17, r15
    3040:	19 f0       	breq	.+6      	; 0x3048 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe2>
    3042:	c8 01       	movw	r24, r16
    (*p_parent).close(); // TODO: Return/ handle different?
    3044:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	01 c0       	rjmp	.+2      	; 0x304e <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe8>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	c7 5b       	subi	r28, 0xB7	; 183
  }

  return true;
}
    3050:	df 4f       	sbci	r29, 0xFF	; 255
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	ff 90       	pop	r15
    3066:	ef 90       	pop	r14
    3068:	df 90       	pop	r13
    306a:	cf 90       	pop	r12
    306c:	bf 90       	pop	r11
    306e:	9f 90       	pop	r9
    3070:	8f 90       	pop	r8
    3072:	7f 90       	pop	r7
    3074:	6f 90       	pop	r6
    3076:	5f 90       	pop	r5
    3078:	4f 90       	pop	r4
    307a:	3f 90       	pop	r3
    307c:	2f 90       	pop	r2
    307e:	08 95       	ret

00003080 <_ZN7SDClass6removeEPc>:
  
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(char *filepath) {
    3080:	9b 01       	movw	r18, r22
  return walkPath(filepath, root, callback_remove);
    3082:	bc 01       	movw	r22, r24
    3084:	66 5d       	subi	r22, 0xD6	; 214
    3086:	7f 4f       	sbci	r23, 0xFF	; 255
    3088:	c9 01       	movw	r24, r18
    308a:	4b ec       	ldi	r20, 0xCB	; 203
    308c:	5a e1       	ldi	r21, 0x1A	; 26
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	69 cf       	rjmp	.-302    	; 0x2f66 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>

00003094 <_ZN7SDClass6existsEPc>:
//   */
//  file.close();
//}


boolean SDClass::exists(char *filepath) {
    3094:	9b 01       	movw	r18, r22
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    3096:	bc 01       	movw	r22, r24
    3098:	66 5d       	subi	r22, 0xD6	; 214
    309a:	7f 4f       	sbci	r23, 0xFF	; 255
    309c:	c9 01       	movw	r24, r18
    309e:	42 e8       	ldi	r20, 0x82	; 130
    30a0:	57 e1       	ldi	r21, 0x17	; 23
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	5f cf       	rjmp	.-322    	; 0x2f66 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>

000030a8 <_ZN7SDClass12getParentDirEPKcPi>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    30a8:	2f 92       	push	r2
    30aa:	3f 92       	push	r3
    30ac:	4f 92       	push	r4
    30ae:	5f 92       	push	r5
    30b0:	6f 92       	push	r6
    30b2:	7f 92       	push	r7
    30b4:	8f 92       	push	r8
    30b6:	9f 92       	push	r9
    30b8:	af 92       	push	r10
    30ba:	bf 92       	push	r11
    30bc:	cf 92       	push	r12
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	c7 54       	subi	r28, 0x47	; 71
    30d2:	d0 40       	sbci	r29, 0x00	; 0
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	58 2e       	mov	r5, r24
    30e0:	49 2e       	mov	r4, r25
    30e2:	fb 01       	movw	r30, r22
    30e4:	3a 01       	movw	r6, r20
    30e6:	19 01       	movw	r2, r18
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
    30e8:	84 a5       	ldd	r24, Z+44	; 0x2c
    30ea:	95 a5       	ldd	r25, Z+45	; 0x2d
    30ec:	99 8b       	std	Y+17, r25	; 0x11
    30ee:	88 8b       	std	Y+16, r24	; 0x10
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    30f0:	26 e3       	ldi	r18, 0x36	; 54
    30f2:	32 e0       	ldi	r19, 0x02	; 2
    30f4:	3f 87       	std	Y+15, r19	; 0x0f
    30f6:	2e 87       	std	Y+14, r18	; 0x0e
    30f8:	86 a5       	ldd	r24, Z+46	; 0x2e
    30fa:	8a 8b       	std	Y+18, r24	; 0x12
    30fc:	87 a5       	ldd	r24, Z+47	; 0x2f
    30fe:	8b 8b       	std	Y+19, r24	; 0x13
    3100:	80 a9       	ldd	r24, Z+48	; 0x30
    3102:	91 a9       	ldd	r25, Z+49	; 0x31
    3104:	a2 a9       	ldd	r26, Z+50	; 0x32
    3106:	b3 a9       	ldd	r27, Z+51	; 0x33
    3108:	8c 8b       	std	Y+20, r24	; 0x14
    310a:	9d 8b       	std	Y+21, r25	; 0x15
    310c:	ae 8b       	std	Y+22, r26	; 0x16
    310e:	bf 8b       	std	Y+23, r27	; 0x17
    3110:	84 a9       	ldd	r24, Z+52	; 0x34
    3112:	95 a9       	ldd	r25, Z+53	; 0x35
    3114:	a6 a9       	ldd	r26, Z+54	; 0x36
    3116:	b7 a9       	ldd	r27, Z+55	; 0x37
    3118:	88 8f       	std	Y+24, r24	; 0x18
    311a:	99 8f       	std	Y+25, r25	; 0x19
    311c:	aa 8f       	std	Y+26, r26	; 0x1a
    311e:	bb 8f       	std	Y+27, r27	; 0x1b
    3120:	80 ad       	ldd	r24, Z+56	; 0x38
    3122:	91 ad       	ldd	r25, Z+57	; 0x39
    3124:	a2 ad       	ldd	r26, Z+58	; 0x3a
    3126:	b3 ad       	ldd	r27, Z+59	; 0x3b
    3128:	8c 8f       	std	Y+28, r24	; 0x1c
    312a:	9d 8f       	std	Y+29, r25	; 0x1d
    312c:	ae 8f       	std	Y+30, r26	; 0x1e
    312e:	bf 8f       	std	Y+31, r27	; 0x1f
    3130:	84 ad       	ldd	r24, Z+60	; 0x3c
    3132:	88 a3       	std	Y+32, r24	; 0x20
    3134:	fd 96       	adiw	r30, 0x3d	; 61
    3136:	81 91       	ld	r24, Z+
    3138:	91 91       	ld	r25, Z+
    313a:	a1 91       	ld	r26, Z+
    313c:	b1 91       	ld	r27, Z+
    313e:	89 a3       	std	Y+33, r24	; 0x21
    3140:	9a a3       	std	Y+34, r25	; 0x22
    3142:	ab a3       	std	Y+35, r26	; 0x23
    3144:	bc a3       	std	Y+36, r27	; 0x24
    3146:	81 91       	ld	r24, Z+
    3148:	91 91       	ld	r25, Z+
    314a:	a1 91       	ld	r26, Z+
    314c:	b1 91       	ld	r27, Z+
    314e:	8d a3       	std	Y+37, r24	; 0x25
    3150:	9e a3       	std	Y+38, r25	; 0x26
    3152:	af a3       	std	Y+39, r26	; 0x27
    3154:	b8 a7       	std	Y+40, r27	; 0x28
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	9a a7       	std	Y+42, r25	; 0x2a
    315c:	89 a7       	std	Y+41, r24	; 0x29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    315e:	1e a6       	std	Y+46, r1	; 0x2e
    3160:	1d a6       	std	Y+45, r1	; 0x2d
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    3162:	3c a7       	std	Y+44, r19	; 0x2c
    3164:	2b a7       	std	Y+43, r18	; 0x2b
    3166:	18 aa       	std	Y+48, r1	; 0x30
    3168:	7a 01       	movw	r14, r20
    316a:	8e 01       	movw	r16, r28
    316c:	02 5f       	subi	r16, 0xF2	; 242
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	3b e2       	ldi	r19, 0x2B	; 43
    3172:	a3 2e       	mov	r10, r19
    3174:	b1 2c       	mov	r11, r1
    3176:	ac 0e       	add	r10, r28
    3178:	bd 1e       	adc	r11, r29
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    317a:	4e 01       	movw	r8, r28
    317c:	08 94       	sec
    317e:	81 1c       	adc	r8, r1
    3180:	91 1c       	adc	r9, r1
    3182:	35 c0       	rjmp	.+106    	; 0x31ee <_ZN7SDClass12getParentDirEPKcPi+0x146>
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    3184:	d7 01       	movw	r26, r14
    3186:	8c 91       	ld	r24, X
    3188:	8f 32       	cpi	r24, 0x2F	; 47
    318a:	21 f4       	brne	.+8      	; 0x3194 <_ZN7SDClass12getParentDirEPKcPi+0xec>
      filepath++;
    318c:	08 94       	sec
    318e:	e1 1c       	adc	r14, r1
    3190:	f1 1c       	adc	r15, r1
    3192:	2d c0       	rjmp	.+90     	; 0x31ee <_ZN7SDClass12getParentDirEPKcPi+0x146>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    3194:	42 2f       	mov	r20, r18
    3196:	4e 19       	sub	r20, r14
    3198:	4d 30       	cpi	r20, 0x0D	; 13
    319a:	08 f0       	brcs	.+2      	; 0x319e <_ZN7SDClass12getParentDirEPKcPi+0xf6>
    319c:	4c e0       	ldi	r20, 0x0C	; 12
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    319e:	c4 2e       	mov	r12, r20
    31a0:	dd 24       	eor	r13, r13
    31a2:	c4 01       	movw	r24, r8
    31a4:	b7 01       	movw	r22, r14
    31a6:	a6 01       	movw	r20, r12
    31a8:	0e 94 b5 00 	call	0x16a	; 0x16a <strncpy>
    subdirname[idx] = 0;
    31ac:	f4 01       	movw	r30, r8
    31ae:	ec 0d       	add	r30, r12
    31b0:	fd 1d       	adc	r31, r13
    31b2:	10 82       	st	Z, r1

    // close the subdir (we reuse them) if open
    subdir->close();
    31b4:	c5 01       	movw	r24, r10
    31b6:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    31ba:	c5 01       	movw	r24, r10
    31bc:	b8 01       	movw	r22, r16
    31be:	a4 01       	movw	r20, r8
    31c0:	21 e0       	ldi	r18, 0x01	; 1
    31c2:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN6SdFile4openEPS_PKch>
    31c6:	88 23       	and	r24, r24
    31c8:	51 f4       	brne	.+20     	; 0x31de <_ZN7SDClass12getParentDirEPKcPi+0x136>
      // failed to open one of the subdirectories
      return SdFile();
    31ca:	e5 2d       	mov	r30, r5
    31cc:	f4 2d       	mov	r31, r4
    31ce:	13 82       	std	Z+3, r1	; 0x03
    31d0:	12 82       	std	Z+2, r1	; 0x02
    31d2:	86 e3       	ldi	r24, 0x36	; 54
    31d4:	92 e0       	ldi	r25, 0x02	; 2
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
    31da:	15 82       	std	Z+5, r1	; 0x05
    31dc:	66 c0       	rjmp	.+204    	; 0x32aa <_ZN7SDClass12getParentDirEPKcPi+0x202>
    }
    // move forward to the next subdirectory
    filepath += idx;
    31de:	ec 0c       	add	r14, r12
    31e0:	fd 1c       	adc	r15, r13

    // we reuse the objects, close it.
    parent->close();
    31e2:	c8 01       	movw	r24, r16
    31e4:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
    31e8:	c5 01       	movw	r24, r10
    31ea:	58 01       	movw	r10, r16
    31ec:	8c 01       	movw	r16, r24
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    31ee:	c7 01       	movw	r24, r14
    31f0:	6f e2       	ldi	r22, 0x2F	; 47
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	0e 94 a3 00 	call	0x146	; 0x146 <strchr>
    31f8:	9c 01       	movw	r18, r24
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	19 f6       	brne	.-122    	; 0x3184 <_ZN7SDClass12getParentDirEPKcPi+0xdc>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    31fe:	e6 18       	sub	r14, r6
    3200:	f7 08       	sbc	r15, r7
    3202:	f1 01       	movw	r30, r2
    3204:	f1 82       	std	Z+1, r15	; 0x01
    3206:	e0 82       	st	Z, r14
  // parent is now the parent diretory of the file!
  return *parent;
    3208:	e5 2d       	mov	r30, r5
    320a:	f4 2d       	mov	r31, r4
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
    320c:	d8 01       	movw	r26, r16
    320e:	12 96       	adiw	r26, 0x02	; 2
    3210:	8d 91       	ld	r24, X+
    3212:	9c 91       	ld	r25, X
    3214:	13 97       	sbiw	r26, 0x03	; 3
    3216:	93 83       	std	Z+3, r25	; 0x03
    3218:	82 83       	std	Z+2, r24	; 0x02
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    321a:	86 e3       	ldi	r24, 0x36	; 54
    321c:	92 e0       	ldi	r25, 0x02	; 2
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
    3222:	14 96       	adiw	r26, 0x04	; 4
    3224:	8c 91       	ld	r24, X
    3226:	14 97       	sbiw	r26, 0x04	; 4
    3228:	84 83       	std	Z+4, r24	; 0x04
    322a:	15 96       	adiw	r26, 0x05	; 5
    322c:	8c 91       	ld	r24, X
    322e:	15 97       	sbiw	r26, 0x05	; 5
    3230:	85 83       	std	Z+5, r24	; 0x05
    3232:	16 96       	adiw	r26, 0x06	; 6
    3234:	2d 91       	ld	r18, X+
    3236:	3d 91       	ld	r19, X+
    3238:	4d 91       	ld	r20, X+
    323a:	5c 91       	ld	r21, X
    323c:	19 97       	sbiw	r26, 0x09	; 9
    323e:	26 83       	std	Z+6, r18	; 0x06
    3240:	37 83       	std	Z+7, r19	; 0x07
    3242:	40 87       	std	Z+8, r20	; 0x08
    3244:	51 87       	std	Z+9, r21	; 0x09
    3246:	1a 96       	adiw	r26, 0x0a	; 10
    3248:	2d 91       	ld	r18, X+
    324a:	3d 91       	ld	r19, X+
    324c:	4d 91       	ld	r20, X+
    324e:	5c 91       	ld	r21, X
    3250:	1d 97       	sbiw	r26, 0x0d	; 13
    3252:	22 87       	std	Z+10, r18	; 0x0a
    3254:	33 87       	std	Z+11, r19	; 0x0b
    3256:	44 87       	std	Z+12, r20	; 0x0c
    3258:	55 87       	std	Z+13, r21	; 0x0d
    325a:	1e 96       	adiw	r26, 0x0e	; 14
    325c:	2d 91       	ld	r18, X+
    325e:	3d 91       	ld	r19, X+
    3260:	4d 91       	ld	r20, X+
    3262:	5c 91       	ld	r21, X
    3264:	51 97       	sbiw	r26, 0x11	; 17
    3266:	26 87       	std	Z+14, r18	; 0x0e
    3268:	37 87       	std	Z+15, r19	; 0x0f
    326a:	40 8b       	std	Z+16, r20	; 0x10
    326c:	51 8b       	std	Z+17, r21	; 0x11
    326e:	52 96       	adiw	r26, 0x12	; 18
    3270:	8c 91       	ld	r24, X
    3272:	52 97       	sbiw	r26, 0x12	; 18
    3274:	82 8b       	std	Z+18, r24	; 0x12
    3276:	53 96       	adiw	r26, 0x13	; 19
    3278:	2d 91       	ld	r18, X+
    327a:	3d 91       	ld	r19, X+
    327c:	4d 91       	ld	r20, X+
    327e:	5c 91       	ld	r21, X
    3280:	56 97       	sbiw	r26, 0x16	; 22
    3282:	23 8b       	std	Z+19, r18	; 0x13
    3284:	34 8b       	std	Z+20, r19	; 0x14
    3286:	45 8b       	std	Z+21, r20	; 0x15
    3288:	56 8b       	std	Z+22, r21	; 0x16
    328a:	57 96       	adiw	r26, 0x17	; 23
    328c:	2d 91       	ld	r18, X+
    328e:	3d 91       	ld	r19, X+
    3290:	4d 91       	ld	r20, X+
    3292:	5c 91       	ld	r21, X
    3294:	5a 97       	sbiw	r26, 0x1a	; 26
    3296:	27 8b       	std	Z+23, r18	; 0x17
    3298:	30 8f       	std	Z+24, r19	; 0x18
    329a:	41 8f       	std	Z+25, r20	; 0x19
    329c:	52 8f       	std	Z+26, r21	; 0x1a
    329e:	5b 96       	adiw	r26, 0x1b	; 27
    32a0:	8d 91       	ld	r24, X+
    32a2:	9c 91       	ld	r25, X
    32a4:	5c 97       	sbiw	r26, 0x1c	; 28
    32a6:	94 8f       	std	Z+28, r25	; 0x1c
    32a8:	83 8f       	std	Z+27, r24	; 0x1b
}
    32aa:	85 2d       	mov	r24, r5
    32ac:	94 2d       	mov	r25, r4
    32ae:	c9 5b       	subi	r28, 0xB9	; 185
    32b0:	df 4f       	sbci	r29, 0xFF	; 255
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	ff 90       	pop	r15
    32c6:	ef 90       	pop	r14
    32c8:	df 90       	pop	r13
    32ca:	cf 90       	pop	r12
    32cc:	bf 90       	pop	r11
    32ce:	af 90       	pop	r10
    32d0:	9f 90       	pop	r9
    32d2:	8f 90       	pop	r8
    32d4:	7f 90       	pop	r7
    32d6:	6f 90       	pop	r6
    32d8:	5f 90       	pop	r5
    32da:	4f 90       	pop	r4
    32dc:	3f 90       	pop	r3
    32de:	2f 90       	pop	r2
    32e0:	08 95       	ret

000032e2 <_ZN7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    32e2:	9f 92       	push	r9
    32e4:	af 92       	push	r10
    32e6:	bf 92       	push	r11
    32e8:	cf 92       	push	r12
    32ea:	df 92       	push	r13
    32ec:	ef 92       	push	r14
    32ee:	ff 92       	push	r15
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	c6 57       	subi	r28, 0x76	; 118
    32fe:	d0 40       	sbci	r29, 0x00	; 0
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	c8 2e       	mov	r12, r24
    330c:	99 2e       	mov	r9, r25
    330e:	8a 01       	movw	r16, r20
    3310:	d2 2e       	mov	r13, r18
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    3312:	43 e0       	ldi	r20, 0x03	; 3
    3314:	a4 2e       	mov	r10, r20
    3316:	b1 2c       	mov	r11, r1
    3318:	ac 0e       	add	r10, r28
    331a:	bd 1e       	adc	r11, r29
    331c:	c5 01       	movw	r24, r10
    331e:	a8 01       	movw	r20, r16
    3320:	9e 01       	movw	r18, r28
    3322:	2f 5f       	subi	r18, 0xFF	; 255
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	c0 de       	rcall	.-640    	; 0x30a8 <_ZN7SDClass12getParentDirEPKcPi>
    3328:	e9 80       	ldd	r14, Y+1	; 0x01
  // no more subdirs!

  filepath += pathidx;
    332a:	fa 80       	ldd	r15, Y+2	; 0x02
    332c:	e0 0e       	add	r14, r16
    332e:	f1 1e       	adc	r15, r17
    3330:	f7 01       	movw	r30, r14

  if (! filepath[0]) {
    3332:	80 81       	ld	r24, Z
    3334:	46 e3       	ldi	r20, 0x36	; 54
    3336:	52 e0       	ldi	r21, 0x02	; 2
    3338:	28 85       	ldd	r18, Y+8	; 0x08
    333a:	88 23       	and	r24, r24
    333c:	09 f0       	breq	.+2      	; 0x3340 <_ZN7SDClass4openEPKch+0x5e>
    333e:	3f c0       	rjmp	.+126    	; 0x33be <_ZN7SDClass4openEPKch+0xdc>
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	9b a3       	std	Y+35, r25	; 0x23
    3346:	8a a3       	std	Y+34, r24	; 0x22
    3348:	59 a3       	std	Y+33, r21	; 0x21
    334a:	48 a3       	std	Y+32, r20	; 0x20
    334c:	8f 81       	ldd	r24, Y+7	; 0x07
    334e:	8c a3       	std	Y+36, r24	; 0x24
    3350:	2d a3       	std	Y+37, r18	; 0x25
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	ab 85       	ldd	r26, Y+11	; 0x0b
    3358:	bc 85       	ldd	r27, Y+12	; 0x0c
    335a:	8e a3       	std	Y+38, r24	; 0x26
    335c:	9f a3       	std	Y+39, r25	; 0x27
    335e:	a8 a7       	std	Y+40, r26	; 0x28
    3360:	b9 a7       	std	Y+41, r27	; 0x29
    3362:	8d 85       	ldd	r24, Y+13	; 0x0d
    3364:	9e 85       	ldd	r25, Y+14	; 0x0e
    3366:	af 85       	ldd	r26, Y+15	; 0x0f
    3368:	b8 89       	ldd	r27, Y+16	; 0x10
    336a:	8a a7       	std	Y+42, r24	; 0x2a
    336c:	9b a7       	std	Y+43, r25	; 0x2b
    336e:	ac a7       	std	Y+44, r26	; 0x2c
    3370:	bd a7       	std	Y+45, r27	; 0x2d
    3372:	89 89       	ldd	r24, Y+17	; 0x11
    3374:	9a 89       	ldd	r25, Y+18	; 0x12
    3376:	ab 89       	ldd	r26, Y+19	; 0x13
    3378:	bc 89       	ldd	r27, Y+20	; 0x14
    337a:	8e a7       	std	Y+46, r24	; 0x2e
    337c:	9f a7       	std	Y+47, r25	; 0x2f
    337e:	a8 ab       	std	Y+48, r26	; 0x30
    3380:	b9 ab       	std	Y+49, r27	; 0x31
    3382:	8d 89       	ldd	r24, Y+21	; 0x15
    3384:	8a ab       	std	Y+50, r24	; 0x32
    3386:	8e 89       	ldd	r24, Y+22	; 0x16
    3388:	9f 89       	ldd	r25, Y+23	; 0x17
    338a:	a8 8d       	ldd	r26, Y+24	; 0x18
    338c:	b9 8d       	ldd	r27, Y+25	; 0x19
    338e:	8b ab       	std	Y+51, r24	; 0x33
    3390:	9c ab       	std	Y+52, r25	; 0x34
    3392:	ad ab       	std	Y+53, r26	; 0x35
    3394:	be ab       	std	Y+54, r27	; 0x36
    3396:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3398:	9b 8d       	ldd	r25, Y+27	; 0x1b
    339a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    339c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    339e:	8f ab       	std	Y+55, r24	; 0x37
    33a0:	98 af       	std	Y+56, r25	; 0x38
    33a2:	a9 af       	std	Y+57, r26	; 0x39
    33a4:	ba af       	std	Y+58, r27	; 0x3a
    33a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33aa:	9c af       	std	Y+60, r25	; 0x3c
    33ac:	8b af       	std	Y+59, r24	; 0x3b
    33ae:	8c 2d       	mov	r24, r12
    // it was the directory itself!
    return File(parentdir, "/");
    33b0:	99 2d       	mov	r25, r9
    33b2:	be 01       	movw	r22, r28
    33b4:	60 5e       	subi	r22, 0xE0	; 224
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	46 e2       	ldi	r20, 0x26	; 38
    33ba:	52 e0       	ldi	r21, 0x02	; 2
    33bc:	9e c0       	rjmp	.+316    	; 0x34fa <_ZN7SDClass4openEPKch+0x218>
    33be:	fe 01       	movw	r30, r28
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    33c0:	ff 96       	adiw	r30, 0x3f	; 63
    33c2:	11 82       	std	Z+1, r1	; 0x01
    33c4:	10 82       	st	Z, r1
    33c6:	5e af       	std	Y+62, r21	; 0x3e
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    33c8:	4d af       	std	Y+61, r20	; 0x3d
    33ca:	fe 01       	movw	r30, r28
    33cc:	ee 5b       	subi	r30, 0xBE	; 190
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	10 82       	st	Z, r1
    33d2:	22 23       	and	r18, r18

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    33d4:	a9 f0       	breq	.+42     	; 0x3400 <_ZN7SDClass4openEPKch+0x11e>
    33d6:	22 50       	subi	r18, 0x02	; 2
    return File();

  // there is a special case for the Root directory since its a static dir
  if (parentdir.isRoot()) {
    33d8:	ce 01       	movw	r24, r28
    33da:	cd 96       	adiw	r24, 0x3d	; 61
    33dc:	22 30       	cpi	r18, 0x02	; 2
    33de:	48 f4       	brcc	.+18     	; 0x33f2 <_ZN7SDClass4openEPKch+0x110>
    33e0:	6c ea       	ldi	r22, 0xAC	; 172
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    33e2:	75 e0       	ldi	r23, 0x05	; 5
    33e4:	a7 01       	movw	r20, r14
    33e6:	2d 2d       	mov	r18, r13
    33e8:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN6SdFile4openEPS_PKch>
    33ec:	88 23       	and	r24, r24
    if ( ! file.open(SD.root, filepath, mode)) {
    33ee:	79 f4       	brne	.+30     	; 0x340e <_ZN7SDClass4openEPKch+0x12c>
    33f0:	07 c0       	rjmp	.+14     	; 0x3400 <_ZN7SDClass4openEPKch+0x11e>
    33f2:	b5 01       	movw	r22, r10
    33f4:	a7 01       	movw	r20, r14
    33f6:	2d 2d       	mov	r18, r13
    33f8:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN6SdFile4openEPS_PKch>
    33fc:	88 23       	and	r24, r24
      // failed to open the file :(
      return File();
    }
    // dont close the root!
  } else {
    if ( ! file.open(parentdir, filepath, mode)) {
    33fe:	21 f4       	brne	.+8      	; 0x3408 <_ZN7SDClass4openEPKch+0x126>
    3400:	8c 2d       	mov	r24, r12
      return File();
    3402:	99 2d       	mov	r25, r9
    3404:	f5 db       	rcall	.-2070   	; 0x2bf0 <_ZN4FileC1Ev>
    3406:	7a c0       	rjmp	.+244    	; 0x34fc <_ZN7SDClass4openEPKch+0x21a>
    3408:	c5 01       	movw	r24, r10
    340a:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
    }
    // close the parent
    parentdir.close();
    340e:	f6 e0       	ldi	r31, 0x06	; 6
    3410:	df 22       	and	r13, r31
  }

  if (mode & (O_APPEND | O_WRITE)) 
    3412:	59 f0       	breq	.+22     	; 0x342a <_ZN7SDClass4openEPKch+0x148>
    3414:	fe 01       	movw	r30, r28
    3416:	e0 5b       	subi	r30, 0xB0	; 176
    file.seekSet(file.fileSize());
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	40 81       	ld	r20, Z
    341c:	51 81       	ldd	r21, Z+1	; 0x01
    341e:	62 81       	ldd	r22, Z+2	; 0x02
    3420:	73 81       	ldd	r23, Z+3	; 0x03
    3422:	ce 01       	movw	r24, r28
    3424:	cd 96       	adiw	r24, 0x3d	; 61
    3426:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN6SdFile7seekSetEm>
    342a:	9e 01       	movw	r18, r28
    342c:	26 5a       	subi	r18, 0xA6	; 166
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
    342e:	3f 4f       	sbci	r19, 0xFF	; 255
    3430:	fe 01       	movw	r30, r28
    3432:	ff 96       	adiw	r30, 0x3f	; 63
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	f9 01       	movw	r30, r18
    343a:	93 83       	std	Z+3, r25	; 0x03
    343c:	82 83       	std	Z+2, r24	; 0x02
    343e:	86 e3       	ldi	r24, 0x36	; 54
    3440:	92 e0       	ldi	r25, 0x02	; 2
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	80 83       	st	Z, r24
    3446:	fe 01       	movw	r30, r28
    3448:	ef 5b       	subi	r30, 0xBF	; 191
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	80 81       	ld	r24, Z
    344e:	f9 01       	movw	r30, r18
    3450:	84 83       	std	Z+4, r24	; 0x04
    3452:	fe 01       	movw	r30, r28
    3454:	ee 5b       	subi	r30, 0xBE	; 190
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	80 81       	ld	r24, Z
    345a:	f9 01       	movw	r30, r18
    345c:	85 83       	std	Z+5, r24	; 0x05
    345e:	fe 01       	movw	r30, r28
    3460:	ed 5b       	subi	r30, 0xBD	; 189
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	a2 81       	ldd	r26, Z+2	; 0x02
    346a:	b3 81       	ldd	r27, Z+3	; 0x03
    346c:	f9 01       	movw	r30, r18
    346e:	86 83       	std	Z+6, r24	; 0x06
    3470:	97 83       	std	Z+7, r25	; 0x07
    3472:	a0 87       	std	Z+8, r26	; 0x08
    3474:	b1 87       	std	Z+9, r27	; 0x09
    3476:	fe 01       	movw	r30, r28
    3478:	e9 5b       	subi	r30, 0xB9	; 185
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 81       	ld	r24, Z
    347e:	91 81       	ldd	r25, Z+1	; 0x01
    3480:	a2 81       	ldd	r26, Z+2	; 0x02
    3482:	b3 81       	ldd	r27, Z+3	; 0x03
    3484:	f9 01       	movw	r30, r18
    3486:	82 87       	std	Z+10, r24	; 0x0a
    3488:	93 87       	std	Z+11, r25	; 0x0b
    348a:	a4 87       	std	Z+12, r26	; 0x0c
    348c:	b5 87       	std	Z+13, r27	; 0x0d
    348e:	fe 01       	movw	r30, r28
    3490:	e5 5b       	subi	r30, 0xB5	; 181
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 81       	ld	r24, Z
    3496:	91 81       	ldd	r25, Z+1	; 0x01
    3498:	a2 81       	ldd	r26, Z+2	; 0x02
    349a:	b3 81       	ldd	r27, Z+3	; 0x03
    349c:	f9 01       	movw	r30, r18
    349e:	86 87       	std	Z+14, r24	; 0x0e
    34a0:	97 87       	std	Z+15, r25	; 0x0f
    34a2:	a0 8b       	std	Z+16, r26	; 0x10
    34a4:	b1 8b       	std	Z+17, r27	; 0x11
    34a6:	fe 01       	movw	r30, r28
    34a8:	e1 5b       	subi	r30, 0xB1	; 177
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	f9 01       	movw	r30, r18
    34b0:	82 8b       	std	Z+18, r24	; 0x12
    34b2:	fe 01       	movw	r30, r28
    34b4:	e0 5b       	subi	r30, 0xB0	; 176
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 81       	ld	r24, Z
    34ba:	91 81       	ldd	r25, Z+1	; 0x01
    34bc:	a2 81       	ldd	r26, Z+2	; 0x02
    34be:	b3 81       	ldd	r27, Z+3	; 0x03
    34c0:	f9 01       	movw	r30, r18
    34c2:	83 8b       	std	Z+19, r24	; 0x13
    34c4:	94 8b       	std	Z+20, r25	; 0x14
    34c6:	a5 8b       	std	Z+21, r26	; 0x15
    34c8:	b6 8b       	std	Z+22, r27	; 0x16
    34ca:	fe 01       	movw	r30, r28
    34cc:	ec 5a       	subi	r30, 0xAC	; 172
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 81       	ld	r24, Z
    34d2:	91 81       	ldd	r25, Z+1	; 0x01
    34d4:	a2 81       	ldd	r26, Z+2	; 0x02
    34d6:	b3 81       	ldd	r27, Z+3	; 0x03
    34d8:	f9 01       	movw	r30, r18
    34da:	87 8b       	std	Z+23, r24	; 0x17
    34dc:	90 8f       	std	Z+24, r25	; 0x18
    34de:	a1 8f       	std	Z+25, r26	; 0x19
    34e0:	b2 8f       	std	Z+26, r27	; 0x1a
    34e2:	fe 01       	movw	r30, r28
    34e4:	e8 5a       	subi	r30, 0xA8	; 168
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	f9 01       	movw	r30, r18
    34ee:	94 8f       	std	Z+28, r25	; 0x1c
    34f0:	83 8f       	std	Z+27, r24	; 0x1b
    34f2:	8c 2d       	mov	r24, r12
    34f4:	99 2d       	mov	r25, r9
  return File(file, filepath);
    34f6:	b9 01       	movw	r22, r18
    34f8:	a7 01       	movw	r20, r14
    34fa:	6c dc       	rcall	.-1832   	; 0x2dd4 <_ZN4FileC1E6SdFilePKc>
    34fc:	8c 2d       	mov	r24, r12
    34fe:	99 2d       	mov	r25, r9
    3500:	ca 58       	subi	r28, 0x8A	; 138
}
    3502:	df 4f       	sbci	r29, 0xFF	; 255
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	1f 91       	pop	r17
    3514:	0f 91       	pop	r16
    3516:	ff 90       	pop	r15
    3518:	ef 90       	pop	r14
    351a:	df 90       	pop	r13
    351c:	cf 90       	pop	r12
    351e:	bf 90       	pop	r11
    3520:	af 90       	pop	r10
    3522:	9f 90       	pop	r9
    3524:	08 95       	ret

00003526 <_ZN7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	ec 01       	movw	r28, r24
    3534:	16 2f       	mov	r17, r22
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  root.close();
    3536:	5a e2       	ldi	r21, 0x2A	; 42
    3538:	e5 2e       	mov	r14, r21
    353a:	f1 2c       	mov	r15, r1
    353c:	e8 0e       	add	r14, r24
    353e:	f9 1e       	adc	r15, r25
    3540:	c7 01       	movw	r24, r14
    3542:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile5closeEv>
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
         root.openRoot(volume);
    3546:	ce 01       	movw	r24, r28
    3548:	61 e0       	ldi	r22, 0x01	; 1
    354a:	41 2f       	mov	r20, r17
    354c:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN7Sd2Card4initEhh>
    3550:	88 23       	and	r24, r24
    3552:	c9 f0       	breq	.+50     	; 0x3586 <_ZN7SDClass5beginEh+0x60>
    3554:	8e 01       	movw	r16, r28
    3556:	04 5f       	subi	r16, 0xF4	; 244
    3558:	1f 4f       	sbci	r17, 0xFF	; 255
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    355a:	c8 01       	movw	r24, r16
    355c:	be 01       	movw	r22, r28
    355e:	41 e0       	ldi	r20, 0x01	; 1
    3560:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN8SdVolume4initEP7Sd2Cardh>
    3564:	88 23       	and	r24, r24
    3566:	39 f4       	brne	.+14     	; 0x3576 <_ZN7SDClass5beginEh+0x50>
    3568:	c8 01       	movw	r24, r16
    356a:	be 01       	movw	r22, r28
    356c:	40 e0       	ldi	r20, 0x00	; 0
    356e:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN8SdVolume4initEP7Sd2Cardh>
    3572:	88 23       	and	r24, r24
    3574:	41 f0       	breq	.+16     	; 0x3586 <_ZN7SDClass5beginEh+0x60>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    3576:	c7 01       	movw	r24, r14
    3578:	b8 01       	movw	r22, r16
    357a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN6SdFile8openRootEP8SdVolume>
    357e:	88 23       	and	r24, r24
    3580:	19 f0       	breq	.+6      	; 0x3588 <_ZN7SDClass5beginEh+0x62>
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	01 c0       	rjmp	.+2      	; 0x3588 <_ZN7SDClass5beginEh+0x62>
    3586:	80 e0       	ldi	r24, 0x00	; 0
}
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ff 90       	pop	r15
    3592:	ef 90       	pop	r14
    3594:	08 95       	ret

00003596 <_Z15callback_removeR6SdFilePchPv>:



boolean callback_remove(SdFile& parentDir, char *filePathComponent, 
			boolean isLastComponent, void *object) {
  if (isLastComponent) {
    3596:	44 23       	and	r20, r20
    3598:	11 f4       	brne	.+4      	; 0x359e <_Z15callback_removeR6SdFilePchPv+0x8>
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	08 95       	ret
  int8_t readDir(dir_t& dir) {return readDir(&dir);}  // NOLINT
  /** \deprecated Use:
   * static uint8_t SdFile::remove(SdFile* dirFile, const char* fileName);
   */
  static uint8_t remove(SdFile& dirFile, const char* fileName) {  // NOLINT
    return remove(&dirFile, fileName);
    359e:	0c 94 02 11 	jmp	0x2204	; 0x2204 <_ZN6SdFile6removeEPS_PKc>

000035a2 <_ZN8SPIClass3endEv>:
  pinMode(MOSI, OUTPUT);
}


void SPIClass::end() {
  SPCR &= ~_BV(SPE);
    35a2:	8c b5       	in	r24, 0x2c	; 44
    35a4:	8f 7b       	andi	r24, 0xBF	; 191
    35a6:	8c bd       	out	0x2c, r24	; 44
}
    35a8:	08 95       	ret

000035aa <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    35aa:	88 23       	and	r24, r24
    35ac:	19 f4       	brne	.+6      	; 0x35b4 <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
    35ae:	8c b5       	in	r24, 0x2c	; 44
    35b0:	80 62       	ori	r24, 0x20	; 32
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
    35b4:	8c b5       	in	r24, 0x2c	; 44
    35b6:	8f 7d       	andi	r24, 0xDF	; 223
    35b8:	8c bd       	out	0x2c, r24	; 44
    35ba:	08 95       	ret

000035bc <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    35bc:	9c b5       	in	r25, 0x2c	; 44
    35be:	93 7f       	andi	r25, 0xF3	; 243
    35c0:	98 2b       	or	r25, r24
    35c2:	9c bd       	out	0x2c, r25	; 44
}
    35c4:	08 95       	ret

000035c6 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
    35c6:	8a e0       	ldi	r24, 0x0A	; 10
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	09 d5       	rcall	.+2578   	; 0x3fde <digitalWrite>
    35cc:	8a e0       	ldi	r24, 0x0A	; 10

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	c7 d4       	rcall	.+2446   	; 0x3f60 <pinMode>
    35d2:	8c b5       	in	r24, 0x2c	; 44
    35d4:	80 61       	ori	r24, 0x10	; 16

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    35d6:	8c bd       	out	0x2c, r24	; 44
    35d8:	8c b5       	in	r24, 0x2c	; 44
    35da:	80 64       	ori	r24, 0x40	; 64
  SPCR |= _BV(SPE);
    35dc:	8c bd       	out	0x2c, r24	; 44
    35de:	8d e0       	ldi	r24, 0x0D	; 13
    35e0:	61 e0       	ldi	r22, 0x01	; 1
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
    35e2:	be d4       	rcall	.+2428   	; 0x3f60 <pinMode>
    35e4:	8b e0       	ldi	r24, 0x0B	; 11
    35e6:	61 e0       	ldi	r22, 0x01	; 1
    35e8:	bb c4       	rjmp	.+2422   	; 0x3f60 <pinMode>

000035ea <malloc>:
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	cf 93       	push	r28
    35f0:	df 93       	push	r29
    35f2:	bc 01       	movw	r22, r24
    35f4:	82 30       	cpi	r24, 0x02	; 2
    35f6:	91 05       	cpc	r25, r1
    35f8:	10 f4       	brcc	.+4      	; 0x35fe <malloc+0x14>
    35fa:	62 e0       	ldi	r22, 0x02	; 2
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	e0 91 80 06 	lds	r30, 0x0680
    3602:	f0 91 81 06 	lds	r31, 0x0681
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	a0 e0       	ldi	r26, 0x00	; 0
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	24 c0       	rjmp	.+72     	; 0x3658 <malloc+0x6e>
    3610:	80 81       	ld	r24, Z
    3612:	91 81       	ldd	r25, Z+1	; 0x01
    3614:	86 17       	cp	r24, r22
    3616:	97 07       	cpc	r25, r23
    3618:	d0 f0       	brcs	.+52     	; 0x364e <malloc+0x64>
    361a:	86 17       	cp	r24, r22
    361c:	97 07       	cpc	r25, r23
    361e:	71 f4       	brne	.+28     	; 0x363c <malloc+0x52>
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	10 97       	sbiw	r26, 0x00	; 0
    3626:	29 f0       	breq	.+10     	; 0x3632 <malloc+0x48>
    3628:	13 96       	adiw	r26, 0x03	; 3
    362a:	9c 93       	st	X, r25
    362c:	8e 93       	st	-X, r24
    362e:	12 97       	sbiw	r26, 0x02	; 2
    3630:	2c c0       	rjmp	.+88     	; 0x368a <malloc+0xa0>
    3632:	90 93 81 06 	sts	0x0681, r25
    3636:	80 93 80 06 	sts	0x0680, r24
    363a:	27 c0       	rjmp	.+78     	; 0x368a <malloc+0xa0>
    363c:	41 15       	cp	r20, r1
    363e:	51 05       	cpc	r21, r1
    3640:	19 f0       	breq	.+6      	; 0x3648 <malloc+0x5e>
    3642:	84 17       	cp	r24, r20
    3644:	95 07       	cpc	r25, r21
    3646:	18 f4       	brcc	.+6      	; 0x364e <malloc+0x64>
    3648:	8d 01       	movw	r16, r26
    364a:	ac 01       	movw	r20, r24
    364c:	ef 01       	movw	r28, r30
    364e:	df 01       	movw	r26, r30
    3650:	82 81       	ldd	r24, Z+2	; 0x02
    3652:	93 81       	ldd	r25, Z+3	; 0x03
    3654:	9c 01       	movw	r18, r24
    3656:	f9 01       	movw	r30, r18
    3658:	30 97       	sbiw	r30, 0x00	; 0
    365a:	d1 f6       	brne	.-76     	; 0x3610 <malloc+0x26>
    365c:	41 15       	cp	r20, r1
    365e:	51 05       	cpc	r21, r1
    3660:	f9 f0       	breq	.+62     	; 0x36a0 <malloc+0xb6>
    3662:	ca 01       	movw	r24, r20
    3664:	86 1b       	sub	r24, r22
    3666:	97 0b       	sbc	r25, r23
    3668:	84 30       	cpi	r24, 0x04	; 4
    366a:	91 05       	cpc	r25, r1
    366c:	80 f4       	brcc	.+32     	; 0x368e <malloc+0xa4>
    366e:	8a 81       	ldd	r24, Y+2	; 0x02
    3670:	9b 81       	ldd	r25, Y+3	; 0x03
    3672:	01 15       	cp	r16, r1
    3674:	11 05       	cpc	r17, r1
    3676:	21 f0       	breq	.+8      	; 0x3680 <malloc+0x96>
    3678:	f8 01       	movw	r30, r16
    367a:	93 83       	std	Z+3, r25	; 0x03
    367c:	82 83       	std	Z+2, r24	; 0x02
    367e:	04 c0       	rjmp	.+8      	; 0x3688 <malloc+0x9e>
    3680:	90 93 81 06 	sts	0x0681, r25
    3684:	80 93 80 06 	sts	0x0680, r24
    3688:	fe 01       	movw	r30, r28
    368a:	32 96       	adiw	r30, 0x02	; 2
    368c:	45 c0       	rjmp	.+138    	; 0x3718 <malloc+0x12e>
    368e:	fe 01       	movw	r30, r28
    3690:	e8 0f       	add	r30, r24
    3692:	f9 1f       	adc	r31, r25
    3694:	61 93       	st	Z+, r22
    3696:	71 93       	st	Z+, r23
    3698:	02 97       	sbiw	r24, 0x02	; 2
    369a:	99 83       	std	Y+1, r25	; 0x01
    369c:	88 83       	st	Y, r24
    369e:	3c c0       	rjmp	.+120    	; 0x3718 <malloc+0x12e>
    36a0:	80 91 7e 06 	lds	r24, 0x067E
    36a4:	90 91 7f 06 	lds	r25, 0x067F
    36a8:	89 2b       	or	r24, r25
    36aa:	41 f4       	brne	.+16     	; 0x36bc <malloc+0xd2>
    36ac:	80 91 2e 02 	lds	r24, 0x022E
    36b0:	90 91 2f 02 	lds	r25, 0x022F
    36b4:	90 93 7f 06 	sts	0x067F, r25
    36b8:	80 93 7e 06 	sts	0x067E, r24
    36bc:	40 91 30 02 	lds	r20, 0x0230
    36c0:	50 91 31 02 	lds	r21, 0x0231
    36c4:	41 15       	cp	r20, r1
    36c6:	51 05       	cpc	r21, r1
    36c8:	41 f4       	brne	.+16     	; 0x36da <malloc+0xf0>
    36ca:	4d b7       	in	r20, 0x3d	; 61
    36cc:	5e b7       	in	r21, 0x3e	; 62
    36ce:	80 91 2c 02 	lds	r24, 0x022C
    36d2:	90 91 2d 02 	lds	r25, 0x022D
    36d6:	48 1b       	sub	r20, r24
    36d8:	59 0b       	sbc	r21, r25
    36da:	20 91 7e 06 	lds	r18, 0x067E
    36de:	30 91 7f 06 	lds	r19, 0x067F
    36e2:	24 17       	cp	r18, r20
    36e4:	35 07       	cpc	r19, r21
    36e6:	b0 f4       	brcc	.+44     	; 0x3714 <malloc+0x12a>
    36e8:	ca 01       	movw	r24, r20
    36ea:	82 1b       	sub	r24, r18
    36ec:	93 0b       	sbc	r25, r19
    36ee:	86 17       	cp	r24, r22
    36f0:	97 07       	cpc	r25, r23
    36f2:	80 f0       	brcs	.+32     	; 0x3714 <malloc+0x12a>
    36f4:	ab 01       	movw	r20, r22
    36f6:	4e 5f       	subi	r20, 0xFE	; 254
    36f8:	5f 4f       	sbci	r21, 0xFF	; 255
    36fa:	84 17       	cp	r24, r20
    36fc:	95 07       	cpc	r25, r21
    36fe:	50 f0       	brcs	.+20     	; 0x3714 <malloc+0x12a>
    3700:	42 0f       	add	r20, r18
    3702:	53 1f       	adc	r21, r19
    3704:	50 93 7f 06 	sts	0x067F, r21
    3708:	40 93 7e 06 	sts	0x067E, r20
    370c:	f9 01       	movw	r30, r18
    370e:	61 93       	st	Z+, r22
    3710:	71 93       	st	Z+, r23
    3712:	02 c0       	rjmp	.+4      	; 0x3718 <malloc+0x12e>
    3714:	e0 e0       	ldi	r30, 0x00	; 0
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	cf 01       	movw	r24, r30
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	1f 91       	pop	r17
    3720:	0f 91       	pop	r16
    3722:	08 95       	ret

00003724 <free>:
    3724:	cf 93       	push	r28
    3726:	df 93       	push	r29
    3728:	9c 01       	movw	r18, r24
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	09 f4       	brne	.+2      	; 0x3730 <free+0xc>
    372e:	8f c0       	rjmp	.+286    	; 0x384e <free+0x12a>
    3730:	ec 01       	movw	r28, r24
    3732:	22 97       	sbiw	r28, 0x02	; 2
    3734:	1b 82       	std	Y+3, r1	; 0x03
    3736:	1a 82       	std	Y+2, r1	; 0x02
    3738:	60 91 80 06 	lds	r22, 0x0680
    373c:	70 91 81 06 	lds	r23, 0x0681
    3740:	61 15       	cp	r22, r1
    3742:	71 05       	cpc	r23, r1
    3744:	81 f4       	brne	.+32     	; 0x3766 <free+0x42>
    3746:	88 81       	ld	r24, Y
    3748:	99 81       	ldd	r25, Y+1	; 0x01
    374a:	82 0f       	add	r24, r18
    374c:	93 1f       	adc	r25, r19
    374e:	20 91 7e 06 	lds	r18, 0x067E
    3752:	30 91 7f 06 	lds	r19, 0x067F
    3756:	28 17       	cp	r18, r24
    3758:	39 07       	cpc	r19, r25
    375a:	39 f5       	brne	.+78     	; 0x37aa <free+0x86>
    375c:	d0 93 7f 06 	sts	0x067F, r29
    3760:	c0 93 7e 06 	sts	0x067E, r28
    3764:	74 c0       	rjmp	.+232    	; 0x384e <free+0x12a>
    3766:	db 01       	movw	r26, r22
    3768:	40 e0       	ldi	r20, 0x00	; 0
    376a:	50 e0       	ldi	r21, 0x00	; 0
    376c:	ac 17       	cp	r26, r28
    376e:	bd 07       	cpc	r27, r29
    3770:	08 f1       	brcs	.+66     	; 0x37b4 <free+0x90>
    3772:	bb 83       	std	Y+3, r27	; 0x03
    3774:	aa 83       	std	Y+2, r26	; 0x02
    3776:	fe 01       	movw	r30, r28
    3778:	21 91       	ld	r18, Z+
    377a:	31 91       	ld	r19, Z+
    377c:	e2 0f       	add	r30, r18
    377e:	f3 1f       	adc	r31, r19
    3780:	ae 17       	cp	r26, r30
    3782:	bf 07       	cpc	r27, r31
    3784:	79 f4       	brne	.+30     	; 0x37a4 <free+0x80>
    3786:	8d 91       	ld	r24, X+
    3788:	9c 91       	ld	r25, X
    378a:	11 97       	sbiw	r26, 0x01	; 1
    378c:	28 0f       	add	r18, r24
    378e:	39 1f       	adc	r19, r25
    3790:	2e 5f       	subi	r18, 0xFE	; 254
    3792:	3f 4f       	sbci	r19, 0xFF	; 255
    3794:	39 83       	std	Y+1, r19	; 0x01
    3796:	28 83       	st	Y, r18
    3798:	12 96       	adiw	r26, 0x02	; 2
    379a:	8d 91       	ld	r24, X+
    379c:	9c 91       	ld	r25, X
    379e:	13 97       	sbiw	r26, 0x03	; 3
    37a0:	9b 83       	std	Y+3, r25	; 0x03
    37a2:	8a 83       	std	Y+2, r24	; 0x02
    37a4:	41 15       	cp	r20, r1
    37a6:	51 05       	cpc	r21, r1
    37a8:	71 f4       	brne	.+28     	; 0x37c6 <free+0xa2>
    37aa:	d0 93 81 06 	sts	0x0681, r29
    37ae:	c0 93 80 06 	sts	0x0680, r28
    37b2:	4d c0       	rjmp	.+154    	; 0x384e <free+0x12a>
    37b4:	12 96       	adiw	r26, 0x02	; 2
    37b6:	8d 91       	ld	r24, X+
    37b8:	9c 91       	ld	r25, X
    37ba:	13 97       	sbiw	r26, 0x03	; 3
    37bc:	ad 01       	movw	r20, r26
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	11 f0       	breq	.+4      	; 0x37c6 <free+0xa2>
    37c2:	dc 01       	movw	r26, r24
    37c4:	d3 cf       	rjmp	.-90     	; 0x376c <free+0x48>
    37c6:	da 01       	movw	r26, r20
    37c8:	13 96       	adiw	r26, 0x03	; 3
    37ca:	dc 93       	st	X, r29
    37cc:	ce 93       	st	-X, r28
    37ce:	12 97       	sbiw	r26, 0x02	; 2
    37d0:	fa 01       	movw	r30, r20
    37d2:	21 91       	ld	r18, Z+
    37d4:	31 91       	ld	r19, Z+
    37d6:	e2 0f       	add	r30, r18
    37d8:	f3 1f       	adc	r31, r19
    37da:	ce 17       	cp	r28, r30
    37dc:	df 07       	cpc	r29, r31
    37de:	69 f4       	brne	.+26     	; 0x37fa <free+0xd6>
    37e0:	88 81       	ld	r24, Y
    37e2:	99 81       	ldd	r25, Y+1	; 0x01
    37e4:	28 0f       	add	r18, r24
    37e6:	39 1f       	adc	r19, r25
    37e8:	2e 5f       	subi	r18, 0xFE	; 254
    37ea:	3f 4f       	sbci	r19, 0xFF	; 255
    37ec:	fa 01       	movw	r30, r20
    37ee:	31 83       	std	Z+1, r19	; 0x01
    37f0:	20 83       	st	Z, r18
    37f2:	8a 81       	ldd	r24, Y+2	; 0x02
    37f4:	9b 81       	ldd	r25, Y+3	; 0x03
    37f6:	93 83       	std	Z+3, r25	; 0x03
    37f8:	82 83       	std	Z+2, r24	; 0x02
    37fa:	e0 e0       	ldi	r30, 0x00	; 0
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	db 01       	movw	r26, r22
    3800:	12 96       	adiw	r26, 0x02	; 2
    3802:	8d 91       	ld	r24, X+
    3804:	9c 91       	ld	r25, X
    3806:	13 97       	sbiw	r26, 0x03	; 3
    3808:	00 97       	sbiw	r24, 0x00	; 0
    380a:	19 f0       	breq	.+6      	; 0x3812 <free+0xee>
    380c:	bc 01       	movw	r22, r24
    380e:	fd 01       	movw	r30, r26
    3810:	f6 cf       	rjmp	.-20     	; 0x37fe <free+0xda>
    3812:	ab 01       	movw	r20, r22
    3814:	4e 5f       	subi	r20, 0xFE	; 254
    3816:	5f 4f       	sbci	r21, 0xFF	; 255
    3818:	db 01       	movw	r26, r22
    381a:	8d 91       	ld	r24, X+
    381c:	9c 91       	ld	r25, X
    381e:	84 0f       	add	r24, r20
    3820:	95 1f       	adc	r25, r21
    3822:	20 91 7e 06 	lds	r18, 0x067E
    3826:	30 91 7f 06 	lds	r19, 0x067F
    382a:	28 17       	cp	r18, r24
    382c:	39 07       	cpc	r19, r25
    382e:	79 f4       	brne	.+30     	; 0x384e <free+0x12a>
    3830:	30 97       	sbiw	r30, 0x00	; 0
    3832:	29 f4       	brne	.+10     	; 0x383e <free+0x11a>
    3834:	10 92 81 06 	sts	0x0681, r1
    3838:	10 92 80 06 	sts	0x0680, r1
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <free+0x11e>
    383e:	13 82       	std	Z+3, r1	; 0x03
    3840:	12 82       	std	Z+2, r1	; 0x02
    3842:	42 50       	subi	r20, 0x02	; 2
    3844:	50 40       	sbci	r21, 0x00	; 0
    3846:	50 93 7f 06 	sts	0x067F, r21
    384a:	40 93 7e 06 	sts	0x067E, r20
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	08 95       	ret

00003854 <_Z11serialEventv>:
    3854:	08 95       	ret

00003856 <__vector_18>:
    3856:	1f 92       	push	r1
    3858:	0f 92       	push	r0
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	0f 92       	push	r0
    385e:	11 24       	eor	r1, r1
    3860:	2f 93       	push	r18
    3862:	3f 93       	push	r19
    3864:	4f 93       	push	r20
    3866:	8f 93       	push	r24
    3868:	9f 93       	push	r25
    386a:	ef 93       	push	r30
    386c:	ff 93       	push	r31
    386e:	80 91 c0 00 	lds	r24, 0x00C0
    3872:	82 fd       	sbrc	r24, 2
    3874:	1d c0       	rjmp	.+58     	; 0x38b0 <__vector_18+0x5a>
    3876:	40 91 c6 00 	lds	r20, 0x00C6
    387a:	20 91 0b 06 	lds	r18, 0x060B
    387e:	30 91 0c 06 	lds	r19, 0x060C
    3882:	2f 5f       	subi	r18, 0xFF	; 255
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
    3886:	2f 73       	andi	r18, 0x3F	; 63
    3888:	30 70       	andi	r19, 0x00	; 0
    388a:	80 91 0d 06 	lds	r24, 0x060D
    388e:	90 91 0e 06 	lds	r25, 0x060E
    3892:	28 17       	cp	r18, r24
    3894:	39 07       	cpc	r19, r25
    3896:	71 f0       	breq	.+28     	; 0x38b4 <__vector_18+0x5e>
    3898:	e0 91 0b 06 	lds	r30, 0x060B
    389c:	f0 91 0c 06 	lds	r31, 0x060C
    38a0:	e5 53       	subi	r30, 0x35	; 53
    38a2:	fa 4f       	sbci	r31, 0xFA	; 250
    38a4:	40 83       	st	Z, r20
    38a6:	30 93 0c 06 	sts	0x060C, r19
    38aa:	20 93 0b 06 	sts	0x060B, r18
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <__vector_18+0x5e>
    38b0:	80 91 c6 00 	lds	r24, 0x00C6
    38b4:	ff 91       	pop	r31
    38b6:	ef 91       	pop	r30
    38b8:	9f 91       	pop	r25
    38ba:	8f 91       	pop	r24
    38bc:	4f 91       	pop	r20
    38be:	3f 91       	pop	r19
    38c0:	2f 91       	pop	r18
    38c2:	0f 90       	pop	r0
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	0f 90       	pop	r0
    38c8:	1f 90       	pop	r1
    38ca:	18 95       	reti

000038cc <_Z14serialEventRunv>:
    38cc:	e0 91 5f 06 	lds	r30, 0x065F
    38d0:	f0 91 60 06 	lds	r31, 0x0660
    38d4:	e0 5c       	subi	r30, 0xC0	; 192
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	81 91       	ld	r24, Z+
    38da:	91 91       	ld	r25, Z+
    38dc:	20 81       	ld	r18, Z
    38de:	31 81       	ldd	r19, Z+1	; 0x01
    38e0:	82 1b       	sub	r24, r18
    38e2:	93 0b       	sbc	r25, r19
    38e4:	8f 73       	andi	r24, 0x3F	; 63
    38e6:	90 70       	andi	r25, 0x00	; 0
    38e8:	89 2b       	or	r24, r25
    38ea:	09 f0       	breq	.+2      	; 0x38ee <_Z14serialEventRunv+0x22>
    38ec:	b3 cf       	rjmp	.-154    	; 0x3854 <_Z11serialEventv>
    38ee:	08 95       	ret

000038f0 <__vector_19>:
    38f0:	1f 92       	push	r1
    38f2:	0f 92       	push	r0
    38f4:	0f b6       	in	r0, 0x3f	; 63
    38f6:	0f 92       	push	r0
    38f8:	11 24       	eor	r1, r1
    38fa:	2f 93       	push	r18
    38fc:	3f 93       	push	r19
    38fe:	8f 93       	push	r24
    3900:	9f 93       	push	r25
    3902:	ef 93       	push	r30
    3904:	ff 93       	push	r31
    3906:	20 91 4f 06 	lds	r18, 0x064F
    390a:	30 91 50 06 	lds	r19, 0x0650
    390e:	80 91 51 06 	lds	r24, 0x0651
    3912:	90 91 52 06 	lds	r25, 0x0652
    3916:	28 17       	cp	r18, r24
    3918:	39 07       	cpc	r19, r25
    391a:	31 f4       	brne	.+12     	; 0x3928 <__vector_19+0x38>
    391c:	80 91 c1 00 	lds	r24, 0x00C1
    3920:	8f 7d       	andi	r24, 0xDF	; 223
    3922:	80 93 c1 00 	sts	0x00C1, r24
    3926:	14 c0       	rjmp	.+40     	; 0x3950 <__vector_19+0x60>
    3928:	e0 91 51 06 	lds	r30, 0x0651
    392c:	f0 91 52 06 	lds	r31, 0x0652
    3930:	e1 5f       	subi	r30, 0xF1	; 241
    3932:	f9 4f       	sbci	r31, 0xF9	; 249
    3934:	20 81       	ld	r18, Z
    3936:	80 91 51 06 	lds	r24, 0x0651
    393a:	90 91 52 06 	lds	r25, 0x0652
    393e:	01 96       	adiw	r24, 0x01	; 1
    3940:	8f 73       	andi	r24, 0x3F	; 63
    3942:	90 70       	andi	r25, 0x00	; 0
    3944:	90 93 52 06 	sts	0x0652, r25
    3948:	80 93 51 06 	sts	0x0651, r24
    394c:	20 93 c6 00 	sts	0x00C6, r18
    3950:	ff 91       	pop	r31
    3952:	ef 91       	pop	r30
    3954:	9f 91       	pop	r25
    3956:	8f 91       	pop	r24
    3958:	3f 91       	pop	r19
    395a:	2f 91       	pop	r18
    395c:	0f 90       	pop	r0
    395e:	0f be       	out	0x3f, r0	; 63
    3960:	0f 90       	pop	r0
    3962:	1f 90       	pop	r1
    3964:	18 95       	reti

00003966 <_ZN14HardwareSerial5beginEmh>:
    3966:	af 92       	push	r10
    3968:	bf 92       	push	r11
    396a:	cf 92       	push	r12
    396c:	df 92       	push	r13
    396e:	ef 92       	push	r14
    3970:	ff 92       	push	r15
    3972:	0f 93       	push	r16
    3974:	1f 93       	push	r17
    3976:	cf 93       	push	r28
    3978:	df 93       	push	r29
    397a:	ec 01       	movw	r28, r24
    397c:	7a 01       	movw	r14, r20
    397e:	8b 01       	movw	r16, r22
    3980:	c2 2e       	mov	r12, r18
    3982:	dd 24       	eor	r13, r13
    3984:	40 30       	cpi	r20, 0x00	; 0
    3986:	81 ee       	ldi	r24, 0xE1	; 225
    3988:	58 07       	cpc	r21, r24
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	68 07       	cpc	r22, r24
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	78 07       	cpc	r23, r24
    3992:	11 f0       	breq	.+4      	; 0x3998 <_ZN14HardwareSerial5beginEmh+0x32>
    3994:	dd 24       	eor	r13, r13
    3996:	d3 94       	inc	r13
    3998:	71 e0       	ldi	r23, 0x01	; 1
    399a:	a7 2e       	mov	r10, r23
    399c:	b1 2c       	mov	r11, r1
    399e:	ec 89       	ldd	r30, Y+20	; 0x14
    39a0:	fd 89       	ldd	r31, Y+21	; 0x15
    39a2:	dd 20       	and	r13, r13
    39a4:	69 f0       	breq	.+26     	; 0x39c0 <_ZN14HardwareSerial5beginEmh+0x5a>
    39a6:	c5 01       	movw	r24, r10
    39a8:	08 a0       	ldd	r0, Y+32	; 0x20
    39aa:	02 c0       	rjmp	.+4      	; 0x39b0 <_ZN14HardwareSerial5beginEmh+0x4a>
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	0a 94       	dec	r0
    39b2:	e2 f7       	brpl	.-8      	; 0x39ac <_ZN14HardwareSerial5beginEmh+0x46>
    39b4:	80 83       	st	Z, r24
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	79 e0       	ldi	r23, 0x09	; 9
    39ba:	8d e3       	ldi	r24, 0x3D	; 61
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	05 c0       	rjmp	.+10     	; 0x39ca <_ZN14HardwareSerial5beginEmh+0x64>
    39c0:	10 82       	st	Z, r1
    39c2:	60 e8       	ldi	r22, 0x80	; 128
    39c4:	74 e8       	ldi	r23, 0x84	; 132
    39c6:	8e e1       	ldi	r24, 0x1E	; 30
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	a8 01       	movw	r20, r16
    39cc:	97 01       	movw	r18, r14
    39ce:	cd d3       	rcall	.+1946   	; 0x416a <__udivmodsi4>
    39d0:	21 50       	subi	r18, 0x01	; 1
    39d2:	30 40       	sbci	r19, 0x00	; 0
    39d4:	40 40       	sbci	r20, 0x00	; 0
    39d6:	50 40       	sbci	r21, 0x00	; 0
    39d8:	56 95       	lsr	r21
    39da:	47 95       	ror	r20
    39dc:	37 95       	ror	r19
    39de:	27 95       	ror	r18
    39e0:	80 e1       	ldi	r24, 0x10	; 16
    39e2:	20 30       	cpi	r18, 0x00	; 0
    39e4:	38 07       	cpc	r19, r24
    39e6:	20 f0       	brcs	.+8      	; 0x39f0 <_ZN14HardwareSerial5beginEmh+0x8a>
    39e8:	dd 20       	and	r13, r13
    39ea:	11 f0       	breq	.+4      	; 0x39f0 <_ZN14HardwareSerial5beginEmh+0x8a>
    39ec:	dd 24       	eor	r13, r13
    39ee:	d7 cf       	rjmp	.-82     	; 0x399e <_ZN14HardwareSerial5beginEmh+0x38>
    39f0:	e8 89       	ldd	r30, Y+16	; 0x10
    39f2:	f9 89       	ldd	r31, Y+17	; 0x11
    39f4:	30 83       	st	Z, r19
    39f6:	ea 89       	ldd	r30, Y+18	; 0x12
    39f8:	fb 89       	ldd	r31, Y+19	; 0x13
    39fa:	20 83       	st	Z, r18
    39fc:	e8 8d       	ldd	r30, Y+24	; 0x18
    39fe:	f9 8d       	ldd	r31, Y+25	; 0x19
    3a00:	c0 82       	st	Z, r12
    3a02:	ee 89       	ldd	r30, Y+22	; 0x16
    3a04:	ff 89       	ldd	r31, Y+23	; 0x17
    3a06:	40 81       	ld	r20, Z
    3a08:	21 e0       	ldi	r18, 0x01	; 1
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	c9 01       	movw	r24, r18
    3a0e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <_ZN14HardwareSerial5beginEmh+0xb0>
    3a12:	88 0f       	add	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	0a 94       	dec	r0
    3a18:	e2 f7       	brpl	.-8      	; 0x3a12 <_ZN14HardwareSerial5beginEmh+0xac>
    3a1a:	48 2b       	or	r20, r24
    3a1c:	40 83       	st	Z, r20
    3a1e:	ee 89       	ldd	r30, Y+22	; 0x16
    3a20:	ff 89       	ldd	r31, Y+23	; 0x17
    3a22:	40 81       	ld	r20, Z
    3a24:	c9 01       	movw	r24, r18
    3a26:	0d 8c       	ldd	r0, Y+29	; 0x1d
    3a28:	02 c0       	rjmp	.+4      	; 0x3a2e <_ZN14HardwareSerial5beginEmh+0xc8>
    3a2a:	88 0f       	add	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	0a 94       	dec	r0
    3a30:	e2 f7       	brpl	.-8      	; 0x3a2a <_ZN14HardwareSerial5beginEmh+0xc4>
    3a32:	48 2b       	or	r20, r24
    3a34:	40 83       	st	Z, r20
    3a36:	ee 89       	ldd	r30, Y+22	; 0x16
    3a38:	ff 89       	ldd	r31, Y+23	; 0x17
    3a3a:	40 81       	ld	r20, Z
    3a3c:	c9 01       	movw	r24, r18
    3a3e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    3a40:	02 c0       	rjmp	.+4      	; 0x3a46 <_ZN14HardwareSerial5beginEmh+0xe0>
    3a42:	88 0f       	add	r24, r24
    3a44:	99 1f       	adc	r25, r25
    3a46:	0a 94       	dec	r0
    3a48:	e2 f7       	brpl	.-8      	; 0x3a42 <_ZN14HardwareSerial5beginEmh+0xdc>
    3a4a:	48 2b       	or	r20, r24
    3a4c:	40 83       	st	Z, r20
    3a4e:	ee 89       	ldd	r30, Y+22	; 0x16
    3a50:	ff 89       	ldd	r31, Y+23	; 0x17
    3a52:	80 81       	ld	r24, Z
    3a54:	0f 8c       	ldd	r0, Y+31	; 0x1f
    3a56:	02 c0       	rjmp	.+4      	; 0x3a5c <_ZN14HardwareSerial5beginEmh+0xf6>
    3a58:	22 0f       	add	r18, r18
    3a5a:	33 1f       	adc	r19, r19
    3a5c:	0a 94       	dec	r0
    3a5e:	e2 f7       	brpl	.-8      	; 0x3a58 <_ZN14HardwareSerial5beginEmh+0xf2>
    3a60:	20 95       	com	r18
    3a62:	28 23       	and	r18, r24
    3a64:	20 83       	st	Z, r18
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	ff 90       	pop	r15
    3a70:	ef 90       	pop	r14
    3a72:	df 90       	pop	r13
    3a74:	cf 90       	pop	r12
    3a76:	bf 90       	pop	r11
    3a78:	af 90       	pop	r10
    3a7a:	08 95       	ret

00003a7c <_ZN14HardwareSerial9availableEv>:
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	1c 96       	adiw	r26, 0x0c	; 12
    3a80:	ed 91       	ld	r30, X+
    3a82:	fc 91       	ld	r31, X
    3a84:	1d 97       	sbiw	r26, 0x0d	; 13
    3a86:	e0 5c       	subi	r30, 0xC0	; 192
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	21 91       	ld	r18, Z+
    3a8c:	31 91       	ld	r19, Z+
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	28 1b       	sub	r18, r24
    3a94:	39 0b       	sbc	r19, r25
    3a96:	2f 73       	andi	r18, 0x3F	; 63
    3a98:	30 70       	andi	r19, 0x00	; 0
    3a9a:	c9 01       	movw	r24, r18
    3a9c:	08 95       	ret

00003a9e <_ZN14HardwareSerial4peekEv>:
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	1c 96       	adiw	r26, 0x0c	; 12
    3aa2:	ed 91       	ld	r30, X+
    3aa4:	fc 91       	ld	r31, X
    3aa6:	1d 97       	sbiw	r26, 0x0d	; 13
    3aa8:	e0 5c       	subi	r30, 0xC0	; 192
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	20 81       	ld	r18, Z
    3aae:	31 81       	ldd	r19, Z+1	; 0x01
    3ab0:	e0 54       	subi	r30, 0x40	; 64
    3ab2:	f0 40       	sbci	r31, 0x00	; 0
    3ab4:	df 01       	movw	r26, r30
    3ab6:	ae 5b       	subi	r26, 0xBE	; 190
    3ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aba:	8d 91       	ld	r24, X+
    3abc:	9c 91       	ld	r25, X
    3abe:	11 97       	sbiw	r26, 0x01	; 1
    3ac0:	28 17       	cp	r18, r24
    3ac2:	39 07       	cpc	r19, r25
    3ac4:	19 f4       	brne	.+6      	; 0x3acc <_ZN14HardwareSerial4peekEv+0x2e>
    3ac6:	2f ef       	ldi	r18, 0xFF	; 255
    3ac8:	3f ef       	ldi	r19, 0xFF	; 255
    3aca:	07 c0       	rjmp	.+14     	; 0x3ada <_ZN14HardwareSerial4peekEv+0x3c>
    3acc:	8d 91       	ld	r24, X+
    3ace:	9c 91       	ld	r25, X
    3ad0:	e8 0f       	add	r30, r24
    3ad2:	f9 1f       	adc	r31, r25
    3ad4:	80 81       	ld	r24, Z
    3ad6:	28 2f       	mov	r18, r24
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	c9 01       	movw	r24, r18
    3adc:	08 95       	ret

00003ade <_ZN14HardwareSerial4readEv>:
    3ade:	dc 01       	movw	r26, r24
    3ae0:	1c 96       	adiw	r26, 0x0c	; 12
    3ae2:	ed 91       	ld	r30, X+
    3ae4:	fc 91       	ld	r31, X
    3ae6:	1d 97       	sbiw	r26, 0x0d	; 13
    3ae8:	e0 5c       	subi	r30, 0xC0	; 192
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	20 81       	ld	r18, Z
    3aee:	31 81       	ldd	r19, Z+1	; 0x01
    3af0:	e0 54       	subi	r30, 0x40	; 64
    3af2:	f0 40       	sbci	r31, 0x00	; 0
    3af4:	df 01       	movw	r26, r30
    3af6:	ae 5b       	subi	r26, 0xBE	; 190
    3af8:	bf 4f       	sbci	r27, 0xFF	; 255
    3afa:	8d 91       	ld	r24, X+
    3afc:	9c 91       	ld	r25, X
    3afe:	11 97       	sbiw	r26, 0x01	; 1
    3b00:	28 17       	cp	r18, r24
    3b02:	39 07       	cpc	r19, r25
    3b04:	19 f4       	brne	.+6      	; 0x3b0c <_ZN14HardwareSerial4readEv+0x2e>
    3b06:	2f ef       	ldi	r18, 0xFF	; 255
    3b08:	3f ef       	ldi	r19, 0xFF	; 255
    3b0a:	10 c0       	rjmp	.+32     	; 0x3b2c <_ZN14HardwareSerial4readEv+0x4e>
    3b0c:	8d 91       	ld	r24, X+
    3b0e:	9c 91       	ld	r25, X
    3b10:	11 97       	sbiw	r26, 0x01	; 1
    3b12:	e8 0f       	add	r30, r24
    3b14:	f9 1f       	adc	r31, r25
    3b16:	20 81       	ld	r18, Z
    3b18:	8d 91       	ld	r24, X+
    3b1a:	9c 91       	ld	r25, X
    3b1c:	11 97       	sbiw	r26, 0x01	; 1
    3b1e:	01 96       	adiw	r24, 0x01	; 1
    3b20:	8f 73       	andi	r24, 0x3F	; 63
    3b22:	90 70       	andi	r25, 0x00	; 0
    3b24:	11 96       	adiw	r26, 0x01	; 1
    3b26:	9c 93       	st	X, r25
    3b28:	8e 93       	st	-X, r24
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	c9 01       	movw	r24, r18
    3b2e:	08 95       	ret

00003b30 <_ZN14HardwareSerial5flushEv>:
    3b30:	dc 01       	movw	r26, r24
    3b32:	91 96       	adiw	r26, 0x21	; 33
    3b34:	8c 91       	ld	r24, X
    3b36:	91 97       	sbiw	r26, 0x21	; 33
    3b38:	88 23       	and	r24, r24
    3b3a:	39 f0       	breq	.+14     	; 0x3b4a <_ZN14HardwareSerial5flushEv+0x1a>
    3b3c:	54 96       	adiw	r26, 0x14	; 20
    3b3e:	ed 91       	ld	r30, X+
    3b40:	fc 91       	ld	r31, X
    3b42:	55 97       	sbiw	r26, 0x15	; 21
    3b44:	80 81       	ld	r24, Z
    3b46:	86 ff       	sbrs	r24, 6
    3b48:	f9 cf       	rjmp	.-14     	; 0x3b3c <_ZN14HardwareSerial5flushEv+0xc>
    3b4a:	91 96       	adiw	r26, 0x21	; 33
    3b4c:	1c 92       	st	X, r1
    3b4e:	08 95       	ret

00003b50 <_ZN14HardwareSerial5writeEh>:
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	ec 01       	movw	r28, r24
    3b56:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b58:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b5a:	e0 5c       	subi	r30, 0xC0	; 192
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	20 81       	ld	r18, Z
    3b60:	31 81       	ldd	r19, Z+1	; 0x01
    3b62:	e0 54       	subi	r30, 0x40	; 64
    3b64:	f0 40       	sbci	r31, 0x00	; 0
    3b66:	2f 5f       	subi	r18, 0xFF	; 255
    3b68:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6a:	2f 73       	andi	r18, 0x3F	; 63
    3b6c:	30 70       	andi	r19, 0x00	; 0
    3b6e:	df 01       	movw	r26, r30
    3b70:	ae 5b       	subi	r26, 0xBE	; 190
    3b72:	bf 4f       	sbci	r27, 0xFF	; 255
    3b74:	8d 91       	ld	r24, X+
    3b76:	9c 91       	ld	r25, X
    3b78:	11 97       	sbiw	r26, 0x01	; 1
    3b7a:	28 17       	cp	r18, r24
    3b7c:	39 07       	cpc	r19, r25
    3b7e:	d1 f3       	breq	.-12     	; 0x3b74 <_ZN14HardwareSerial5writeEh+0x24>
    3b80:	e0 5c       	subi	r30, 0xC0	; 192
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	80 81       	ld	r24, Z
    3b86:	91 81       	ldd	r25, Z+1	; 0x01
    3b88:	e0 54       	subi	r30, 0x40	; 64
    3b8a:	f0 40       	sbci	r31, 0x00	; 0
    3b8c:	e8 0f       	add	r30, r24
    3b8e:	f9 1f       	adc	r31, r25
    3b90:	60 83       	st	Z, r22
    3b92:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b94:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b96:	e0 5c       	subi	r30, 0xC0	; 192
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	31 83       	std	Z+1, r19	; 0x01
    3b9c:	20 83       	st	Z, r18
    3b9e:	ee 89       	ldd	r30, Y+22	; 0x16
    3ba0:	ff 89       	ldd	r31, Y+23	; 0x17
    3ba2:	20 81       	ld	r18, Z
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	0f 8c       	ldd	r0, Y+31	; 0x1f
    3baa:	02 c0       	rjmp	.+4      	; 0x3bb0 <_ZN14HardwareSerial5writeEh+0x60>
    3bac:	88 0f       	add	r24, r24
    3bae:	99 1f       	adc	r25, r25
    3bb0:	0a 94       	dec	r0
    3bb2:	e2 f7       	brpl	.-8      	; 0x3bac <_ZN14HardwareSerial5writeEh+0x5c>
    3bb4:	28 2b       	or	r18, r24
    3bb6:	20 83       	st	Z, r18
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	89 a3       	std	Y+33, r24	; 0x21
    3bbc:	ec 89       	ldd	r30, Y+20	; 0x14
    3bbe:	fd 89       	ldd	r31, Y+21	; 0x15
    3bc0:	80 81       	ld	r24, Z
    3bc2:	80 64       	ori	r24, 0x40	; 64
    3bc4:	80 83       	st	Z, r24
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	08 95       	ret

00003bd0 <_ZN14HardwareSerialcvbEv>:
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	08 95       	ret

00003bd4 <_GLOBAL__I_rx_buffer>:
    3bd4:	10 92 56 06 	sts	0x0656, r1
    3bd8:	10 92 55 06 	sts	0x0655, r1
    3bdc:	88 ee       	ldi	r24, 0xE8	; 232
    3bde:	93 e0       	ldi	r25, 0x03	; 3
    3be0:	a0 e0       	ldi	r26, 0x00	; 0
    3be2:	b0 e0       	ldi	r27, 0x00	; 0
    3be4:	80 93 57 06 	sts	0x0657, r24
    3be8:	90 93 58 06 	sts	0x0658, r25
    3bec:	a0 93 59 06 	sts	0x0659, r26
    3bf0:	b0 93 5a 06 	sts	0x065A, r27
    3bf4:	8e e4       	ldi	r24, 0x4E	; 78
    3bf6:	92 e0       	ldi	r25, 0x02	; 2
    3bf8:	90 93 54 06 	sts	0x0654, r25
    3bfc:	80 93 53 06 	sts	0x0653, r24
    3c00:	8b ec       	ldi	r24, 0xCB	; 203
    3c02:	95 e0       	ldi	r25, 0x05	; 5
    3c04:	90 93 60 06 	sts	0x0660, r25
    3c08:	80 93 5f 06 	sts	0x065F, r24
    3c0c:	8f e0       	ldi	r24, 0x0F	; 15
    3c0e:	96 e0       	ldi	r25, 0x06	; 6
    3c10:	90 93 62 06 	sts	0x0662, r25
    3c14:	80 93 61 06 	sts	0x0661, r24
    3c18:	85 ec       	ldi	r24, 0xC5	; 197
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	90 93 64 06 	sts	0x0664, r25
    3c20:	80 93 63 06 	sts	0x0663, r24
    3c24:	84 ec       	ldi	r24, 0xC4	; 196
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	90 93 66 06 	sts	0x0666, r25
    3c2c:	80 93 65 06 	sts	0x0665, r24
    3c30:	80 ec       	ldi	r24, 0xC0	; 192
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	90 93 68 06 	sts	0x0668, r25
    3c38:	80 93 67 06 	sts	0x0667, r24
    3c3c:	81 ec       	ldi	r24, 0xC1	; 193
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	90 93 6a 06 	sts	0x066A, r25
    3c44:	80 93 69 06 	sts	0x0669, r24
    3c48:	82 ec       	ldi	r24, 0xC2	; 194
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	90 93 6c 06 	sts	0x066C, r25
    3c50:	80 93 6b 06 	sts	0x066B, r24
    3c54:	86 ec       	ldi	r24, 0xC6	; 198
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	90 93 6e 06 	sts	0x066E, r25
    3c5c:	80 93 6d 06 	sts	0x066D, r24
    3c60:	84 e0       	ldi	r24, 0x04	; 4
    3c62:	80 93 6f 06 	sts	0x066F, r24
    3c66:	83 e0       	ldi	r24, 0x03	; 3
    3c68:	80 93 70 06 	sts	0x0670, r24
    3c6c:	87 e0       	ldi	r24, 0x07	; 7
    3c6e:	80 93 71 06 	sts	0x0671, r24
    3c72:	85 e0       	ldi	r24, 0x05	; 5
    3c74:	80 93 72 06 	sts	0x0672, r24
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	80 93 73 06 	sts	0x0673, r24
    3c7e:	08 95       	ret

00003c80 <_ZN5Print5writeEPKhj>:
    3c80:	cf 92       	push	r12
    3c82:	df 92       	push	r13
    3c84:	ef 92       	push	r14
    3c86:	ff 92       	push	r15
    3c88:	0f 93       	push	r16
    3c8a:	1f 93       	push	r17
    3c8c:	cf 93       	push	r28
    3c8e:	df 93       	push	r29
    3c90:	7c 01       	movw	r14, r24
    3c92:	6b 01       	movw	r12, r22
    3c94:	8a 01       	movw	r16, r20
    3c96:	c0 e0       	ldi	r28, 0x00	; 0
    3c98:	d0 e0       	ldi	r29, 0x00	; 0
    3c9a:	0f c0       	rjmp	.+30     	; 0x3cba <_ZN5Print5writeEPKhj+0x3a>
    3c9c:	d6 01       	movw	r26, r12
    3c9e:	6d 91       	ld	r22, X+
    3ca0:	6d 01       	movw	r12, r26
    3ca2:	d7 01       	movw	r26, r14
    3ca4:	ed 91       	ld	r30, X+
    3ca6:	fc 91       	ld	r31, X
    3ca8:	01 90       	ld	r0, Z+
    3caa:	f0 81       	ld	r31, Z
    3cac:	e0 2d       	mov	r30, r0
    3cae:	c7 01       	movw	r24, r14
    3cb0:	09 95       	icall
    3cb2:	c8 0f       	add	r28, r24
    3cb4:	d9 1f       	adc	r29, r25
    3cb6:	01 50       	subi	r16, 0x01	; 1
    3cb8:	10 40       	sbci	r17, 0x00	; 0
    3cba:	01 15       	cp	r16, r1
    3cbc:	11 05       	cpc	r17, r1
    3cbe:	71 f7       	brne	.-36     	; 0x3c9c <_ZN5Print5writeEPKhj+0x1c>
    3cc0:	ce 01       	movw	r24, r28
    3cc2:	df 91       	pop	r29
    3cc4:	cf 91       	pop	r28
    3cc6:	1f 91       	pop	r17
    3cc8:	0f 91       	pop	r16
    3cca:	ff 90       	pop	r15
    3ccc:	ef 90       	pop	r14
    3cce:	df 90       	pop	r13
    3cd0:	cf 90       	pop	r12
    3cd2:	08 95       	ret

00003cd4 <_ZN5Print7printlnEv>:
    3cd4:	ef 92       	push	r14
    3cd6:	ff 92       	push	r15
    3cd8:	0f 93       	push	r16
    3cda:	1f 93       	push	r17
    3cdc:	8c 01       	movw	r16, r24
    3cde:	dc 01       	movw	r26, r24
    3ce0:	ed 91       	ld	r30, X+
    3ce2:	fc 91       	ld	r31, X
    3ce4:	01 90       	ld	r0, Z+
    3ce6:	f0 81       	ld	r31, Z
    3ce8:	e0 2d       	mov	r30, r0
    3cea:	6d e0       	ldi	r22, 0x0D	; 13
    3cec:	09 95       	icall
    3cee:	7c 01       	movw	r14, r24
    3cf0:	d8 01       	movw	r26, r16
    3cf2:	ed 91       	ld	r30, X+
    3cf4:	fc 91       	ld	r31, X
    3cf6:	01 90       	ld	r0, Z+
    3cf8:	f0 81       	ld	r31, Z
    3cfa:	e0 2d       	mov	r30, r0
    3cfc:	c8 01       	movw	r24, r16
    3cfe:	6a e0       	ldi	r22, 0x0A	; 10
    3d00:	09 95       	icall
    3d02:	9c 01       	movw	r18, r24
    3d04:	2e 0d       	add	r18, r14
    3d06:	3f 1d       	adc	r19, r15
    3d08:	c9 01       	movw	r24, r18
    3d0a:	1f 91       	pop	r17
    3d0c:	0f 91       	pop	r16
    3d0e:	ff 90       	pop	r15
    3d10:	ef 90       	pop	r14
    3d12:	08 95       	ret

00003d14 <_ZN5Print5writeEPKc>:
    3d14:	cf 93       	push	r28
    3d16:	df 93       	push	r29
    3d18:	ec 01       	movw	r28, r24
    3d1a:	61 15       	cp	r22, r1
    3d1c:	71 05       	cpc	r23, r1
    3d1e:	19 f4       	brne	.+6      	; 0x3d26 <_ZN5Print5writeEPKc+0x12>
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	0f c0       	rjmp	.+30     	; 0x3d44 <_ZN5Print5writeEPKc+0x30>
    3d26:	db 01       	movw	r26, r22
    3d28:	0d 90       	ld	r0, X+
    3d2a:	00 20       	and	r0, r0
    3d2c:	e9 f7       	brne	.-6      	; 0x3d28 <_ZN5Print5writeEPKc+0x14>
    3d2e:	11 97       	sbiw	r26, 0x01	; 1
    3d30:	a6 1b       	sub	r26, r22
    3d32:	b7 0b       	sbc	r27, r23
    3d34:	e8 81       	ld	r30, Y
    3d36:	f9 81       	ldd	r31, Y+1	; 0x01
    3d38:	02 80       	ldd	r0, Z+2	; 0x02
    3d3a:	f3 81       	ldd	r31, Z+3	; 0x03
    3d3c:	e0 2d       	mov	r30, r0
    3d3e:	ad 01       	movw	r20, r26
    3d40:	09 95       	icall
    3d42:	9c 01       	movw	r18, r24
    3d44:	c9 01       	movw	r24, r18
    3d46:	df 91       	pop	r29
    3d48:	cf 91       	pop	r28
    3d4a:	08 95       	ret

00003d4c <_ZN5Print5printEPKc>:
    3d4c:	e3 cf       	rjmp	.-58     	; 0x3d14 <_ZN5Print5writeEPKc>
    3d4e:	08 95       	ret

00003d50 <_ZN5Print7printlnEPKc>:
    3d50:	ef 92       	push	r14
    3d52:	ff 92       	push	r15
    3d54:	0f 93       	push	r16
    3d56:	1f 93       	push	r17
    3d58:	7c 01       	movw	r14, r24
    3d5a:	dc df       	rcall	.-72     	; 0x3d14 <_ZN5Print5writeEPKc>
    3d5c:	8c 01       	movw	r16, r24
    3d5e:	c7 01       	movw	r24, r14
    3d60:	b9 df       	rcall	.-142    	; 0x3cd4 <_ZN5Print7printlnEv>
    3d62:	08 0f       	add	r16, r24
    3d64:	19 1f       	adc	r17, r25
    3d66:	c8 01       	movw	r24, r16
    3d68:	1f 91       	pop	r17
    3d6a:	0f 91       	pop	r16
    3d6c:	ff 90       	pop	r15
    3d6e:	ef 90       	pop	r14
    3d70:	08 95       	ret

00003d72 <main>:
    3d72:	cf 93       	push	r28
    3d74:	df 93       	push	r29
    3d76:	b9 d0       	rcall	.+370    	; 0x3eea <init>
    3d78:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <setup>
    3d7c:	c6 e6       	ldi	r28, 0x66	; 102
    3d7e:	dc e1       	ldi	r29, 0x1C	; 28
    3d80:	0e 94 fd 04 	call	0x9fa	; 0x9fa <loop>
    3d84:	20 97       	sbiw	r28, 0x00	; 0
    3d86:	e1 f3       	breq	.-8      	; 0x3d80 <main+0xe>
    3d88:	a1 dd       	rcall	.-1214   	; 0x38cc <_Z14serialEventRunv>
    3d8a:	fa cf       	rjmp	.-12     	; 0x3d80 <main+0xe>

00003d8c <__vector_16>:
    3d8c:	1f 92       	push	r1
    3d8e:	0f 92       	push	r0
    3d90:	0f b6       	in	r0, 0x3f	; 63
    3d92:	0f 92       	push	r0
    3d94:	11 24       	eor	r1, r1
    3d96:	2f 93       	push	r18
    3d98:	3f 93       	push	r19
    3d9a:	8f 93       	push	r24
    3d9c:	9f 93       	push	r25
    3d9e:	af 93       	push	r26
    3da0:	bf 93       	push	r27
    3da2:	80 91 79 06 	lds	r24, 0x0679
    3da6:	90 91 7a 06 	lds	r25, 0x067A
    3daa:	a0 91 7b 06 	lds	r26, 0x067B
    3dae:	b0 91 7c 06 	lds	r27, 0x067C
    3db2:	30 91 7d 06 	lds	r19, 0x067D
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	a1 1d       	adc	r26, r1
    3dba:	b1 1d       	adc	r27, r1
    3dbc:	23 2f       	mov	r18, r19
    3dbe:	2d 5f       	subi	r18, 0xFD	; 253
    3dc0:	2d 37       	cpi	r18, 0x7D	; 125
    3dc2:	20 f0       	brcs	.+8      	; 0x3dcc <__vector_16+0x40>
    3dc4:	2d 57       	subi	r18, 0x7D	; 125
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	a1 1d       	adc	r26, r1
    3dca:	b1 1d       	adc	r27, r1
    3dcc:	20 93 7d 06 	sts	0x067D, r18
    3dd0:	80 93 79 06 	sts	0x0679, r24
    3dd4:	90 93 7a 06 	sts	0x067A, r25
    3dd8:	a0 93 7b 06 	sts	0x067B, r26
    3ddc:	b0 93 7c 06 	sts	0x067C, r27
    3de0:	80 91 75 06 	lds	r24, 0x0675
    3de4:	90 91 76 06 	lds	r25, 0x0676
    3de8:	a0 91 77 06 	lds	r26, 0x0677
    3dec:	b0 91 78 06 	lds	r27, 0x0678
    3df0:	01 96       	adiw	r24, 0x01	; 1
    3df2:	a1 1d       	adc	r26, r1
    3df4:	b1 1d       	adc	r27, r1
    3df6:	80 93 75 06 	sts	0x0675, r24
    3dfa:	90 93 76 06 	sts	0x0676, r25
    3dfe:	a0 93 77 06 	sts	0x0677, r26
    3e02:	b0 93 78 06 	sts	0x0678, r27
    3e06:	bf 91       	pop	r27
    3e08:	af 91       	pop	r26
    3e0a:	9f 91       	pop	r25
    3e0c:	8f 91       	pop	r24
    3e0e:	3f 91       	pop	r19
    3e10:	2f 91       	pop	r18
    3e12:	0f 90       	pop	r0
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	0f 90       	pop	r0
    3e18:	1f 90       	pop	r1
    3e1a:	18 95       	reti

00003e1c <millis>:
    3e1c:	8f b7       	in	r24, 0x3f	; 63
    3e1e:	f8 94       	cli
    3e20:	20 91 79 06 	lds	r18, 0x0679
    3e24:	30 91 7a 06 	lds	r19, 0x067A
    3e28:	40 91 7b 06 	lds	r20, 0x067B
    3e2c:	50 91 7c 06 	lds	r21, 0x067C
    3e30:	8f bf       	out	0x3f, r24	; 63
    3e32:	b9 01       	movw	r22, r18
    3e34:	ca 01       	movw	r24, r20
    3e36:	08 95       	ret

00003e38 <delay>:
    3e38:	9b 01       	movw	r18, r22
    3e3a:	ac 01       	movw	r20, r24
    3e3c:	7f b7       	in	r23, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	80 91 75 06 	lds	r24, 0x0675
    3e44:	90 91 76 06 	lds	r25, 0x0676
    3e48:	a0 91 77 06 	lds	r26, 0x0677
    3e4c:	b0 91 78 06 	lds	r27, 0x0678
    3e50:	66 b5       	in	r22, 0x26	; 38
    3e52:	a8 9b       	sbis	0x15, 0	; 21
    3e54:	05 c0       	rjmp	.+10     	; 0x3e60 <delay+0x28>
    3e56:	6f 3f       	cpi	r22, 0xFF	; 255
    3e58:	19 f0       	breq	.+6      	; 0x3e60 <delay+0x28>
    3e5a:	01 96       	adiw	r24, 0x01	; 1
    3e5c:	a1 1d       	adc	r26, r1
    3e5e:	b1 1d       	adc	r27, r1
    3e60:	7f bf       	out	0x3f, r23	; 63
    3e62:	ba 2f       	mov	r27, r26
    3e64:	a9 2f       	mov	r26, r25
    3e66:	98 2f       	mov	r25, r24
    3e68:	88 27       	eor	r24, r24
    3e6a:	86 0f       	add	r24, r22
    3e6c:	91 1d       	adc	r25, r1
    3e6e:	a1 1d       	adc	r26, r1
    3e70:	b1 1d       	adc	r27, r1
    3e72:	62 e0       	ldi	r22, 0x02	; 2
    3e74:	88 0f       	add	r24, r24
    3e76:	99 1f       	adc	r25, r25
    3e78:	aa 1f       	adc	r26, r26
    3e7a:	bb 1f       	adc	r27, r27
    3e7c:	6a 95       	dec	r22
    3e7e:	d1 f7       	brne	.-12     	; 0x3e74 <delay+0x3c>
    3e80:	bc 01       	movw	r22, r24
    3e82:	2d c0       	rjmp	.+90     	; 0x3ede <delay+0xa6>
    3e84:	ff b7       	in	r31, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	80 91 75 06 	lds	r24, 0x0675
    3e8c:	90 91 76 06 	lds	r25, 0x0676
    3e90:	a0 91 77 06 	lds	r26, 0x0677
    3e94:	b0 91 78 06 	lds	r27, 0x0678
    3e98:	e6 b5       	in	r30, 0x26	; 38
    3e9a:	a8 9b       	sbis	0x15, 0	; 21
    3e9c:	05 c0       	rjmp	.+10     	; 0x3ea8 <delay+0x70>
    3e9e:	ef 3f       	cpi	r30, 0xFF	; 255
    3ea0:	19 f0       	breq	.+6      	; 0x3ea8 <delay+0x70>
    3ea2:	01 96       	adiw	r24, 0x01	; 1
    3ea4:	a1 1d       	adc	r26, r1
    3ea6:	b1 1d       	adc	r27, r1
    3ea8:	ff bf       	out	0x3f, r31	; 63
    3eaa:	ba 2f       	mov	r27, r26
    3eac:	a9 2f       	mov	r26, r25
    3eae:	98 2f       	mov	r25, r24
    3eb0:	88 27       	eor	r24, r24
    3eb2:	8e 0f       	add	r24, r30
    3eb4:	91 1d       	adc	r25, r1
    3eb6:	a1 1d       	adc	r26, r1
    3eb8:	b1 1d       	adc	r27, r1
    3eba:	e2 e0       	ldi	r30, 0x02	; 2
    3ebc:	88 0f       	add	r24, r24
    3ebe:	99 1f       	adc	r25, r25
    3ec0:	aa 1f       	adc	r26, r26
    3ec2:	bb 1f       	adc	r27, r27
    3ec4:	ea 95       	dec	r30
    3ec6:	d1 f7       	brne	.-12     	; 0x3ebc <delay+0x84>
    3ec8:	86 1b       	sub	r24, r22
    3eca:	97 0b       	sbc	r25, r23
    3ecc:	88 5e       	subi	r24, 0xE8	; 232
    3ece:	93 40       	sbci	r25, 0x03	; 3
    3ed0:	c8 f2       	brcs	.-78     	; 0x3e84 <delay+0x4c>
    3ed2:	21 50       	subi	r18, 0x01	; 1
    3ed4:	30 40       	sbci	r19, 0x00	; 0
    3ed6:	40 40       	sbci	r20, 0x00	; 0
    3ed8:	50 40       	sbci	r21, 0x00	; 0
    3eda:	68 51       	subi	r22, 0x18	; 24
    3edc:	7c 4f       	sbci	r23, 0xFC	; 252
    3ede:	21 15       	cp	r18, r1
    3ee0:	31 05       	cpc	r19, r1
    3ee2:	41 05       	cpc	r20, r1
    3ee4:	51 05       	cpc	r21, r1
    3ee6:	71 f6       	brne	.-100    	; 0x3e84 <delay+0x4c>
    3ee8:	08 95       	ret

00003eea <init>:
    3eea:	78 94       	sei
    3eec:	84 b5       	in	r24, 0x24	; 36
    3eee:	82 60       	ori	r24, 0x02	; 2
    3ef0:	84 bd       	out	0x24, r24	; 36
    3ef2:	84 b5       	in	r24, 0x24	; 36
    3ef4:	81 60       	ori	r24, 0x01	; 1
    3ef6:	84 bd       	out	0x24, r24	; 36
    3ef8:	85 b5       	in	r24, 0x25	; 37
    3efa:	82 60       	ori	r24, 0x02	; 2
    3efc:	85 bd       	out	0x25, r24	; 37
    3efe:	85 b5       	in	r24, 0x25	; 37
    3f00:	81 60       	ori	r24, 0x01	; 1
    3f02:	85 bd       	out	0x25, r24	; 37
    3f04:	ee e6       	ldi	r30, 0x6E	; 110
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	81 60       	ori	r24, 0x01	; 1
    3f0c:	80 83       	st	Z, r24
    3f0e:	e1 e8       	ldi	r30, 0x81	; 129
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	10 82       	st	Z, r1
    3f14:	80 81       	ld	r24, Z
    3f16:	82 60       	ori	r24, 0x02	; 2
    3f18:	80 83       	st	Z, r24
    3f1a:	80 81       	ld	r24, Z
    3f1c:	81 60       	ori	r24, 0x01	; 1
    3f1e:	80 83       	st	Z, r24
    3f20:	e0 e8       	ldi	r30, 0x80	; 128
    3f22:	f0 e0       	ldi	r31, 0x00	; 0
    3f24:	80 81       	ld	r24, Z
    3f26:	81 60       	ori	r24, 0x01	; 1
    3f28:	80 83       	st	Z, r24
    3f2a:	e1 eb       	ldi	r30, 0xB1	; 177
    3f2c:	f0 e0       	ldi	r31, 0x00	; 0
    3f2e:	80 81       	ld	r24, Z
    3f30:	84 60       	ori	r24, 0x04	; 4
    3f32:	80 83       	st	Z, r24
    3f34:	e0 eb       	ldi	r30, 0xB0	; 176
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	80 81       	ld	r24, Z
    3f3a:	81 60       	ori	r24, 0x01	; 1
    3f3c:	80 83       	st	Z, r24
    3f3e:	ea e7       	ldi	r30, 0x7A	; 122
    3f40:	f0 e0       	ldi	r31, 0x00	; 0
    3f42:	80 81       	ld	r24, Z
    3f44:	84 60       	ori	r24, 0x04	; 4
    3f46:	80 83       	st	Z, r24
    3f48:	80 81       	ld	r24, Z
    3f4a:	82 60       	ori	r24, 0x02	; 2
    3f4c:	80 83       	st	Z, r24
    3f4e:	80 81       	ld	r24, Z
    3f50:	81 60       	ori	r24, 0x01	; 1
    3f52:	80 83       	st	Z, r24
    3f54:	80 81       	ld	r24, Z
    3f56:	80 68       	ori	r24, 0x80	; 128
    3f58:	80 83       	st	Z, r24
    3f5a:	10 92 c1 00 	sts	0x00C1, r1
    3f5e:	08 95       	ret

00003f60 <pinMode>:
    3f60:	cf 93       	push	r28
    3f62:	df 93       	push	r29
    3f64:	48 2f       	mov	r20, r24
    3f66:	50 e0       	ldi	r21, 0x00	; 0
    3f68:	ca 01       	movw	r24, r20
    3f6a:	86 55       	subi	r24, 0x56	; 86
    3f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6e:	fc 01       	movw	r30, r24
    3f70:	34 91       	lpm	r19, Z+
    3f72:	4a 56       	subi	r20, 0x6A	; 106
    3f74:	5f 4f       	sbci	r21, 0xFF	; 255
    3f76:	fa 01       	movw	r30, r20
    3f78:	84 91       	lpm	r24, Z+
    3f7a:	88 23       	and	r24, r24
    3f7c:	69 f1       	breq	.+90     	; 0x3fd8 <pinMode+0x78>
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	88 0f       	add	r24, r24
    3f82:	99 1f       	adc	r25, r25
    3f84:	fc 01       	movw	r30, r24
    3f86:	e8 58       	subi	r30, 0x88	; 136
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	a5 91       	lpm	r26, Z+
    3f8c:	b4 91       	lpm	r27, Z+
    3f8e:	fc 01       	movw	r30, r24
    3f90:	ee 57       	subi	r30, 0x7E	; 126
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	c5 91       	lpm	r28, Z+
    3f96:	d4 91       	lpm	r29, Z+
    3f98:	66 23       	and	r22, r22
    3f9a:	51 f4       	brne	.+20     	; 0x3fb0 <pinMode+0x50>
    3f9c:	2f b7       	in	r18, 0x3f	; 63
    3f9e:	f8 94       	cli
    3fa0:	8c 91       	ld	r24, X
    3fa2:	93 2f       	mov	r25, r19
    3fa4:	90 95       	com	r25
    3fa6:	89 23       	and	r24, r25
    3fa8:	8c 93       	st	X, r24
    3faa:	88 81       	ld	r24, Y
    3fac:	89 23       	and	r24, r25
    3fae:	0b c0       	rjmp	.+22     	; 0x3fc6 <pinMode+0x66>
    3fb0:	62 30       	cpi	r22, 0x02	; 2
    3fb2:	61 f4       	brne	.+24     	; 0x3fcc <pinMode+0x6c>
    3fb4:	2f b7       	in	r18, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	8c 91       	ld	r24, X
    3fba:	93 2f       	mov	r25, r19
    3fbc:	90 95       	com	r25
    3fbe:	89 23       	and	r24, r25
    3fc0:	8c 93       	st	X, r24
    3fc2:	88 81       	ld	r24, Y
    3fc4:	83 2b       	or	r24, r19
    3fc6:	88 83       	st	Y, r24
    3fc8:	2f bf       	out	0x3f, r18	; 63
    3fca:	06 c0       	rjmp	.+12     	; 0x3fd8 <pinMode+0x78>
    3fcc:	9f b7       	in	r25, 0x3f	; 63
    3fce:	f8 94       	cli
    3fd0:	8c 91       	ld	r24, X
    3fd2:	83 2b       	or	r24, r19
    3fd4:	8c 93       	st	X, r24
    3fd6:	9f bf       	out	0x3f, r25	; 63
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	08 95       	ret

00003fde <digitalWrite>:
    3fde:	48 2f       	mov	r20, r24
    3fe0:	50 e0       	ldi	r21, 0x00	; 0
    3fe2:	ca 01       	movw	r24, r20
    3fe4:	82 54       	subi	r24, 0x42	; 66
    3fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe8:	fc 01       	movw	r30, r24
    3fea:	24 91       	lpm	r18, Z+
    3fec:	ca 01       	movw	r24, r20
    3fee:	86 55       	subi	r24, 0x56	; 86
    3ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	94 91       	lpm	r25, Z+
    3ff6:	4a 56       	subi	r20, 0x6A	; 106
    3ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    3ffa:	fa 01       	movw	r30, r20
    3ffc:	34 91       	lpm	r19, Z+
    3ffe:	33 23       	and	r19, r19
    4000:	09 f4       	brne	.+2      	; 0x4004 <digitalWrite+0x26>
    4002:	40 c0       	rjmp	.+128    	; 0x4084 <digitalWrite+0xa6>
    4004:	22 23       	and	r18, r18
    4006:	51 f1       	breq	.+84     	; 0x405c <digitalWrite+0x7e>
    4008:	23 30       	cpi	r18, 0x03	; 3
    400a:	71 f0       	breq	.+28     	; 0x4028 <digitalWrite+0x4a>
    400c:	24 30       	cpi	r18, 0x04	; 4
    400e:	28 f4       	brcc	.+10     	; 0x401a <digitalWrite+0x3c>
    4010:	21 30       	cpi	r18, 0x01	; 1
    4012:	a1 f0       	breq	.+40     	; 0x403c <digitalWrite+0x5e>
    4014:	22 30       	cpi	r18, 0x02	; 2
    4016:	11 f5       	brne	.+68     	; 0x405c <digitalWrite+0x7e>
    4018:	14 c0       	rjmp	.+40     	; 0x4042 <digitalWrite+0x64>
    401a:	26 30       	cpi	r18, 0x06	; 6
    401c:	b1 f0       	breq	.+44     	; 0x404a <digitalWrite+0x6c>
    401e:	27 30       	cpi	r18, 0x07	; 7
    4020:	c1 f0       	breq	.+48     	; 0x4052 <digitalWrite+0x74>
    4022:	24 30       	cpi	r18, 0x04	; 4
    4024:	d9 f4       	brne	.+54     	; 0x405c <digitalWrite+0x7e>
    4026:	04 c0       	rjmp	.+8      	; 0x4030 <digitalWrite+0x52>
    4028:	80 91 80 00 	lds	r24, 0x0080
    402c:	8f 77       	andi	r24, 0x7F	; 127
    402e:	03 c0       	rjmp	.+6      	; 0x4036 <digitalWrite+0x58>
    4030:	80 91 80 00 	lds	r24, 0x0080
    4034:	8f 7d       	andi	r24, 0xDF	; 223
    4036:	80 93 80 00 	sts	0x0080, r24
    403a:	10 c0       	rjmp	.+32     	; 0x405c <digitalWrite+0x7e>
    403c:	84 b5       	in	r24, 0x24	; 36
    403e:	8f 77       	andi	r24, 0x7F	; 127
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <digitalWrite+0x68>
    4042:	84 b5       	in	r24, 0x24	; 36
    4044:	8f 7d       	andi	r24, 0xDF	; 223
    4046:	84 bd       	out	0x24, r24	; 36
    4048:	09 c0       	rjmp	.+18     	; 0x405c <digitalWrite+0x7e>
    404a:	80 91 b0 00 	lds	r24, 0x00B0
    404e:	8f 77       	andi	r24, 0x7F	; 127
    4050:	03 c0       	rjmp	.+6      	; 0x4058 <digitalWrite+0x7a>
    4052:	80 91 b0 00 	lds	r24, 0x00B0
    4056:	8f 7d       	andi	r24, 0xDF	; 223
    4058:	80 93 b0 00 	sts	0x00B0, r24
    405c:	e3 2f       	mov	r30, r19
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	ee 0f       	add	r30, r30
    4062:	ff 1f       	adc	r31, r31
    4064:	ee 57       	subi	r30, 0x7E	; 126
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	a5 91       	lpm	r26, Z+
    406a:	b4 91       	lpm	r27, Z+
    406c:	2f b7       	in	r18, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	66 23       	and	r22, r22
    4072:	21 f4       	brne	.+8      	; 0x407c <digitalWrite+0x9e>
    4074:	8c 91       	ld	r24, X
    4076:	90 95       	com	r25
    4078:	89 23       	and	r24, r25
    407a:	02 c0       	rjmp	.+4      	; 0x4080 <digitalWrite+0xa2>
    407c:	8c 91       	ld	r24, X
    407e:	89 2b       	or	r24, r25
    4080:	8c 93       	st	X, r24
    4082:	2f bf       	out	0x3f, r18	; 63
    4084:	08 95       	ret

00004086 <digitalRead>:
    4086:	68 2f       	mov	r22, r24
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	cb 01       	movw	r24, r22
    408c:	82 54       	subi	r24, 0x42	; 66
    408e:	9f 4f       	sbci	r25, 0xFF	; 255
    4090:	fc 01       	movw	r30, r24
    4092:	24 91       	lpm	r18, Z+
    4094:	cb 01       	movw	r24, r22
    4096:	86 55       	subi	r24, 0x56	; 86
    4098:	9f 4f       	sbci	r25, 0xFF	; 255
    409a:	fc 01       	movw	r30, r24
    409c:	44 91       	lpm	r20, Z+
    409e:	6a 56       	subi	r22, 0x6A	; 106
    40a0:	7f 4f       	sbci	r23, 0xFF	; 255
    40a2:	fb 01       	movw	r30, r22
    40a4:	94 91       	lpm	r25, Z+
    40a6:	99 23       	and	r25, r25
    40a8:	19 f4       	brne	.+6      	; 0x40b0 <digitalRead+0x2a>
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	3c c0       	rjmp	.+120    	; 0x4128 <digitalRead+0xa2>
    40b0:	22 23       	and	r18, r18
    40b2:	51 f1       	breq	.+84     	; 0x4108 <digitalRead+0x82>
    40b4:	23 30       	cpi	r18, 0x03	; 3
    40b6:	71 f0       	breq	.+28     	; 0x40d4 <digitalRead+0x4e>
    40b8:	24 30       	cpi	r18, 0x04	; 4
    40ba:	28 f4       	brcc	.+10     	; 0x40c6 <digitalRead+0x40>
    40bc:	21 30       	cpi	r18, 0x01	; 1
    40be:	a1 f0       	breq	.+40     	; 0x40e8 <digitalRead+0x62>
    40c0:	22 30       	cpi	r18, 0x02	; 2
    40c2:	11 f5       	brne	.+68     	; 0x4108 <digitalRead+0x82>
    40c4:	14 c0       	rjmp	.+40     	; 0x40ee <digitalRead+0x68>
    40c6:	26 30       	cpi	r18, 0x06	; 6
    40c8:	b1 f0       	breq	.+44     	; 0x40f6 <digitalRead+0x70>
    40ca:	27 30       	cpi	r18, 0x07	; 7
    40cc:	c1 f0       	breq	.+48     	; 0x40fe <digitalRead+0x78>
    40ce:	24 30       	cpi	r18, 0x04	; 4
    40d0:	d9 f4       	brne	.+54     	; 0x4108 <digitalRead+0x82>
    40d2:	04 c0       	rjmp	.+8      	; 0x40dc <digitalRead+0x56>
    40d4:	80 91 80 00 	lds	r24, 0x0080
    40d8:	8f 77       	andi	r24, 0x7F	; 127
    40da:	03 c0       	rjmp	.+6      	; 0x40e2 <digitalRead+0x5c>
    40dc:	80 91 80 00 	lds	r24, 0x0080
    40e0:	8f 7d       	andi	r24, 0xDF	; 223
    40e2:	80 93 80 00 	sts	0x0080, r24
    40e6:	10 c0       	rjmp	.+32     	; 0x4108 <digitalRead+0x82>
    40e8:	84 b5       	in	r24, 0x24	; 36
    40ea:	8f 77       	andi	r24, 0x7F	; 127
    40ec:	02 c0       	rjmp	.+4      	; 0x40f2 <digitalRead+0x6c>
    40ee:	84 b5       	in	r24, 0x24	; 36
    40f0:	8f 7d       	andi	r24, 0xDF	; 223
    40f2:	84 bd       	out	0x24, r24	; 36
    40f4:	09 c0       	rjmp	.+18     	; 0x4108 <digitalRead+0x82>
    40f6:	80 91 b0 00 	lds	r24, 0x00B0
    40fa:	8f 77       	andi	r24, 0x7F	; 127
    40fc:	03 c0       	rjmp	.+6      	; 0x4104 <digitalRead+0x7e>
    40fe:	80 91 b0 00 	lds	r24, 0x00B0
    4102:	8f 7d       	andi	r24, 0xDF	; 223
    4104:	80 93 b0 00 	sts	0x00B0, r24
    4108:	89 2f       	mov	r24, r25
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	88 0f       	add	r24, r24
    410e:	99 1f       	adc	r25, r25
    4110:	84 57       	subi	r24, 0x74	; 116
    4112:	9f 4f       	sbci	r25, 0xFF	; 255
    4114:	fc 01       	movw	r30, r24
    4116:	a5 91       	lpm	r26, Z+
    4118:	b4 91       	lpm	r27, Z+
    411a:	8c 91       	ld	r24, X
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	84 23       	and	r24, r20
    4122:	11 f0       	breq	.+4      	; 0x4128 <digitalRead+0xa2>
    4124:	21 e0       	ldi	r18, 0x01	; 1
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	c9 01       	movw	r24, r18
    412a:	08 95       	ret

0000412c <__mulsi3>:
    412c:	62 9f       	mul	r22, r18
    412e:	d0 01       	movw	r26, r0
    4130:	73 9f       	mul	r23, r19
    4132:	f0 01       	movw	r30, r0
    4134:	82 9f       	mul	r24, r18
    4136:	e0 0d       	add	r30, r0
    4138:	f1 1d       	adc	r31, r1
    413a:	64 9f       	mul	r22, r20
    413c:	e0 0d       	add	r30, r0
    413e:	f1 1d       	adc	r31, r1
    4140:	92 9f       	mul	r25, r18
    4142:	f0 0d       	add	r31, r0
    4144:	83 9f       	mul	r24, r19
    4146:	f0 0d       	add	r31, r0
    4148:	74 9f       	mul	r23, r20
    414a:	f0 0d       	add	r31, r0
    414c:	65 9f       	mul	r22, r21
    414e:	f0 0d       	add	r31, r0
    4150:	99 27       	eor	r25, r25
    4152:	72 9f       	mul	r23, r18
    4154:	b0 0d       	add	r27, r0
    4156:	e1 1d       	adc	r30, r1
    4158:	f9 1f       	adc	r31, r25
    415a:	63 9f       	mul	r22, r19
    415c:	b0 0d       	add	r27, r0
    415e:	e1 1d       	adc	r30, r1
    4160:	f9 1f       	adc	r31, r25
    4162:	bd 01       	movw	r22, r26
    4164:	cf 01       	movw	r24, r30
    4166:	11 24       	eor	r1, r1
    4168:	08 95       	ret

0000416a <__udivmodsi4>:
    416a:	a1 e2       	ldi	r26, 0x21	; 33
    416c:	1a 2e       	mov	r1, r26
    416e:	aa 1b       	sub	r26, r26
    4170:	bb 1b       	sub	r27, r27
    4172:	fd 01       	movw	r30, r26
    4174:	0d c0       	rjmp	.+26     	; 0x4190 <__udivmodsi4_ep>

00004176 <__udivmodsi4_loop>:
    4176:	aa 1f       	adc	r26, r26
    4178:	bb 1f       	adc	r27, r27
    417a:	ee 1f       	adc	r30, r30
    417c:	ff 1f       	adc	r31, r31
    417e:	a2 17       	cp	r26, r18
    4180:	b3 07       	cpc	r27, r19
    4182:	e4 07       	cpc	r30, r20
    4184:	f5 07       	cpc	r31, r21
    4186:	20 f0       	brcs	.+8      	; 0x4190 <__udivmodsi4_ep>
    4188:	a2 1b       	sub	r26, r18
    418a:	b3 0b       	sbc	r27, r19
    418c:	e4 0b       	sbc	r30, r20
    418e:	f5 0b       	sbc	r31, r21

00004190 <__udivmodsi4_ep>:
    4190:	66 1f       	adc	r22, r22
    4192:	77 1f       	adc	r23, r23
    4194:	88 1f       	adc	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	1a 94       	dec	r1
    419a:	69 f7       	brne	.-38     	; 0x4176 <__udivmodsi4_loop>
    419c:	60 95       	com	r22
    419e:	70 95       	com	r23
    41a0:	80 95       	com	r24
    41a2:	90 95       	com	r25
    41a4:	9b 01       	movw	r18, r22
    41a6:	ac 01       	movw	r20, r24
    41a8:	bd 01       	movw	r22, r26
    41aa:	cf 01       	movw	r24, r30
    41ac:	08 95       	ret

000041ae <__prologue_saves__>:
    41ae:	2f 92       	push	r2
    41b0:	3f 92       	push	r3
    41b2:	4f 92       	push	r4
    41b4:	5f 92       	push	r5
    41b6:	6f 92       	push	r6
    41b8:	7f 92       	push	r7
    41ba:	8f 92       	push	r8
    41bc:	9f 92       	push	r9
    41be:	af 92       	push	r10
    41c0:	bf 92       	push	r11
    41c2:	cf 92       	push	r12
    41c4:	df 92       	push	r13
    41c6:	ef 92       	push	r14
    41c8:	ff 92       	push	r15
    41ca:	0f 93       	push	r16
    41cc:	1f 93       	push	r17
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
    41d6:	ca 1b       	sub	r28, r26
    41d8:	db 0b       	sbc	r29, r27
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	de bf       	out	0x3e, r29	; 62
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	09 94       	ijmp

000041e6 <__epilogue_restores__>:
    41e6:	2a 88       	ldd	r2, Y+18	; 0x12
    41e8:	39 88       	ldd	r3, Y+17	; 0x11
    41ea:	48 88       	ldd	r4, Y+16	; 0x10
    41ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    41ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    41f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    41f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    41f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    41f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    41f8:	b9 84       	ldd	r11, Y+9	; 0x09
    41fa:	c8 84       	ldd	r12, Y+8	; 0x08
    41fc:	df 80       	ldd	r13, Y+7	; 0x07
    41fe:	ee 80       	ldd	r14, Y+6	; 0x06
    4200:	fd 80       	ldd	r15, Y+5	; 0x05
    4202:	0c 81       	ldd	r16, Y+4	; 0x04
    4204:	1b 81       	ldd	r17, Y+3	; 0x03
    4206:	aa 81       	ldd	r26, Y+2	; 0x02
    4208:	b9 81       	ldd	r27, Y+1	; 0x01
    420a:	ce 0f       	add	r28, r30
    420c:	d1 1d       	adc	r29, r1
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	de bf       	out	0x3e, r29	; 62
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	ed 01       	movw	r28, r26
    421a:	08 95       	ret

0000421c <__tablejump2__>:
    421c:	ee 0f       	add	r30, r30
    421e:	ff 1f       	adc	r31, r31

00004220 <__tablejump__>:
    4220:	05 90       	lpm	r0, Z+
    4222:	f4 91       	lpm	r31, Z+
    4224:	e0 2d       	mov	r30, r0
    4226:	09 94       	ijmp

00004228 <__do_global_dtors>:
    4228:	10 e0       	ldi	r17, 0x00	; 0
    422a:	c8 ed       	ldi	r28, 0xD8	; 216
    422c:	d0 e0       	ldi	r29, 0x00	; 0
    422e:	03 c0       	rjmp	.+6      	; 0x4236 <.do_global_dtors_start>

00004230 <.do_global_dtors_loop>:
    4230:	fe 01       	movw	r30, r28
    4232:	f6 df       	rcall	.-20     	; 0x4220 <__tablejump__>
    4234:	22 96       	adiw	r28, 0x02	; 2

00004236 <.do_global_dtors_start>:
    4236:	ca 3d       	cpi	r28, 0xDA	; 218
    4238:	d1 07       	cpc	r29, r17
    423a:	d1 f7       	brne	.-12     	; 0x4230 <.do_global_dtors_loop>
    423c:	f8 94       	cli

0000423e <__stop_program>:
    423e:	ff cf       	rjmp	.-2      	; 0x423e <__stop_program>
