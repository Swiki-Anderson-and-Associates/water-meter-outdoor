
ArduinoWaterMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  00002468  000024fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000407  0080023a  0080023a  00002636  2**0
                  ALLOC
  3 .stab         00009444  00000000  00000000  00002638  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000b3ff  00000000  00000000  0000ba7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c0       	rjmp	.+196    	; 0xc6 <__ctors_end>
       2:	00 00       	nop
       4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
       6:	00 00       	nop
       8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
       a:	00 00       	nop
       c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
       e:	00 00       	nop
      10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
      12:	00 00       	nop
      14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
      16:	00 00       	nop
      18:	e1 c4       	rjmp	.+2498   	; 0x9dc <__vector_6>
      1a:	00 00       	nop
      1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
      22:	00 00       	nop
      24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
      26:	00 00       	nop
      28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
      2e:	00 00       	nop
      30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
      32:	00 00       	nop
      34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
      36:	00 00       	nop
      38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__vector_16>
      44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__vector_18>
      4c:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_19>
      50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
      52:	00 00       	nop
      54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
      56:	00 00       	nop
      58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
      62:	00 00       	nop
      64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
	...

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	24 0d       	add	r18, r4
      c4:	27 0f       	add	r18, r23

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e8 e6       	ldi	r30, 0x68	; 104
      da:	f4 e2       	ldi	r31, 0x24	; 36
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
      e2:	aa 33       	cpi	r26, 0x3A	; 58
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
      e8:	16 e0       	ldi	r17, 0x06	; 6
      ea:	aa e3       	ldi	r26, 0x3A	; 58
      ec:	b2 e0       	ldi	r27, 0x02	; 2
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a1 34       	cpi	r26, 0x41	; 65
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 2e 12 	call	0x245c	; 0x245c <__tablejump__>

00000108 <.do_global_ctors_start>:
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
     10e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <main>
     112:	0c 94 32 12 	jmp	0x2464	; 0x2464 <_exit>

00000116 <__bad_interrupt>:
     116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <strcpy>:
     118:	fb 01       	movw	r30, r22
     11a:	dc 01       	movw	r26, r24
     11c:	01 90       	ld	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	00 20       	and	r0, r0
     122:	e1 f7       	brne	.-8      	; 0x11c <strcpy+0x4>
     124:	08 95       	ret

00000126 <sprintf>:
     126:	ae e0       	ldi	r26, 0x0E	; 14
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x1c>
     132:	0d 89       	ldd	r16, Y+21	; 0x15
     134:	1e 89       	ldd	r17, Y+22	; 0x16
     136:	86 e0       	ldi	r24, 0x06	; 6
     138:	8c 83       	std	Y+4, r24	; 0x04
     13a:	1a 83       	std	Y+2, r17	; 0x02
     13c:	09 83       	std	Y+1, r16	; 0x01
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	9f e7       	ldi	r25, 0x7F	; 127
     142:	9e 83       	std	Y+6, r25	; 0x06
     144:	8d 83       	std	Y+5, r24	; 0x05
     146:	9e 01       	movw	r18, r28
     148:	27 5e       	subi	r18, 0xE7	; 231
     14a:	3f 4f       	sbci	r19, 0xFF	; 255
     14c:	ce 01       	movw	r24, r28
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	6f 89       	ldd	r22, Y+23	; 0x17
     152:	78 8d       	ldd	r23, Y+24	; 0x18
     154:	a9 01       	movw	r20, r18
     156:	0a d0       	rcall	.+20     	; 0x16c <vfprintf>
     158:	2f 81       	ldd	r18, Y+7	; 0x07
     15a:	38 85       	ldd	r19, Y+8	; 0x08
     15c:	02 0f       	add	r16, r18
     15e:	13 1f       	adc	r17, r19
     160:	f8 01       	movw	r30, r16
     162:	10 82       	st	Z, r1
     164:	2e 96       	adiw	r28, 0x0e	; 14
     166:	e4 e0       	ldi	r30, 0x04	; 4
     168:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x1c>

0000016c <vfprintf>:
     16c:	ab e0       	ldi	r26, 0x0B	; 11
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ec eb       	ldi	r30, 0xBC	; 188
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__>
     178:	3c 01       	movw	r6, r24
     17a:	2b 01       	movw	r4, r22
     17c:	5a 01       	movw	r10, r20
     17e:	fc 01       	movw	r30, r24
     180:	17 82       	std	Z+7, r1	; 0x07
     182:	16 82       	std	Z+6, r1	; 0x06
     184:	83 81       	ldd	r24, Z+3	; 0x03
     186:	81 fd       	sbrc	r24, 1
     188:	03 c0       	rjmp	.+6      	; 0x190 <vfprintf+0x24>
     18a:	6f ef       	ldi	r22, 0xFF	; 255
     18c:	7f ef       	ldi	r23, 0xFF	; 255
     18e:	b9 c1       	rjmp	.+882    	; 0x502 <vfprintf+0x396>
     190:	9a e0       	ldi	r25, 0x0A	; 10
     192:	89 2e       	mov	r8, r25
     194:	1e 01       	movw	r2, r28
     196:	08 94       	sec
     198:	21 1c       	adc	r2, r1
     19a:	31 1c       	adc	r3, r1
     19c:	f3 01       	movw	r30, r6
     19e:	23 81       	ldd	r18, Z+3	; 0x03
     1a0:	f2 01       	movw	r30, r4
     1a2:	23 fd       	sbrc	r18, 3
     1a4:	85 91       	lpm	r24, Z+
     1a6:	23 ff       	sbrs	r18, 3
     1a8:	81 91       	ld	r24, Z+
     1aa:	2f 01       	movw	r4, r30
     1ac:	88 23       	and	r24, r24
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <vfprintf+0x46>
     1b0:	a5 c1       	rjmp	.+842    	; 0x4fc <vfprintf+0x390>
     1b2:	85 32       	cpi	r24, 0x25	; 37
     1b4:	39 f4       	brne	.+14     	; 0x1c4 <vfprintf+0x58>
     1b6:	23 fd       	sbrc	r18, 3
     1b8:	85 91       	lpm	r24, Z+
     1ba:	23 ff       	sbrs	r18, 3
     1bc:	81 91       	ld	r24, Z+
     1be:	2f 01       	movw	r4, r30
     1c0:	85 32       	cpi	r24, 0x25	; 37
     1c2:	21 f4       	brne	.+8      	; 0x1cc <vfprintf+0x60>
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b3 01       	movw	r22, r6
     1c8:	b7 d1       	rcall	.+878    	; 0x538 <fputc>
     1ca:	e8 cf       	rjmp	.-48     	; 0x19c <vfprintf+0x30>
     1cc:	98 2f       	mov	r25, r24
     1ce:	ff 24       	eor	r15, r15
     1d0:	ee 24       	eor	r14, r14
     1d2:	99 24       	eor	r9, r9
     1d4:	ff e1       	ldi	r31, 0x1F	; 31
     1d6:	ff 15       	cp	r31, r15
     1d8:	d0 f0       	brcs	.+52     	; 0x20e <vfprintf+0xa2>
     1da:	9b 32       	cpi	r25, 0x2B	; 43
     1dc:	69 f0       	breq	.+26     	; 0x1f8 <vfprintf+0x8c>
     1de:	9c 32       	cpi	r25, 0x2C	; 44
     1e0:	28 f4       	brcc	.+10     	; 0x1ec <vfprintf+0x80>
     1e2:	90 32       	cpi	r25, 0x20	; 32
     1e4:	59 f0       	breq	.+22     	; 0x1fc <vfprintf+0x90>
     1e6:	93 32       	cpi	r25, 0x23	; 35
     1e8:	91 f4       	brne	.+36     	; 0x20e <vfprintf+0xa2>
     1ea:	0e c0       	rjmp	.+28     	; 0x208 <vfprintf+0x9c>
     1ec:	9d 32       	cpi	r25, 0x2D	; 45
     1ee:	49 f0       	breq	.+18     	; 0x202 <vfprintf+0x96>
     1f0:	90 33       	cpi	r25, 0x30	; 48
     1f2:	69 f4       	brne	.+26     	; 0x20e <vfprintf+0xa2>
     1f4:	41 e0       	ldi	r20, 0x01	; 1
     1f6:	24 c0       	rjmp	.+72     	; 0x240 <vfprintf+0xd4>
     1f8:	52 e0       	ldi	r21, 0x02	; 2
     1fa:	f5 2a       	or	r15, r21
     1fc:	84 e0       	ldi	r24, 0x04	; 4
     1fe:	f8 2a       	or	r15, r24
     200:	28 c0       	rjmp	.+80     	; 0x252 <vfprintf+0xe6>
     202:	98 e0       	ldi	r25, 0x08	; 8
     204:	f9 2a       	or	r15, r25
     206:	25 c0       	rjmp	.+74     	; 0x252 <vfprintf+0xe6>
     208:	e0 e1       	ldi	r30, 0x10	; 16
     20a:	fe 2a       	or	r15, r30
     20c:	22 c0       	rjmp	.+68     	; 0x252 <vfprintf+0xe6>
     20e:	f7 fc       	sbrc	r15, 7
     210:	29 c0       	rjmp	.+82     	; 0x264 <vfprintf+0xf8>
     212:	89 2f       	mov	r24, r25
     214:	80 53       	subi	r24, 0x30	; 48
     216:	8a 30       	cpi	r24, 0x0A	; 10
     218:	70 f4       	brcc	.+28     	; 0x236 <vfprintf+0xca>
     21a:	f6 fe       	sbrs	r15, 6
     21c:	05 c0       	rjmp	.+10     	; 0x228 <vfprintf+0xbc>
     21e:	98 9c       	mul	r9, r8
     220:	90 2c       	mov	r9, r0
     222:	11 24       	eor	r1, r1
     224:	98 0e       	add	r9, r24
     226:	15 c0       	rjmp	.+42     	; 0x252 <vfprintf+0xe6>
     228:	e8 9c       	mul	r14, r8
     22a:	e0 2c       	mov	r14, r0
     22c:	11 24       	eor	r1, r1
     22e:	e8 0e       	add	r14, r24
     230:	f0 e2       	ldi	r31, 0x20	; 32
     232:	ff 2a       	or	r15, r31
     234:	0e c0       	rjmp	.+28     	; 0x252 <vfprintf+0xe6>
     236:	9e 32       	cpi	r25, 0x2E	; 46
     238:	29 f4       	brne	.+10     	; 0x244 <vfprintf+0xd8>
     23a:	f6 fc       	sbrc	r15, 6
     23c:	5f c1       	rjmp	.+702    	; 0x4fc <vfprintf+0x390>
     23e:	40 e4       	ldi	r20, 0x40	; 64
     240:	f4 2a       	or	r15, r20
     242:	07 c0       	rjmp	.+14     	; 0x252 <vfprintf+0xe6>
     244:	9c 36       	cpi	r25, 0x6C	; 108
     246:	19 f4       	brne	.+6      	; 0x24e <vfprintf+0xe2>
     248:	50 e8       	ldi	r21, 0x80	; 128
     24a:	f5 2a       	or	r15, r21
     24c:	02 c0       	rjmp	.+4      	; 0x252 <vfprintf+0xe6>
     24e:	98 36       	cpi	r25, 0x68	; 104
     250:	49 f4       	brne	.+18     	; 0x264 <vfprintf+0xf8>
     252:	f2 01       	movw	r30, r4
     254:	23 fd       	sbrc	r18, 3
     256:	95 91       	lpm	r25, Z+
     258:	23 ff       	sbrs	r18, 3
     25a:	91 91       	ld	r25, Z+
     25c:	2f 01       	movw	r4, r30
     25e:	99 23       	and	r25, r25
     260:	09 f0       	breq	.+2      	; 0x264 <vfprintf+0xf8>
     262:	b8 cf       	rjmp	.-144    	; 0x1d4 <vfprintf+0x68>
     264:	89 2f       	mov	r24, r25
     266:	85 54       	subi	r24, 0x45	; 69
     268:	83 30       	cpi	r24, 0x03	; 3
     26a:	18 f0       	brcs	.+6      	; 0x272 <vfprintf+0x106>
     26c:	80 52       	subi	r24, 0x20	; 32
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	38 f4       	brcc	.+14     	; 0x280 <vfprintf+0x114>
     272:	44 e0       	ldi	r20, 0x04	; 4
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	a4 0e       	add	r10, r20
     278:	b5 1e       	adc	r11, r21
     27a:	5f e3       	ldi	r21, 0x3F	; 63
     27c:	59 83       	std	Y+1, r21	; 0x01
     27e:	0f c0       	rjmp	.+30     	; 0x29e <vfprintf+0x132>
     280:	93 36       	cpi	r25, 0x63	; 99
     282:	31 f0       	breq	.+12     	; 0x290 <vfprintf+0x124>
     284:	93 37       	cpi	r25, 0x73	; 115
     286:	79 f0       	breq	.+30     	; 0x2a6 <vfprintf+0x13a>
     288:	93 35       	cpi	r25, 0x53	; 83
     28a:	09 f0       	breq	.+2      	; 0x28e <vfprintf+0x122>
     28c:	52 c0       	rjmp	.+164    	; 0x332 <vfprintf+0x1c6>
     28e:	1f c0       	rjmp	.+62     	; 0x2ce <vfprintf+0x162>
     290:	f5 01       	movw	r30, r10
     292:	80 81       	ld	r24, Z
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	42 e0       	ldi	r20, 0x02	; 2
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	a4 0e       	add	r10, r20
     29c:	b5 1e       	adc	r11, r21
     29e:	61 01       	movw	r12, r2
     2a0:	01 e0       	ldi	r16, 0x01	; 1
     2a2:	10 e0       	ldi	r17, 0x00	; 0
     2a4:	11 c0       	rjmp	.+34     	; 0x2c8 <vfprintf+0x15c>
     2a6:	f5 01       	movw	r30, r10
     2a8:	c0 80       	ld	r12, Z
     2aa:	d1 80       	ldd	r13, Z+1	; 0x01
     2ac:	f6 fc       	sbrc	r15, 6
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <vfprintf+0x14a>
     2b0:	6f ef       	ldi	r22, 0xFF	; 255
     2b2:	7f ef       	ldi	r23, 0xFF	; 255
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <vfprintf+0x14e>
     2b6:	69 2d       	mov	r22, r9
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	42 e0       	ldi	r20, 0x02	; 2
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	a4 0e       	add	r10, r20
     2c0:	b5 1e       	adc	r11, r21
     2c2:	c6 01       	movw	r24, r12
     2c4:	2e d1       	rcall	.+604    	; 0x522 <strnlen>
     2c6:	8c 01       	movw	r16, r24
     2c8:	5f e7       	ldi	r21, 0x7F	; 127
     2ca:	f5 22       	and	r15, r21
     2cc:	13 c0       	rjmp	.+38     	; 0x2f4 <vfprintf+0x188>
     2ce:	f5 01       	movw	r30, r10
     2d0:	c0 80       	ld	r12, Z
     2d2:	d1 80       	ldd	r13, Z+1	; 0x01
     2d4:	f6 fc       	sbrc	r15, 6
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <vfprintf+0x172>
     2d8:	6f ef       	ldi	r22, 0xFF	; 255
     2da:	7f ef       	ldi	r23, 0xFF	; 255
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <vfprintf+0x176>
     2de:	69 2d       	mov	r22, r9
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	42 e0       	ldi	r20, 0x02	; 2
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	a4 0e       	add	r10, r20
     2e8:	b5 1e       	adc	r11, r21
     2ea:	c6 01       	movw	r24, r12
     2ec:	0f d1       	rcall	.+542    	; 0x50c <strnlen_P>
     2ee:	8c 01       	movw	r16, r24
     2f0:	50 e8       	ldi	r21, 0x80	; 128
     2f2:	f5 2a       	or	r15, r21
     2f4:	f3 fe       	sbrs	r15, 3
     2f6:	06 c0       	rjmp	.+12     	; 0x304 <vfprintf+0x198>
     2f8:	18 c0       	rjmp	.+48     	; 0x32a <vfprintf+0x1be>
     2fa:	80 e2       	ldi	r24, 0x20	; 32
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	b3 01       	movw	r22, r6
     300:	1b d1       	rcall	.+566    	; 0x538 <fputc>
     302:	ea 94       	dec	r14
     304:	8e 2d       	mov	r24, r14
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	08 17       	cp	r16, r24
     30a:	19 07       	cpc	r17, r25
     30c:	b0 f3       	brcs	.-20     	; 0x2fa <vfprintf+0x18e>
     30e:	0d c0       	rjmp	.+26     	; 0x32a <vfprintf+0x1be>
     310:	f6 01       	movw	r30, r12
     312:	f7 fc       	sbrc	r15, 7
     314:	85 91       	lpm	r24, Z+
     316:	f7 fe       	sbrs	r15, 7
     318:	81 91       	ld	r24, Z+
     31a:	6f 01       	movw	r12, r30
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	b3 01       	movw	r22, r6
     320:	0b d1       	rcall	.+534    	; 0x538 <fputc>
     322:	e1 10       	cpse	r14, r1
     324:	ea 94       	dec	r14
     326:	01 50       	subi	r16, 0x01	; 1
     328:	10 40       	sbci	r17, 0x00	; 0
     32a:	01 15       	cp	r16, r1
     32c:	11 05       	cpc	r17, r1
     32e:	81 f7       	brne	.-32     	; 0x310 <vfprintf+0x1a4>
     330:	e2 c0       	rjmp	.+452    	; 0x4f6 <vfprintf+0x38a>
     332:	94 36       	cpi	r25, 0x64	; 100
     334:	11 f0       	breq	.+4      	; 0x33a <vfprintf+0x1ce>
     336:	99 36       	cpi	r25, 0x69	; 105
     338:	61 f5       	brne	.+88     	; 0x392 <vfprintf+0x226>
     33a:	f7 fe       	sbrs	r15, 7
     33c:	08 c0       	rjmp	.+16     	; 0x34e <vfprintf+0x1e2>
     33e:	f5 01       	movw	r30, r10
     340:	20 81       	ld	r18, Z
     342:	31 81       	ldd	r19, Z+1	; 0x01
     344:	42 81       	ldd	r20, Z+2	; 0x02
     346:	53 81       	ldd	r21, Z+3	; 0x03
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0a c0       	rjmp	.+20     	; 0x362 <vfprintf+0x1f6>
     34e:	f5 01       	movw	r30, r10
     350:	80 81       	ld	r24, Z
     352:	91 81       	ldd	r25, Z+1	; 0x01
     354:	9c 01       	movw	r18, r24
     356:	44 27       	eor	r20, r20
     358:	37 fd       	sbrc	r19, 7
     35a:	40 95       	com	r20
     35c:	54 2f       	mov	r21, r20
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a8 0e       	add	r10, r24
     364:	b9 1e       	adc	r11, r25
     366:	9f e6       	ldi	r25, 0x6F	; 111
     368:	f9 22       	and	r15, r25
     36a:	57 ff       	sbrs	r21, 7
     36c:	09 c0       	rjmp	.+18     	; 0x380 <vfprintf+0x214>
     36e:	50 95       	com	r21
     370:	40 95       	com	r20
     372:	30 95       	com	r19
     374:	21 95       	neg	r18
     376:	3f 4f       	sbci	r19, 0xFF	; 255
     378:	4f 4f       	sbci	r20, 0xFF	; 255
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	e0 e8       	ldi	r30, 0x80	; 128
     37e:	fe 2a       	or	r15, r30
     380:	ca 01       	movw	r24, r20
     382:	b9 01       	movw	r22, r18
     384:	a1 01       	movw	r20, r2
     386:	2a e0       	ldi	r18, 0x0A	; 10
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	02 d1       	rcall	.+516    	; 0x590 <__ultoa_invert>
     38c:	d8 2e       	mov	r13, r24
     38e:	d2 18       	sub	r13, r2
     390:	3f c0       	rjmp	.+126    	; 0x410 <vfprintf+0x2a4>
     392:	95 37       	cpi	r25, 0x75	; 117
     394:	29 f4       	brne	.+10     	; 0x3a0 <vfprintf+0x234>
     396:	1f 2d       	mov	r17, r15
     398:	1f 7e       	andi	r17, 0xEF	; 239
     39a:	2a e0       	ldi	r18, 0x0A	; 10
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	1d c0       	rjmp	.+58     	; 0x3da <vfprintf+0x26e>
     3a0:	1f 2d       	mov	r17, r15
     3a2:	19 7f       	andi	r17, 0xF9	; 249
     3a4:	9f 36       	cpi	r25, 0x6F	; 111
     3a6:	61 f0       	breq	.+24     	; 0x3c0 <vfprintf+0x254>
     3a8:	90 37       	cpi	r25, 0x70	; 112
     3aa:	20 f4       	brcc	.+8      	; 0x3b4 <vfprintf+0x248>
     3ac:	98 35       	cpi	r25, 0x58	; 88
     3ae:	09 f0       	breq	.+2      	; 0x3b2 <vfprintf+0x246>
     3b0:	a5 c0       	rjmp	.+330    	; 0x4fc <vfprintf+0x390>
     3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <vfprintf+0x266>
     3b4:	90 37       	cpi	r25, 0x70	; 112
     3b6:	39 f0       	breq	.+14     	; 0x3c6 <vfprintf+0x25a>
     3b8:	98 37       	cpi	r25, 0x78	; 120
     3ba:	09 f0       	breq	.+2      	; 0x3be <vfprintf+0x252>
     3bc:	9f c0       	rjmp	.+318    	; 0x4fc <vfprintf+0x390>
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <vfprintf+0x25c>
     3c0:	28 e0       	ldi	r18, 0x08	; 8
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	0a c0       	rjmp	.+20     	; 0x3da <vfprintf+0x26e>
     3c6:	10 61       	ori	r17, 0x10	; 16
     3c8:	14 fd       	sbrc	r17, 4
     3ca:	14 60       	ori	r17, 0x04	; 4
     3cc:	20 e1       	ldi	r18, 0x10	; 16
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <vfprintf+0x26e>
     3d2:	14 fd       	sbrc	r17, 4
     3d4:	16 60       	ori	r17, 0x06	; 6
     3d6:	20 e1       	ldi	r18, 0x10	; 16
     3d8:	32 e0       	ldi	r19, 0x02	; 2
     3da:	17 ff       	sbrs	r17, 7
     3dc:	08 c0       	rjmp	.+16     	; 0x3ee <vfprintf+0x282>
     3de:	f5 01       	movw	r30, r10
     3e0:	60 81       	ld	r22, Z
     3e2:	71 81       	ldd	r23, Z+1	; 0x01
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	93 81       	ldd	r25, Z+3	; 0x03
     3e8:	44 e0       	ldi	r20, 0x04	; 4
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	08 c0       	rjmp	.+16     	; 0x3fe <vfprintf+0x292>
     3ee:	f5 01       	movw	r30, r10
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	bc 01       	movw	r22, r24
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	42 e0       	ldi	r20, 0x02	; 2
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	a4 0e       	add	r10, r20
     400:	b5 1e       	adc	r11, r21
     402:	a1 01       	movw	r20, r2
     404:	c5 d0       	rcall	.+394    	; 0x590 <__ultoa_invert>
     406:	d8 2e       	mov	r13, r24
     408:	d2 18       	sub	r13, r2
     40a:	8f e7       	ldi	r24, 0x7F	; 127
     40c:	f8 2e       	mov	r15, r24
     40e:	f1 22       	and	r15, r17
     410:	f6 fe       	sbrs	r15, 6
     412:	0b c0       	rjmp	.+22     	; 0x42a <vfprintf+0x2be>
     414:	5e ef       	ldi	r21, 0xFE	; 254
     416:	f5 22       	and	r15, r21
     418:	d9 14       	cp	r13, r9
     41a:	38 f4       	brcc	.+14     	; 0x42a <vfprintf+0x2be>
     41c:	f4 fe       	sbrs	r15, 4
     41e:	07 c0       	rjmp	.+14     	; 0x42e <vfprintf+0x2c2>
     420:	f2 fc       	sbrc	r15, 2
     422:	05 c0       	rjmp	.+10     	; 0x42e <vfprintf+0x2c2>
     424:	8f ee       	ldi	r24, 0xEF	; 239
     426:	f8 22       	and	r15, r24
     428:	02 c0       	rjmp	.+4      	; 0x42e <vfprintf+0x2c2>
     42a:	1d 2d       	mov	r17, r13
     42c:	01 c0       	rjmp	.+2      	; 0x430 <vfprintf+0x2c4>
     42e:	19 2d       	mov	r17, r9
     430:	f4 fe       	sbrs	r15, 4
     432:	0d c0       	rjmp	.+26     	; 0x44e <vfprintf+0x2e2>
     434:	fe 01       	movw	r30, r28
     436:	ed 0d       	add	r30, r13
     438:	f1 1d       	adc	r31, r1
     43a:	80 81       	ld	r24, Z
     43c:	80 33       	cpi	r24, 0x30	; 48
     43e:	19 f4       	brne	.+6      	; 0x446 <vfprintf+0x2da>
     440:	99 ee       	ldi	r25, 0xE9	; 233
     442:	f9 22       	and	r15, r25
     444:	08 c0       	rjmp	.+16     	; 0x456 <vfprintf+0x2ea>
     446:	1f 5f       	subi	r17, 0xFF	; 255
     448:	f2 fe       	sbrs	r15, 2
     44a:	05 c0       	rjmp	.+10     	; 0x456 <vfprintf+0x2ea>
     44c:	03 c0       	rjmp	.+6      	; 0x454 <vfprintf+0x2e8>
     44e:	8f 2d       	mov	r24, r15
     450:	86 78       	andi	r24, 0x86	; 134
     452:	09 f0       	breq	.+2      	; 0x456 <vfprintf+0x2ea>
     454:	1f 5f       	subi	r17, 0xFF	; 255
     456:	0f 2d       	mov	r16, r15
     458:	f3 fc       	sbrc	r15, 3
     45a:	13 c0       	rjmp	.+38     	; 0x482 <vfprintf+0x316>
     45c:	f0 fe       	sbrs	r15, 0
     45e:	0e c0       	rjmp	.+28     	; 0x47c <vfprintf+0x310>
     460:	1e 15       	cp	r17, r14
     462:	10 f0       	brcs	.+4      	; 0x468 <vfprintf+0x2fc>
     464:	9d 2c       	mov	r9, r13
     466:	0a c0       	rjmp	.+20     	; 0x47c <vfprintf+0x310>
     468:	9d 2c       	mov	r9, r13
     46a:	9e 0c       	add	r9, r14
     46c:	91 1a       	sub	r9, r17
     46e:	1e 2d       	mov	r17, r14
     470:	05 c0       	rjmp	.+10     	; 0x47c <vfprintf+0x310>
     472:	80 e2       	ldi	r24, 0x20	; 32
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	b3 01       	movw	r22, r6
     478:	5f d0       	rcall	.+190    	; 0x538 <fputc>
     47a:	1f 5f       	subi	r17, 0xFF	; 255
     47c:	1e 15       	cp	r17, r14
     47e:	c8 f3       	brcs	.-14     	; 0x472 <vfprintf+0x306>
     480:	04 c0       	rjmp	.+8      	; 0x48a <vfprintf+0x31e>
     482:	1e 15       	cp	r17, r14
     484:	10 f4       	brcc	.+4      	; 0x48a <vfprintf+0x31e>
     486:	e1 1a       	sub	r14, r17
     488:	01 c0       	rjmp	.+2      	; 0x48c <vfprintf+0x320>
     48a:	ee 24       	eor	r14, r14
     48c:	04 ff       	sbrs	r16, 4
     48e:	0e c0       	rjmp	.+28     	; 0x4ac <vfprintf+0x340>
     490:	80 e3       	ldi	r24, 0x30	; 48
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	b3 01       	movw	r22, r6
     496:	50 d0       	rcall	.+160    	; 0x538 <fputc>
     498:	02 ff       	sbrs	r16, 2
     49a:	1b c0       	rjmp	.+54     	; 0x4d2 <vfprintf+0x366>
     49c:	01 fd       	sbrc	r16, 1
     49e:	03 c0       	rjmp	.+6      	; 0x4a6 <vfprintf+0x33a>
     4a0:	88 e7       	ldi	r24, 0x78	; 120
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <vfprintf+0x356>
     4a6:	88 e5       	ldi	r24, 0x58	; 88
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <vfprintf+0x356>
     4ac:	80 2f       	mov	r24, r16
     4ae:	86 78       	andi	r24, 0x86	; 134
     4b0:	81 f0       	breq	.+32     	; 0x4d2 <vfprintf+0x366>
     4b2:	01 ff       	sbrs	r16, 1
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <vfprintf+0x34e>
     4b6:	8b e2       	ldi	r24, 0x2B	; 43
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <vfprintf+0x350>
     4ba:	80 e2       	ldi	r24, 0x20	; 32
     4bc:	f7 fc       	sbrc	r15, 7
     4be:	8d e2       	ldi	r24, 0x2D	; 45
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	b3 01       	movw	r22, r6
     4c4:	39 d0       	rcall	.+114    	; 0x538 <fputc>
     4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <vfprintf+0x366>
     4c8:	80 e3       	ldi	r24, 0x30	; 48
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	b3 01       	movw	r22, r6
     4ce:	34 d0       	rcall	.+104    	; 0x538 <fputc>
     4d0:	9a 94       	dec	r9
     4d2:	d9 14       	cp	r13, r9
     4d4:	c8 f3       	brcs	.-14     	; 0x4c8 <vfprintf+0x35c>
     4d6:	da 94       	dec	r13
     4d8:	f1 01       	movw	r30, r2
     4da:	ed 0d       	add	r30, r13
     4dc:	f1 1d       	adc	r31, r1
     4de:	80 81       	ld	r24, Z
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	b3 01       	movw	r22, r6
     4e4:	29 d0       	rcall	.+82     	; 0x538 <fputc>
     4e6:	dd 20       	and	r13, r13
     4e8:	b1 f7       	brne	.-20     	; 0x4d6 <vfprintf+0x36a>
     4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <vfprintf+0x38a>
     4ec:	80 e2       	ldi	r24, 0x20	; 32
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	b3 01       	movw	r22, r6
     4f2:	22 d0       	rcall	.+68     	; 0x538 <fputc>
     4f4:	ea 94       	dec	r14
     4f6:	ee 20       	and	r14, r14
     4f8:	c9 f7       	brne	.-14     	; 0x4ec <vfprintf+0x380>
     4fa:	50 ce       	rjmp	.-864    	; 0x19c <vfprintf+0x30>
     4fc:	f3 01       	movw	r30, r6
     4fe:	66 81       	ldd	r22, Z+6	; 0x06
     500:	77 81       	ldd	r23, Z+7	; 0x07
     502:	cb 01       	movw	r24, r22
     504:	2b 96       	adiw	r28, 0x0b	; 11
     506:	e2 e1       	ldi	r30, 0x12	; 18
     508:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__>

0000050c <strnlen_P>:
     50c:	fc 01       	movw	r30, r24
     50e:	05 90       	lpm	r0, Z+
     510:	61 50       	subi	r22, 0x01	; 1
     512:	70 40       	sbci	r23, 0x00	; 0
     514:	01 10       	cpse	r0, r1
     516:	d8 f7       	brcc	.-10     	; 0x50e <strnlen_P+0x2>
     518:	80 95       	com	r24
     51a:	90 95       	com	r25
     51c:	8e 0f       	add	r24, r30
     51e:	9f 1f       	adc	r25, r31
     520:	08 95       	ret

00000522 <strnlen>:
     522:	fc 01       	movw	r30, r24
     524:	61 50       	subi	r22, 0x01	; 1
     526:	70 40       	sbci	r23, 0x00	; 0
     528:	01 90       	ld	r0, Z+
     52a:	01 10       	cpse	r0, r1
     52c:	d8 f7       	brcc	.-10     	; 0x524 <strnlen+0x2>
     52e:	80 95       	com	r24
     530:	90 95       	com	r25
     532:	8e 0f       	add	r24, r30
     534:	9f 1f       	adc	r25, r31
     536:	08 95       	ret

00000538 <fputc>:
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	8c 01       	movw	r16, r24
     542:	eb 01       	movw	r28, r22
     544:	8b 81       	ldd	r24, Y+3	; 0x03
     546:	81 ff       	sbrs	r24, 1
     548:	1b c0       	rjmp	.+54     	; 0x580 <fputc+0x48>
     54a:	82 ff       	sbrs	r24, 2
     54c:	0d c0       	rjmp	.+26     	; 0x568 <fputc+0x30>
     54e:	2e 81       	ldd	r18, Y+6	; 0x06
     550:	3f 81       	ldd	r19, Y+7	; 0x07
     552:	8c 81       	ldd	r24, Y+4	; 0x04
     554:	9d 81       	ldd	r25, Y+5	; 0x05
     556:	28 17       	cp	r18, r24
     558:	39 07       	cpc	r19, r25
     55a:	64 f4       	brge	.+24     	; 0x574 <fputc+0x3c>
     55c:	e8 81       	ld	r30, Y
     55e:	f9 81       	ldd	r31, Y+1	; 0x01
     560:	01 93       	st	Z+, r16
     562:	f9 83       	std	Y+1, r31	; 0x01
     564:	e8 83       	st	Y, r30
     566:	06 c0       	rjmp	.+12     	; 0x574 <fputc+0x3c>
     568:	e8 85       	ldd	r30, Y+8	; 0x08
     56a:	f9 85       	ldd	r31, Y+9	; 0x09
     56c:	80 2f       	mov	r24, r16
     56e:	09 95       	icall
     570:	89 2b       	or	r24, r25
     572:	31 f4       	brne	.+12     	; 0x580 <fputc+0x48>
     574:	8e 81       	ldd	r24, Y+6	; 0x06
     576:	9f 81       	ldd	r25, Y+7	; 0x07
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	9f 83       	std	Y+7, r25	; 0x07
     57c:	8e 83       	std	Y+6, r24	; 0x06
     57e:	02 c0       	rjmp	.+4      	; 0x584 <fputc+0x4c>
     580:	0f ef       	ldi	r16, 0xFF	; 255
     582:	1f ef       	ldi	r17, 0xFF	; 255
     584:	c8 01       	movw	r24, r16
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <__ultoa_invert>:
     590:	fa 01       	movw	r30, r20
     592:	aa 27       	eor	r26, r26
     594:	28 30       	cpi	r18, 0x08	; 8
     596:	51 f1       	breq	.+84     	; 0x5ec <__ultoa_invert+0x5c>
     598:	20 31       	cpi	r18, 0x10	; 16
     59a:	81 f1       	breq	.+96     	; 0x5fc <__ultoa_invert+0x6c>
     59c:	e8 94       	clt
     59e:	6f 93       	push	r22
     5a0:	6e 7f       	andi	r22, 0xFE	; 254
     5a2:	6e 5f       	subi	r22, 0xFE	; 254
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	8f 4f       	sbci	r24, 0xFF	; 255
     5a8:	9f 4f       	sbci	r25, 0xFF	; 255
     5aa:	af 4f       	sbci	r26, 0xFF	; 255
     5ac:	b1 e0       	ldi	r27, 0x01	; 1
     5ae:	3e d0       	rcall	.+124    	; 0x62c <__ultoa_invert+0x9c>
     5b0:	b4 e0       	ldi	r27, 0x04	; 4
     5b2:	3c d0       	rcall	.+120    	; 0x62c <__ultoa_invert+0x9c>
     5b4:	67 0f       	add	r22, r23
     5b6:	78 1f       	adc	r23, r24
     5b8:	89 1f       	adc	r24, r25
     5ba:	9a 1f       	adc	r25, r26
     5bc:	a1 1d       	adc	r26, r1
     5be:	68 0f       	add	r22, r24
     5c0:	79 1f       	adc	r23, r25
     5c2:	8a 1f       	adc	r24, r26
     5c4:	91 1d       	adc	r25, r1
     5c6:	a1 1d       	adc	r26, r1
     5c8:	6a 0f       	add	r22, r26
     5ca:	71 1d       	adc	r23, r1
     5cc:	81 1d       	adc	r24, r1
     5ce:	91 1d       	adc	r25, r1
     5d0:	a1 1d       	adc	r26, r1
     5d2:	20 d0       	rcall	.+64     	; 0x614 <__ultoa_invert+0x84>
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <__ultoa_invert+0x48>
     5d6:	68 94       	set
     5d8:	3f 91       	pop	r19
     5da:	2a e0       	ldi	r18, 0x0A	; 10
     5dc:	26 9f       	mul	r18, r22
     5de:	11 24       	eor	r1, r1
     5e0:	30 19       	sub	r19, r0
     5e2:	30 5d       	subi	r19, 0xD0	; 208
     5e4:	31 93       	st	Z+, r19
     5e6:	de f6       	brtc	.-74     	; 0x59e <__ultoa_invert+0xe>
     5e8:	cf 01       	movw	r24, r30
     5ea:	08 95       	ret
     5ec:	46 2f       	mov	r20, r22
     5ee:	47 70       	andi	r20, 0x07	; 7
     5f0:	40 5d       	subi	r20, 0xD0	; 208
     5f2:	41 93       	st	Z+, r20
     5f4:	b3 e0       	ldi	r27, 0x03	; 3
     5f6:	0f d0       	rcall	.+30     	; 0x616 <__ultoa_invert+0x86>
     5f8:	c9 f7       	brne	.-14     	; 0x5ec <__ultoa_invert+0x5c>
     5fa:	f6 cf       	rjmp	.-20     	; 0x5e8 <__ultoa_invert+0x58>
     5fc:	46 2f       	mov	r20, r22
     5fe:	4f 70       	andi	r20, 0x0F	; 15
     600:	40 5d       	subi	r20, 0xD0	; 208
     602:	4a 33       	cpi	r20, 0x3A	; 58
     604:	18 f0       	brcs	.+6      	; 0x60c <__ultoa_invert+0x7c>
     606:	49 5d       	subi	r20, 0xD9	; 217
     608:	31 fd       	sbrc	r19, 1
     60a:	40 52       	subi	r20, 0x20	; 32
     60c:	41 93       	st	Z+, r20
     60e:	02 d0       	rcall	.+4      	; 0x614 <__ultoa_invert+0x84>
     610:	a9 f7       	brne	.-22     	; 0x5fc <__ultoa_invert+0x6c>
     612:	ea cf       	rjmp	.-44     	; 0x5e8 <__ultoa_invert+0x58>
     614:	b4 e0       	ldi	r27, 0x04	; 4
     616:	a6 95       	lsr	r26
     618:	97 95       	ror	r25
     61a:	87 95       	ror	r24
     61c:	77 95       	ror	r23
     61e:	67 95       	ror	r22
     620:	ba 95       	dec	r27
     622:	c9 f7       	brne	.-14     	; 0x616 <__ultoa_invert+0x86>
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	61 05       	cpc	r22, r1
     628:	71 05       	cpc	r23, r1
     62a:	08 95       	ret
     62c:	9b 01       	movw	r18, r22
     62e:	ac 01       	movw	r20, r24
     630:	0a 2e       	mov	r0, r26
     632:	06 94       	lsr	r0
     634:	57 95       	ror	r21
     636:	47 95       	ror	r20
     638:	37 95       	ror	r19
     63a:	27 95       	ror	r18
     63c:	ba 95       	dec	r27
     63e:	c9 f7       	brne	.-14     	; 0x632 <__ultoa_invert+0xa2>
     640:	62 0f       	add	r22, r18
     642:	73 1f       	adc	r23, r19
     644:	84 1f       	adc	r24, r20
     646:	95 1f       	adc	r25, r21
     648:	a0 1d       	adc	r26, r0
     64a:	08 95       	ret

0000064c <_ZL9printTimev>:
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
}

static void printTime()
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	df 93       	push	r29
     652:	cf 93       	push	r28
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	2b 97       	sbiw	r28, 0x0b	; 11
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
{
	ts time;
	DS3234_get(DS3234_SS_PIN,&time);
     664:	8a e0       	ldi	r24, 0x0A	; 10
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	cb d1       	rcall	.+918    	; 0xa04 <_Z10DS3234_gethP2ts>
     66e:	8d b7       	in	r24, 0x3d	; 61
	sprintf(MessageBuffer,"%02u/%02u/%4d %02d:%02d:%02d\t",time.mon,time.mday,time.year,time.hour,time.min,time.sec);
     670:	9e b7       	in	r25, 0x3e	; 62
     672:	40 97       	sbiw	r24, 0x10	; 16
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	9e bf       	out	0x3e, r25	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	8d bf       	out	0x3d, r24	; 61
     67e:	ed b7       	in	r30, 0x3d	; 61
     680:	fe b7       	in	r31, 0x3e	; 62
     682:	31 96       	adiw	r30, 0x01	; 1
     684:	0b e3       	ldi	r16, 0x3B	; 59
     686:	12 e0       	ldi	r17, 0x02	; 2
     688:	ad b7       	in	r26, 0x3d	; 61
     68a:	be b7       	in	r27, 0x3e	; 62
     68c:	12 96       	adiw	r26, 0x02	; 2
     68e:	1c 93       	st	X, r17
     690:	0e 93       	st	-X, r16
     692:	11 97       	sbiw	r26, 0x01	; 1
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	93 83       	std	Z+3, r25	; 0x03
     69a:	82 83       	std	Z+2, r24	; 0x02
     69c:	8d 81       	ldd	r24, Y+5	; 0x05
     69e:	84 83       	std	Z+4, r24	; 0x04
     6a0:	15 82       	std	Z+5, r1	; 0x05
     6a2:	8c 81       	ldd	r24, Y+4	; 0x04
     6a4:	86 83       	std	Z+6, r24	; 0x06
     6a6:	17 82       	std	Z+7, r1	; 0x07
     6a8:	8e 81       	ldd	r24, Y+6	; 0x06
     6aa:	9f 81       	ldd	r25, Y+7	; 0x07
     6ac:	91 87       	std	Z+9, r25	; 0x09
     6ae:	80 87       	std	Z+8, r24	; 0x08
     6b0:	8b 81       	ldd	r24, Y+3	; 0x03
     6b2:	82 87       	std	Z+10, r24	; 0x0a
     6b4:	13 86       	std	Z+11, r1	; 0x0b
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	84 87       	std	Z+12, r24	; 0x0c
     6ba:	15 86       	std	Z+13, r1	; 0x0d
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	86 87       	std	Z+14, r24	; 0x0e
     6c0:	17 86       	std	Z+15, r1	; 0x0f
     6c2:	31 dd       	rcall	.-1438   	; 0x126 <sprintf>
     6c4:	8d b7       	in	r24, 0x3d	; 61
     6c6:	9e b7       	in	r25, 0x3e	; 62
	Serial.println(MessageBuffer);
     6c8:	40 96       	adiw	r24, 0x10	; 16
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	9e bf       	out	0x3e, r25	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	8d bf       	out	0x3d, r24	; 61
     6d4:	86 e1       	ldi	r24, 0x16	; 22
     6d6:	96 e0       	ldi	r25, 0x06	; 6
     6d8:	b8 01       	movw	r22, r16
     6da:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print7printlnEPKc>
     6de:	2b 96       	adiw	r28, 0x0b	; 11
     6e0:	0f b6       	in	r0, 0x3f	; 63
}
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	cf 91       	pop	r28
     6ec:	df 91       	pop	r29
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <_ZL9openValvev>:
	printTime();
	sprintf(MessageBuffer,"Valve:\tClosed\n");
	return printSerial();
}

static uint8_t openValve()
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
{
	digitalWrite(VALVE_ENABLE_PIN,1);
     6f8:	87 e0       	ldi	r24, 0x07	; 7
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,1);
     700:	88 e0       	ldi	r24, 0x08	; 8
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     708:	89 e0       	ldi	r24, 0x09	; 9
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	delay(5000);
     710:	68 e8       	ldi	r22, 0x88	; 136
     712:	73 e1       	ldi	r23, 0x13	; 19
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 59 10 	call	0x20b2	; 0x20b2 <delay>
	Serial.println(MessageBuffer);
}

static void setValvePos(uint8_t pos)
{
	EEPROM.write(0,pos);
     71c:	84 e4       	ldi	r24, 0x44	; 68
     71e:	95 e0       	ldi	r25, 0x05	; 5
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN11EEPROMClass5writeEih>
	digitalWrite(VALVE_ENABLE_PIN,1);
	digitalWrite(VALVE_CONTROL_1_PIN,1);
	digitalWrite(VALVE_CONTROL_2_PIN,0);
	delay(5000);
	setValvePos(1);
	digitalWrite(VALVE_ENABLE_PIN,0);
     72a:	87 e0       	ldi	r24, 0x07	; 7
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     732:	88 e0       	ldi	r24, 0x08	; 8
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	printTime();
     73a:	88 df       	rcall	.-240    	; 0x64c <_ZL9printTimev>
     73c:	0b e3       	ldi	r16, 0x3B	; 59
	sprintf(MessageBuffer,"Valve:\tOpened\n");
     73e:	12 e0       	ldi	r17, 0x02	; 2
     740:	c8 01       	movw	r24, r16
     742:	6e e1       	ldi	r22, 0x1E	; 30
     744:	71 e0       	ldi	r23, 0x01	; 1
     746:	e8 dc       	rcall	.-1584   	; 0x118 <strcpy>
     748:	86 e1       	ldi	r24, 0x16	; 22
     74a:	96 e0       	ldi	r25, 0x06	; 6
uint8_t leak, interruptNo;

// Define Program Functions
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     74c:	b8 01       	movw	r22, r16
     74e:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN5Print5printEPKc>
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
	digitalWrite(VALVE_ENABLE_PIN,0);
	digitalWrite(VALVE_CONTROL_1_PIN,0);
	printTime();
	sprintf(MessageBuffer,"Valve:\tOpened\n");
	return printSerial();
}
     756:	08 95       	ret

00000758 <_ZL11resetSystemv>:
static uint8_t clearLog()					// TODO: rewrite pull old function from wixel
{

}

static uint8_t resetSystem()
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
{
	openValve();
     75c:	cb df       	rcall	.-106    	; 0x6f4 <_ZL9openValvev>
     75e:	04 e4       	ldi	r16, 0x44	; 68
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     760:	15 e0       	ldi	r17, 0x05	; 5
     762:	c8 01       	movw	r24, r16
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN11EEPROMClass5writeEih>
     76e:	c8 01       	movw	r24, r16

static void setDayGallons(uint16_t DayGallons)
{
	uint8_t splitByte;
	splitByte = DayGallons/256;
	EEPROM.write(3,splitByte);
     770:	63 e0       	ldi	r22, 0x03	; 3
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN11EEPROMClass5writeEih>
     77a:	c8 01       	movw	r24, r16
	DayGallons -= (uint32_t)(splitByte)*256;
	splitByte = DayGallons;
	EEPROM.write(4,DayGallons);
     77c:	64 e0       	ldi	r22, 0x04	; 4
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN11EEPROMClass5writeEih>
     786:	c8 01       	movw	r24, r16
	return EEPROM.read(5);
}

static void setConsecGallons(uint8_t gals)
{
	EEPROM.write(5,gals);
     788:	65 e0       	ldi	r22, 0x05	; 5
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN11EEPROMClass5writeEih>
     792:	5c df       	rcall	.-328    	; 0x64c <_ZL9printTimev>
	openValve();
	clearLog();
	setLeakCondition(0);
	setDayGallons(0);
	setConsecGallons(0);
	printTime();
     794:	0b e3       	ldi	r16, 0x3B	; 59
     796:	12 e0       	ldi	r17, 0x02	; 2
	sprintf(MessageBuffer,"System Reset\n");
     798:	c8 01       	movw	r24, r16
     79a:	6d e2       	ldi	r22, 0x2D	; 45
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	bc dc       	rcall	.-1672   	; 0x118 <strcpy>
     7a0:	86 e1       	ldi	r24, 0x16	; 22
     7a2:	96 e0       	ldi	r25, 0x06	; 6
     7a4:	b8 01       	movw	r22, r16
uint8_t leak, interruptNo;

// Define Program Functions
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     7a6:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN5Print5printEPKc>
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	08 95       	ret

000007b0 <_ZL10closeValvev>:
static uint8_t wasLeakDetected()
{
	return EEPROM.read(1);
}

static uint8_t closeValve()
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
{
	digitalWrite(VALVE_ENABLE_PIN,1);
     7b4:	87 e0       	ldi	r24, 0x07	; 7
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,1);
     7c4:	89 e0       	ldi	r24, 0x09	; 9
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	delay(5000);
     7cc:	68 e8       	ldi	r22, 0x88	; 136
     7ce:	73 e1       	ldi	r23, 0x13	; 19
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <delay>
	Serial.println(MessageBuffer);
}

static void setValvePos(uint8_t pos)
{
	EEPROM.write(0,pos);
     7d8:	84 e4       	ldi	r24, 0x44	; 68
     7da:	95 e0       	ldi	r25, 0x05	; 5
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN11EEPROMClass5writeEih>
	digitalWrite(VALVE_ENABLE_PIN,1);
	digitalWrite(VALVE_CONTROL_1_PIN,0);
	digitalWrite(VALVE_CONTROL_2_PIN,1);
	delay(5000);
	setValvePos(0);
	digitalWrite(VALVE_ENABLE_PIN,0);
     7e6:	87 e0       	ldi	r24, 0x07	; 7
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     7ee:	89 e0       	ldi	r24, 0x09	; 9
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	printTime();
     7f6:	2a df       	rcall	.-428    	; 0x64c <_ZL9printTimev>
     7f8:	0b e3       	ldi	r16, 0x3B	; 59
	sprintf(MessageBuffer,"Valve:\tClosed\n");
     7fa:	12 e0       	ldi	r17, 0x02	; 2
     7fc:	c8 01       	movw	r24, r16
     7fe:	6b e3       	ldi	r22, 0x3B	; 59
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	8a dc       	rcall	.-1772   	; 0x118 <strcpy>
     804:	86 e1       	ldi	r24, 0x16	; 22
     806:	96 e0       	ldi	r25, 0x06	; 6
uint8_t leak, interruptNo;

// Define Program Functions
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     808:	b8 01       	movw	r22, r16
     80a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN5Print5printEPKc>
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
	digitalWrite(VALVE_ENABLE_PIN,0);
	digitalWrite(VALVE_CONTROL_2_PIN,0);
	printTime();
	sprintf(MessageBuffer,"Valve:\tClosed\n");
	return printSerial();
}
     812:	08 95       	ret

00000814 <_ZL10reportLeakv>:
	*/
}

static uint8_t reportLeak()
{
	printTime();
     814:	1b df       	rcall	.-458    	; 0x64c <_ZL9printTimev>
     816:	84 e4       	ldi	r24, 0x44	; 68
	return EEPROM.read(0);
}

static uint8_t wasLeakDetected()
{
	return EEPROM.read(1);
     818:	95 e0       	ldi	r25, 0x05	; 5
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN11EEPROMClass4readEi>
     822:	81 30       	cpi	r24, 0x01	; 1
}

static uint8_t reportLeak()
{
	printTime();
	switch (wasLeakDetected())
     824:	51 f0       	breq	.+20     	; 0x83a <_ZL10reportLeakv+0x26>
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	18 f0       	brcs	.+6      	; 0x830 <_ZL10reportLeakv+0x1c>
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	81 f4       	brne	.+32     	; 0x84e <_ZL10reportLeakv+0x3a>
     82e:	0a c0       	rjmp	.+20     	; 0x844 <_ZL10reportLeakv+0x30>
     830:	8b e3       	ldi	r24, 0x3B	; 59
	{
		case 0:
			sprintf(MessageBuffer,"Leak:\tNo leaks detected.\n");
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	6a e4       	ldi	r22, 0x4A	; 74
     836:	71 e0       	ldi	r23, 0x01	; 1
     838:	09 c0       	rjmp	.+18     	; 0x84c <_ZL10reportLeakv+0x38>
     83a:	8b e3       	ldi	r24, 0x3B	; 59
			break;
		case 1:
			sprintf(MessageBuffer,"Leak:\tPossible leak detected: More than 1000 gallons used in a 24 hour period.\n");
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	64 e6       	ldi	r22, 0x64	; 100
     840:	71 e0       	ldi	r23, 0x01	; 1
     842:	04 c0       	rjmp	.+8      	; 0x84c <_ZL10reportLeakv+0x38>
     844:	8b e3       	ldi	r24, 0x3B	; 59
			break;
		case 2:
			sprintf(MessageBuffer,"Leak:\tPossible leak detected: Flow rate >=1 GMP for 120 consecutive minutes.\n");
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	64 eb       	ldi	r22, 0xB4	; 180
     84a:	71 e0       	ldi	r23, 0x01	; 1
     84c:	65 dc       	rcall	.-1846   	; 0x118 <strcpy>
     84e:	86 e1       	ldi	r24, 0x16	; 22
     850:	96 e0       	ldi	r25, 0x06	; 6
uint8_t leak, interruptNo;

// Define Program Functions
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     852:	6b e3       	ldi	r22, 0x3B	; 59
     854:	72 e0       	ldi	r23, 0x02	; 2
     856:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <_ZN5Print5printEPKc>

0000085a <loop>:
}

void loop()
{
	// TODO: fix logical control
	if (digitalRead(RST_PIN))
     85a:	86 e0       	ldi	r24, 0x06	; 6
     85c:	0e 94 80 11 	call	0x2300	; 0x2300 <digitalRead>
     860:	89 2b       	or	r24, r25
     862:	09 f0       	breq	.+2      	; 0x866 <loop+0xc>
	{
		// manually reset system if INPUT 1 is held
		resetSystem();
     864:	79 df       	rcall	.-270    	; 0x758 <_ZL11resetSystemv>
     866:	82 e0       	ldi	r24, 0x02	; 2
	}

	if (digitalRead(RADIO_PIN))
     868:	0e 94 80 11 	call	0x2300	; 0x2300 <digitalRead>
     86c:	89 2b       	or	r24, r25
     86e:	c1 f5       	brne	.+112    	; 0x8e0 <loop+0x86>
     870:	83 e0       	ldi	r24, 0x03	; 3
		reportLog();
		reportLeak();
		clearLog();
	}

	else if (digitalRead(METER_PIN))
     872:	0e 94 80 11 	call	0x2300	; 0x2300 <digitalRead>
     876:	89 2b       	or	r24, r25
     878:	09 f4       	brne	.+2      	; 0x87c <loop+0x22>
     87a:	5d c0       	rjmp	.+186    	; 0x936 <__stack+0x37>
     87c:	84 e4       	ldi	r24, 0x44	; 68
	return EEPROM.read(0);
}

static uint8_t wasLeakDetected()
{
	return EEPROM.read(1);
     87e:	95 e0       	ldi	r25, 0x05	; 5
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN11EEPROMClass4readEi>
     888:	88 23       	and	r24, r24

	else if (digitalRead(METER_PIN))
	{
		logGallon();
		// check if a leak was previously detected
		if (wasLeakDetected()==0)
     88a:	09 f0       	breq	.+2      	; 0x88e <loop+0x34>
     88c:	54 c0       	rjmp	.+168    	; 0x936 <__stack+0x37>
     88e:	40 e0       	ldi	r20, 0x00	; 0
		{
			// if a new leak is detected, log it, report it, and turn off the valve
			leak = checkForLeaks();
     890:	40 93 3a 02 	sts	0x023A, r20
     894:	44 23       	and	r20, r20
			if (leak!=0)
     896:	09 f4       	brne	.+2      	; 0x89a <loop+0x40>
     898:	4e c0       	rjmp	.+156    	; 0x936 <__stack+0x37>
     89a:	84 e4       	ldi	r24, 0x44	; 68
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     89c:	95 e0       	ldi	r25, 0x05	; 5
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN11EEPROMClass5writeEih>
     8a6:	84 df       	rcall	.-248    	; 0x7b0 <_ZL10closeValvev>
			// if a new leak is detected, log it, report it, and turn off the valve
			leak = checkForLeaks();
			if (leak!=0)
			{
				setLeakCondition(leak);
				closeValve();
     8a8:	1b c0       	rjmp	.+54     	; 0x8e0 <loop+0x86>
     8aa:	86 e1       	ldi	r24, 0x16	; 22
     8ac:	96 e0       	ldi	r25, 0x06	; 6

static void checkRadioCommands()
{
	while(Serial.available())
	{
		processRadio(Serial.read());
     8ae:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN14HardwareSerial4readEv>
     8b2:	8c 36       	cpi	r24, 0x6C	; 108
     8b4:	a9 f0       	breq	.+42     	; 0x8e0 <loop+0x86>
	return printSerial();
}

static void processRadio(uint8_t Signal)
{
	switch (Signal)
     8b6:	8d 36       	cpi	r24, 0x6D	; 109
     8b8:	30 f4       	brcc	.+12     	; 0x8c6 <loop+0x6c>
     8ba:	83 36       	cpi	r24, 0x63	; 99
     8bc:	69 f0       	breq	.+26     	; 0x8d8 <loop+0x7e>
     8be:	8b 36       	cpi	r24, 0x6B	; 107
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <loop+0x6a>
     8c2:	39 c0       	rjmp	.+114    	; 0x936 <__stack+0x37>
     8c4:	25 c0       	rjmp	.+74     	; 0x910 <__stack+0x11>
     8c6:	82 37       	cpi	r24, 0x72	; 114
     8c8:	29 f0       	breq	.+10     	; 0x8d4 <loop+0x7a>
     8ca:	86 37       	cpi	r24, 0x76	; 118
     8cc:	59 f0       	breq	.+22     	; 0x8e4 <loop+0x8a>
     8ce:	8f 36       	cpi	r24, 0x6F	; 111
     8d0:	91 f5       	brne	.+100    	; 0x936 <__stack+0x37>
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <loop+0x82>
     8d4:	41 df       	rcall	.-382    	; 0x758 <_ZL11resetSystemv>
     8d6:	2f c0       	rjmp	.+94     	; 0x936 <__stack+0x37>
	{
		case 'r':
			resetSystem();
     8d8:	6b df       	rcall	.-298    	; 0x7b0 <_ZL10closeValvev>
     8da:	2d c0       	rjmp	.+90     	; 0x936 <__stack+0x37>
     8dc:	0b df       	rcall	.-490    	; 0x6f4 <_ZL9openValvev>
			break;
		case 'c':
			closeValve();
     8de:	2b c0       	rjmp	.+86     	; 0x936 <__stack+0x37>
     8e0:	99 df       	rcall	.-206    	; 0x814 <_ZL10reportLeakv>
     8e2:	29 c0       	rjmp	.+82     	; 0x936 <__stack+0x37>
			break;
		case 'o':
			openValve();
     8e4:	b3 de       	rcall	.-666    	; 0x64c <_ZL9printTimev>
     8e6:	84 e4       	ldi	r24, 0x44	; 68
     8e8:	95 e0       	ldi	r25, 0x05	; 5
			break;
		case 'l':
			reportLeak();
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN11EEPROMClass4readEi>
	return printSerial();
}

static uint8_t reportValve()
{
	printTime();
     8f2:	88 23       	and	r24, r24
	EEPROM.write(1,cond);
}

static uint8_t isValveOpen()
{
	return EEPROM.read(0);
     8f4:	19 f0       	breq	.+6      	; 0x8fc <loop+0xa2>
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	c1 f4       	brne	.+48     	; 0x92a <__stack+0x2b>
     8fa:	05 c0       	rjmp	.+10     	; 0x906 <__stack+0x7>
     8fc:	8b e3       	ldi	r24, 0x3B	; 59
     8fe:	92 e0       	ldi	r25, 0x02	; 2
}

static uint8_t reportValve()
{
	printTime();
	switch (isValveOpen())
     900:	6b e3       	ldi	r22, 0x3B	; 59
     902:	71 e0       	ldi	r23, 0x01	; 1
     904:	11 c0       	rjmp	.+34     	; 0x928 <__stack+0x29>
     906:	8b e3       	ldi	r24, 0x3B	; 59
     908:	92 e0       	ldi	r25, 0x02	; 2
	{
	case 0:
		sprintf(MessageBuffer,"Valve:\tClosed\n");
     90a:	62 e0       	ldi	r22, 0x02	; 2
     90c:	72 e0       	ldi	r23, 0x02	; 2
     90e:	0c c0       	rjmp	.+24     	; 0x928 <__stack+0x29>
     910:	84 e4       	ldi	r24, 0x44	; 68
     912:	95 e0       	ldi	r25, 0x05	; 5
		break;
	case 1:
		sprintf(MessageBuffer,"Valve:\tOpen\n");
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN11EEPROMClass5writeEih>
	EEPROM.write(0,pos);
}

static void setLeakCondition(uint8_t cond)
{
	EEPROM.write(1,cond);
     91e:	96 de       	rcall	.-724    	; 0x64c <_ZL9printTimev>
     920:	8b e3       	ldi	r24, 0x3B	; 59
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	6f e0       	ldi	r22, 0x0F	; 15
     926:	72 e0       	ldi	r23, 0x02	; 2
     928:	f7 db       	rcall	.-2066   	; 0x118 <strcpy>
     92a:	86 e1       	ldi	r24, 0x16	; 22
}

static uint8_t clearLeak()
{
	setLeakCondition(0);
	printTime();
     92c:	96 e0       	ldi	r25, 0x06	; 6
     92e:	6b e3       	ldi	r22, 0x3B	; 59
	sprintf(MessageBuffer,"Leak:\tCleared\n");
     930:	72 e0       	ldi	r23, 0x02	; 2
     932:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN5Print5printEPKc>
     936:	86 e1       	ldi	r24, 0x16	; 22
     938:	96 e0       	ldi	r25, 0x06	; 6
     93a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN14HardwareSerial9availableEv>
uint8_t leak, interruptNo;

// Define Program Functions
static uint8_t printSerial()
{
	return Serial.print(MessageBuffer);
     93e:	89 2b       	or	r24, r25
     940:	09 f0       	breq	.+2      	; 0x944 <__stack+0x45>
     942:	b3 cf       	rjmp	.-154    	; 0x8aa <loop+0x50>
     944:	86 e1       	ldi	r24, 0x16	; 22
     946:	96 e0       	ldi	r25, 0x06	; 6
	}
}

static void checkRadioCommands()
{
	while(Serial.available())
     948:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <_ZN14HardwareSerial5flushEv>

0000094c <setup>:

// Runtime functions
void setup()
{
	// Initialize Pins
	pinMode(VALVE_ENABLE_PIN,OUTPUT);
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>
	pinMode(VALVE_CONTROL_1_PIN,OUTPUT);
     954:	88 e0       	ldi	r24, 0x08	; 8
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>
	pinMode(VALVE_CONTROL_2_PIN,OUTPUT);
     95c:	89 e0       	ldi	r24, 0x09	; 9
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>
	pinMode(SD_SS_PIN,OUTPUT);
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>
	pinMode(DS3234_SS_PIN,OUTPUT);
     96c:	8a e0       	ldi	r24, 0x0A	; 10
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>

	pinMode(RADIO_PIN,INPUT);
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>
	pinMode(METER_PIN,INPUT);
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>

	digitalWrite(VALVE_ENABLE_PIN,0);
     984:	87 e0       	ldi	r24, 0x07	; 7
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(VALVE_CONTROL_1_PIN,0);
     98c:	88 e0       	ldi	r24, 0x08	; 8
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(VALVE_CONTROL_2_PIN,0);
     994:	89 e0       	ldi	r24, 0x09	; 9
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(SD_SS_PIN,1);
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
	digitalWrite(DS3234_SS_PIN,1);
     9a4:	8a e0       	ldi	r24, 0x0A	; 10
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>

	pinMode(RST_PIN,INPUT_PULLUP);
     9ac:	86 e0       	ldi	r24, 0x06	; 6
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>

	// Initialize SPI Communication
	DS3234_init(DS3234_SS_PIN);
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	a8 d0       	rcall	.+336    	; 0xb08 <_Z11DS3234_inith>
     9b8:	86 e1       	ldi	r24, 0x16	; 22

	// Initialize Radio Communication
	Serial.begin(9600,SERIAL_8N1);
     9ba:	96 e0       	ldi	r25, 0x06	; 6
     9bc:	40 e8       	ldi	r20, 0x80	; 128
     9be:	55 e2       	ldi	r21, 0x25	; 37
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	26 e0       	ldi	r18, 0x06	; 6
     9c6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN14HardwareSerial5beginEmh>
     9ca:	86 e1       	ldi	r24, 0x16	; 22
	while(!Serial){;}
     9cc:	96 e0       	ldi	r25, 0x06	; 6
     9ce:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_ZN14HardwareSerialcvbEv>
     9d2:	88 23       	and	r24, r24
     9d4:	d1 f3       	breq	.-12     	; 0x9ca <setup+0x7e>
     9d6:	10 92 3a 02 	sts	0x023A, r1

	// Set Global Variables
	leak = 0;
     9da:	08 95       	ret

000009dc <__vector_6>:
* Description: Watchdog Timer interrupt service routine. This routine is 
*		           required to allow automatic WDIF and WDIE bit clearance in 
*			         hardware.
*
*******************************************************************************/
ISR (WDT_vect)
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1
     9e6:	8f 93       	push	r24
{
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
     9e8:	88 e1       	ldi	r24, 0x18	; 24
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	80 93 60 00 	sts	0x0060, r24
     9f2:	10 92 60 00 	sts	0x0060, r1
     9f6:	0f be       	out	0x3f, r0	; 63
}
     9f8:	8f 91       	pop	r24
     9fa:	0f 90       	pop	r0
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	0f 90       	pop	r0
     a00:	1f 90       	pop	r1
     a02:	18 95       	reti

00000a04 <_Z10DS3234_gethP2ts>:
            SPI.transfer(dectobcd(TimeDate[i]));
        digitalWrite(pin, HIGH);
    }
}

void DS3234_get(const uint8_t pin, struct ts *t)
     a04:	9f 92       	push	r9
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	df 93       	push	r29
     a18:	cf 93       	push	r28
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	27 97       	sbiw	r28, 0x07	; 7
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	a8 2e       	mov	r10, r24
     a2c:	8b 01       	movw	r16, r22
     a2e:	6e 01       	movw	r12, r28
     a30:	08 94       	sec
     a32:	c1 1c       	adc	r12, r1
     a34:	d1 1c       	adc	r13, r1
     a36:	bb 24       	eor	r11, r11
     a38:	ee 24       	eor	r14, r14
        digitalWrite(pin, HIGH);
        if (i == 5) {           // month address also contains the century on bit7
            TimeDate[5] = bcdtodec(n & 0x1F);
            century = (n & 0x80) >> 7;
        } else {
            TimeDate[i] = bcdtodec(n);
     a3a:	2a e0       	ldi	r18, 0x0A	; 10
     a3c:	92 2e       	mov	r9, r18
    uint8_t century = 0;
    uint8_t i, n;
    uint16_t year_full;

    for (i = 0; i <= 6; i++) {
        digitalWrite(pin, LOW);
     a3e:	8a 2d       	mov	r24, r10
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     a46:	ee bc       	out	0x2e, r14	; 46
  while (!(SPSR & _BV(SPIF)))
     a48:	0d b4       	in	r0, 0x2d	; 45
     a4a:	07 fe       	sbrs	r0, 7
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <_Z10DS3234_gethP2ts+0x44>
    ;
  return SPDR;
     a4e:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     a50:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
     a52:	0d b4       	in	r0, 0x2d	; 45
     a54:	07 fe       	sbrs	r0, 7
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <_Z10DS3234_gethP2ts+0x4e>
    ;
  return SPDR;
     a58:	fe b4       	in	r15, 0x2e	; 46
        SPI.transfer(i + 0x00);
        n = SPI.transfer(0x00);
        digitalWrite(pin, HIGH);
     a5a:	8a 2d       	mov	r24, r10
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	0e 94 2c 11 	call	0x2258	; 0x2258 <digitalWrite>
     a62:	2f 2d       	mov	r18, r15
     a64:	2f 70       	andi	r18, 0x0F	; 15
        if (i == 5) {           // month address also contains the century on bit7
     a66:	85 e0       	ldi	r24, 0x05	; 5
     a68:	e8 16       	cp	r14, r24
     a6a:	71 f4       	brne	.+28     	; 0xa88 <_Z10DS3234_gethP2ts+0x84>
            TimeDate[5] = bcdtodec(n & 0x1F);
     a6c:	8f 2d       	mov	r24, r15
     a6e:	8f 71       	andi	r24, 0x1F	; 31
     a70:	82 95       	swap	r24
     a72:	8f 70       	andi	r24, 0x0F	; 15
     a74:	89 9d       	mul	r24, r9
     a76:	c0 01       	movw	r24, r0
     a78:	11 24       	eor	r1, r1
     a7a:	28 0f       	add	r18, r24
     a7c:	2e 83       	std	Y+6, r18	; 0x06
            century = (n & 0x80) >> 7;
     a7e:	bf 2c       	mov	r11, r15
     a80:	bb 1c       	adc	r11, r11
     a82:	bb 24       	eor	r11, r11
     a84:	bb 1c       	adc	r11, r11
     a86:	09 c0       	rjmp	.+18     	; 0xa9a <_Z10DS3234_gethP2ts+0x96>
        } else {
            TimeDate[i] = bcdtodec(n);
     a88:	f2 94       	swap	r15
     a8a:	9f e0       	ldi	r25, 0x0F	; 15
     a8c:	f9 22       	and	r15, r25
     a8e:	f9 9c       	mul	r15, r9
     a90:	c0 01       	movw	r24, r0
     a92:	11 24       	eor	r1, r1
     a94:	28 0f       	add	r18, r24
     a96:	f6 01       	movw	r30, r12
     a98:	20 83       	st	Z, r18
    uint8_t TimeDate[7];        //second,minute,hour,dow,day,month,year
    uint8_t century = 0;
    uint8_t i, n;
    uint16_t year_full;

    for (i = 0; i <= 6; i++) {
     a9a:	e3 94       	inc	r14
     a9c:	08 94       	sec
     a9e:	c1 1c       	adc	r12, r1
     aa0:	d1 1c       	adc	r13, r1
     aa2:	f7 e0       	ldi	r31, 0x07	; 7
     aa4:	ef 16       	cp	r14, r31
     aa6:	59 f6       	brne	.-106    	; 0xa3e <_Z10DS3234_gethP2ts+0x3a>
     aa8:	8f 81       	ldd	r24, Y+7	; 0x07
        } else {
            TimeDate[i] = bcdtodec(n);
        }
    }

    if (century == 1)
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	b9 16       	cp	r11, r25
     aae:	29 f4       	brne	.+10     	; 0xaba <_Z10DS3234_gethP2ts+0xb6>
        year_full = 2000 + TimeDate[6];
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	20 53       	subi	r18, 0x30	; 48
     ab6:	38 4f       	sbci	r19, 0xF8	; 248
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <_Z10DS3234_gethP2ts+0xbe>
    else
        year_full = 1900 + TimeDate[6];
     aba:	28 2f       	mov	r18, r24
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	24 59       	subi	r18, 0x94	; 148
     ac0:	38 4f       	sbci	r19, 0xF8	; 248

    t->sec = TimeDate[0];
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	f8 01       	movw	r30, r16
     ac6:	80 83       	st	Z, r24
    t->min = TimeDate[1];
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
     aca:	81 83       	std	Z+1, r24	; 0x01
    t->hour = TimeDate[2];
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	82 83       	std	Z+2, r24	; 0x02
    t->mday = TimeDate[4];
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	83 83       	std	Z+3, r24	; 0x03
    t->mon = TimeDate[5];
     ad4:	8e 81       	ldd	r24, Y+6	; 0x06
     ad6:	84 83       	std	Z+4, r24	; 0x04
    t->year = year_full;
     ad8:	36 83       	std	Z+6, r19	; 0x06
     ada:	25 83       	std	Z+5, r18	; 0x05
    t->wday = TimeDate[3];
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	87 83       	std	Z+7, r24	; 0x07
    t->year_s = TimeDate[6];
     ae0:	8f 81       	ldd	r24, Y+7	; 0x07
     ae2:	82 87       	std	Z+10, r24	; 0x0a
}
     ae4:	27 96       	adiw	r28, 0x07	; 7
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	cf 91       	pop	r28
     af2:	df 91       	pop	r29
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	08 95       	ret

00000b08 <_Z11DS3234_inith>:
bit0 A1IE   Alarm1 interrupt enable (1 to enable)
*/

void DS3234_init(const uint8_t pin)
{
    pinMode(pin, OUTPUT);       // chip select pin
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	0e 94 ed 10 	call	0x21da	; 0x21da <pinMode>
    SPI.begin();
     b0e:	cd d7       	rcall	.+3994   	; 0x1aaa <_ZN8SPIClass5beginEv>
     b10:	81 e0       	ldi	r24, 0x01	; 1
    SPI.setBitOrder(MSBFIRST);
     b12:	bd d7       	rcall	.+3962   	; 0x1a8e <_ZN8SPIClass11setBitOrderEh>
     b14:	84 e0       	ldi	r24, 0x04	; 4
     b16:	c4 d7       	rcall	.+3976   	; 0x1aa0 <_ZN8SPIClass11setDataModeEh>
    SPI.setDataMode(SPI_MODE1);
     b18:	6a e0       	ldi	r22, 0x0A	; 10
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
    delay(10);
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <delay>

00000b24 <_ZN7Sd2Card11waitNotBusyEj>:
    | (sckRateID & 2 ? (1 << SPR0) : 0);
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	8b 01       	movw	r16, r22
  uint16_t t0 = millis();
     b30:	0e 94 4b 10 	call	0x2096	; 0x2096 <millis>
     b34:	eb 01       	movw	r28, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     b36:	ff 24       	eor	r15, r15
     b38:	fa 94       	dec	r15
     b3a:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
     b3c:	0d b4       	in	r0, 0x2d	; 45
     b3e:	07 fe       	sbrs	r0, 7
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <_ZN7Sd2Card11waitNotBusyEj+0x18>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     b42:	8e b5       	in	r24, 0x2e	; 46
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
     b44:	8f 3f       	cpi	r24, 0xFF	; 255
     b46:	11 f4       	brne	.+4      	; 0xb4c <_ZN7Sd2Card11waitNotBusyEj+0x28>
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	08 c0       	rjmp	.+16     	; 0xb5c <_ZN7Sd2Card11waitNotBusyEj+0x38>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
     b4c:	0e 94 4b 10 	call	0x2096	; 0x2096 <millis>
     b50:	6c 1b       	sub	r22, r28
     b52:	7d 0b       	sbc	r23, r29
     b54:	60 17       	cp	r22, r16
     b56:	71 07       	cpc	r23, r17
     b58:	80 f3       	brcs	.-32     	; 0xb3a <_ZN7Sd2Card11waitNotBusyEj+0x16>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	08 95       	ret

00000b68 <_ZN7Sd2Card13chipSelectLowEv>:
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
  digitalWrite(chipSelectPin_, LOW);
     b68:	fc 01       	movw	r30, r24
     b6a:	84 81       	ldd	r24, Z+4	; 0x04
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <digitalWrite>

00000b72 <_ZN7Sd2Card14chipSelectHighEv>:
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
     b72:	fc 01       	movw	r30, r24
     b74:	84 81       	ldd	r24, Z+4	; 0x04
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <digitalWrite>

00000b7c <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
     b7c:	dc 01       	movw	r26, r24
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
     b7e:	6e bd       	out	0x2e, r22	; 46
     b80:	fa 01       	movw	r30, r20
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
     b86:	0d b4       	in	r0, 0x2d	; 45
     b88:	07 fe       	sbrs	r0, 7
     b8a:	fd cf       	rjmp	.-6      	; 0xb86 <_ZN7Sd2Card9writeDataEhPKh+0xa>
    SPDR = src[i];
     b8c:	80 81       	ld	r24, Z
     b8e:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     b90:	0d b4       	in	r0, 0x2d	; 45
     b92:	07 fe       	sbrs	r0, 7
     b94:	fd cf       	rjmp	.-6      	; 0xb90 <_ZN7Sd2Card9writeDataEhPKh+0x14>
    SPDR = src[i+1];
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	8e bd       	out	0x2e, r24	; 46

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
     b9a:	2e 5f       	subi	r18, 0xFE	; 254
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	32 96       	adiw	r30, 0x02	; 2
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	20 30       	cpi	r18, 0x00	; 0
     ba4:	38 07       	cpc	r19, r24
     ba6:	79 f7       	brne	.-34     	; 0xb86 <_ZN7Sd2Card9writeDataEhPKh+0xa>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
     ba8:	0d b4       	in	r0, 0x2d	; 45
     baa:	07 fe       	sbrs	r0, 7
     bac:	fd cf       	rjmp	.-6      	; 0xba8 <_ZN7Sd2Card9writeDataEhPKh+0x2c>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     bb2:	0d b4       	in	r0, 0x2d	; 45
     bb4:	07 fe       	sbrs	r0, 7
     bb6:	fd cf       	rjmp	.-6      	; 0xbb2 <_ZN7Sd2Card9writeDataEhPKh+0x36>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     bbc:	0d b4       	in	r0, 0x2d	; 45
     bbe:	07 fe       	sbrs	r0, 7
     bc0:	fd cf       	rjmp	.-6      	; 0xbbc <_ZN7Sd2Card9writeDataEhPKh+0x40>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     bc6:	0d b4       	in	r0, 0x2d	; 45
     bc8:	07 fe       	sbrs	r0, 7
     bca:	fd cf       	rjmp	.-6      	; 0xbc6 <_ZN7Sd2Card9writeDataEhPKh+0x4a>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     bcc:	8e b5       	in	r24, 0x2e	; 46
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
     bce:	1a 96       	adiw	r26, 0x0a	; 10
     bd0:	8c 93       	st	X, r24
     bd2:	1a 97       	sbiw	r26, 0x0a	; 10
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
     bd4:	8f 71       	andi	r24, 0x1F	; 31
     bd6:	85 30       	cpi	r24, 0x05	; 5
     bd8:	11 f4       	brne	.+4      	; 0xbde <_ZN7Sd2Card9writeDataEhPKh+0x62>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	08 95       	ret
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
     bde:	81 e1       	ldi	r24, 0x11	; 17
     be0:	15 96       	adiw	r26, 0x05	; 5
     be2:	8c 93       	st	X, r24
     be4:	15 97       	sbiw	r26, 0x05	; 5
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
     be6:	cd 01       	movw	r24, r26
     be8:	c4 df       	rcall	.-120    	; 0xb72 <_ZN7Sd2Card14chipSelectHighEv>
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	08 95       	ret

00000bee <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
     bfa:	0e 94 4b 10 	call	0x2096	; 0x2096 <millis>
     bfe:	8b 01       	movw	r16, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     c00:	ff 24       	eor	r15, r15
     c02:	fa 94       	dec	r15
     c04:	09 c0       	rjmp	.+18     	; 0xc18 <_ZN7Sd2Card14waitStartBlockEv+0x2a>
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
     c06:	0e 94 4b 10 	call	0x2096	; 0x2096 <millis>
     c0a:	60 1b       	sub	r22, r16
     c0c:	71 0b       	sbc	r23, r17
     c0e:	6d 52       	subi	r22, 0x2D	; 45
     c10:	71 40       	sbci	r23, 0x01	; 1
     c12:	10 f0       	brcs	.+4      	; 0xc18 <_ZN7Sd2Card14waitStartBlockEv+0x2a>
     c14:	8f e0       	ldi	r24, 0x0F	; 15
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <_ZN7Sd2Card14waitStartBlockEv+0x44>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     c18:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
     c1a:	0d b4       	in	r0, 0x2d	; 45
     c1c:	07 fe       	sbrs	r0, 7
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <_ZN7Sd2Card14waitStartBlockEv+0x2c>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     c20:	8e b5       	in	r24, 0x2e	; 46
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
     c22:	8a 87       	std	Y+10, r24	; 0x0a
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	79 f3       	breq	.-34     	; 0xc06 <_ZN7Sd2Card14waitStartBlockEv+0x18>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
     c28:	8e 3f       	cpi	r24, 0xFE	; 254
     c2a:	11 f4       	brne	.+4      	; 0xc30 <_ZN7Sd2Card14waitStartBlockEv+0x42>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <_ZN7Sd2Card14waitStartBlockEv+0x4c>
     c30:	8d e0       	ldi	r24, 0x0D	; 13
     c32:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
     c34:	ce 01       	movw	r24, r28
     c36:	9d df       	rcall	.-198    	; 0xb72 <_ZN7Sd2Card14chipSelectHighEv>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	df 91       	pop	r29
  return false;
}
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	08 95       	ret

00000c46 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ec 01       	movw	r28, r24
  if (inBlock_) {
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	88 23       	and	r24, r24
     c50:	c9 f0       	breq	.+50     	; 0xc84 <_ZN7Sd2Card7readEndEv+0x3e>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	8e bd       	out	0x2e, r24	; 46
     c56:	2f 81       	ldd	r18, Y+7	; 0x07
     c58:	38 85       	ldd	r19, Y+8	; 0x08
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
     c5a:	4f ef       	ldi	r20, 0xFF	; 255
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <_ZN7Sd2Card7readEndEv+0x20>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
     c5e:	0d b4       	in	r0, 0x2d	; 45
     c60:	07 fe       	sbrs	r0, 7
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <_ZN7Sd2Card7readEndEv+0x18>
      SPDR = 0XFF;
     c64:	4e bd       	out	0x2e, r20	; 46
     c66:	2f 5f       	subi	r18, 0xFF	; 255
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
     c6a:	c9 01       	movw	r24, r18
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	81 50       	subi	r24, 0x01	; 1
     c70:	92 40       	sbci	r25, 0x02	; 2
     c72:	a8 f3       	brcs	.-22     	; 0xc5e <_ZN7Sd2Card7readEndEv+0x18>
     c74:	38 87       	std	Y+8, r19	; 0x08
     c76:	2f 83       	std	Y+7, r18	; 0x07
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
     c78:	0d b4       	in	r0, 0x2d	; 45
     c7a:	07 fe       	sbrs	r0, 7
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <_ZN7Sd2Card7readEndEv+0x32>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
     c7e:	ce 01       	movw	r24, r28
     c80:	78 df       	rcall	.-272    	; 0xb72 <_ZN7Sd2Card14chipSelectHighEv>
     c82:	1e 82       	std	Y+6, r1	; 0x06
    inBlock_ = 0;
     c84:	df 91       	pop	r29
  }
}
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
     c9a:	d6 2e       	mov	r13, r22
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
  // end read if in partialBlockRead mode
  readEnd();
     ca0:	d2 df       	rcall	.-92     	; 0xc46 <_ZN7Sd2Card7readEndEv>
     ca2:	ce 01       	movw	r24, r28

  // select card
  chipSelectLow();
     ca4:	61 df       	rcall	.-318    	; 0xb68 <_ZN7Sd2Card13chipSelectLowEv>
     ca6:	ce 01       	movw	r24, r28
     ca8:	6c e2       	ldi	r22, 0x2C	; 44

  // wait up to 300 ms if busy
  waitNotBusy(300);
     caa:	71 e0       	ldi	r23, 0x01	; 1
     cac:	3b df       	rcall	.-394    	; 0xb24 <_ZN7Sd2Card11waitNotBusyEj>
     cae:	8d 2d       	mov	r24, r13
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8e bd       	out	0x2e, r24	; 46

  // send command
  spiSend(cmd | 0x40);
     cb4:	0d b4       	in	r0, 0x2d	; 45
     cb6:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     cb8:	fd cf       	rjmp	.-6      	; 0xcb4 <_ZN7Sd2Card11cardCommandEhm+0x2a>
  while (!(SPSR & (1 << SPIF)));
     cba:	28 e1       	ldi	r18, 0x18	; 24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	02 2e       	mov	r0, r18

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <_ZN7Sd2Card11cardCommandEhm+0x44>
     cc6:	b6 95       	lsr	r27
     cc8:	a7 95       	ror	r26
     cca:	97 95       	ror	r25
     ccc:	87 95       	ror	r24
     cce:	0a 94       	dec	r0
     cd0:	d2 f7       	brpl	.-12     	; 0xcc6 <_ZN7Sd2Card11cardCommandEhm+0x3c>
     cd2:	8e bd       	out	0x2e, r24	; 46
     cd4:	0d b4       	in	r0, 0x2d	; 45
     cd6:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     cd8:	fd cf       	rjmp	.-6      	; 0xcd4 <_ZN7Sd2Card11cardCommandEhm+0x4a>
  while (!(SPSR & (1 << SPIF)));
     cda:	28 50       	subi	r18, 0x08	; 8
     cdc:	30 40       	sbci	r19, 0x00	; 0
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	28 3f       	cpi	r18, 0xF8	; 248
     ce2:	38 07       	cpc	r19, r24

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     ce4:	61 f7       	brne	.-40     	; 0xcbe <_ZN7Sd2Card11cardCommandEhm+0x34>
     ce6:	dd 20       	and	r13, r13
     ce8:	11 f4       	brne	.+4      	; 0xcee <_ZN7Sd2Card11cardCommandEhm+0x64>
     cea:	85 e9       	ldi	r24, 0x95	; 149

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <_ZN7Sd2Card11cardCommandEhm+0x70>
     cee:	88 e0       	ldi	r24, 0x08	; 8
     cf0:	d8 16       	cp	r13, r24
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <_ZN7Sd2Card11cardCommandEhm+0x6e>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
     cf4:	87 e8       	ldi	r24, 0x87	; 135
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <_ZN7Sd2Card11cardCommandEhm+0x70>
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	8e bd       	out	0x2e, r24	; 46
     cfc:	0d b4       	in	r0, 0x2d	; 45
     cfe:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     d00:	fd cf       	rjmp	.-6      	; 0xcfc <_ZN7Sd2Card11cardCommandEhm+0x72>
  while (!(SPSR & (1 << SPIF)));
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	2f ef       	ldi	r18, 0xFF	; 255
     d06:	2e bd       	out	0x2e, r18	; 46
     d08:	0d b4       	in	r0, 0x2d	; 45
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     d0a:	07 fe       	sbrs	r0, 7
     d0c:	fd cf       	rjmp	.-6      	; 0xd08 <_ZN7Sd2Card11cardCommandEhm+0x7e>
  while (!(SPSR & (1 << SPIF)));
     d0e:	8e b5       	in	r24, 0x2e	; 46
     d10:	87 ff       	sbrs	r24, 7
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <_ZN7Sd2Card11cardCommandEhm+0x8e>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     d14:	91 50       	subi	r25, 0x01	; 1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
     d16:	b9 f7       	brne	.-18     	; 0xd06 <_ZN7Sd2Card11cardCommandEhm+0x7c>
     d18:	8a 87       	std	Y+10, r24	; 0x0a
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
  return status_;
}
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	df 90       	pop	r13
     d28:	08 95       	ret

00000d2a <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	ec 01       	movw	r28, r24
     d3c:	7a 01       	movw	r14, r20
     d3e:	8b 01       	movw	r16, r22
     d40:	69 01       	movw	r12, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
     d42:	41 15       	cp	r20, r1
     d44:	51 05       	cpc	r21, r1
     d46:	61 05       	cpc	r22, r1
     d48:	71 05       	cpc	r23, r1
     d4a:	11 f4       	brne	.+4      	; 0xd50 <_ZN7Sd2Card10writeBlockEmPKh+0x26>
     d4c:	82 e1       	ldi	r24, 0x12	; 18
     d4e:	33 c0       	rjmp	.+102    	; 0xdb6 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
     d50:	8b 85       	ldd	r24, Y+11	; 0x0b
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	39 f0       	breq	.+14     	; 0xd64 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
     d56:	29 e0       	ldi	r18, 0x09	; 9
     d58:	ee 0c       	add	r14, r14
     d5a:	ff 1c       	adc	r15, r15
     d5c:	00 1f       	adc	r16, r16
     d5e:	11 1f       	adc	r17, r17
     d60:	2a 95       	dec	r18
     d62:	d1 f7       	brne	.-12     	; 0xd58 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
  if (cardCommand(CMD24, blockNumber)) {
     d64:	ce 01       	movw	r24, r28
     d66:	68 e1       	ldi	r22, 0x18	; 24
     d68:	a8 01       	movw	r20, r16
     d6a:	97 01       	movw	r18, r14
     d6c:	8e df       	rcall	.-228    	; 0xc8a <_ZN7Sd2Card11cardCommandEhm>
     d6e:	88 23       	and	r24, r24
     d70:	11 f0       	breq	.+4      	; 0xd76 <_ZN7Sd2Card10writeBlockEmPKh+0x4c>
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	20 c0       	rjmp	.+64     	; 0xdb6 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
     d76:	ce 01       	movw	r24, r28
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
     d78:	6e ef       	ldi	r22, 0xFE	; 254
     d7a:	a6 01       	movw	r20, r12
     d7c:	ff de       	rcall	.-514    	; 0xb7c <_ZN7Sd2Card9writeDataEhPKh>
     d7e:	88 23       	and	r24, r24
     d80:	d9 f0       	breq	.+54     	; 0xdb8 <_ZN7Sd2Card10writeBlockEmPKh+0x8e>
     d82:	ce 01       	movw	r24, r28
     d84:	68 e5       	ldi	r22, 0x58	; 88

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	cd de       	rcall	.-614    	; 0xb24 <_ZN7Sd2Card11waitNotBusyEj>
     d8a:	88 23       	and	r24, r24
     d8c:	11 f4       	brne	.+4      	; 0xd92 <_ZN7Sd2Card10writeBlockEmPKh+0x68>
     d8e:	85 e1       	ldi	r24, 0x15	; 21
     d90:	12 c0       	rjmp	.+36     	; 0xdb6 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
     d92:	ce 01       	movw	r24, r28
     d94:	6d e0       	ldi	r22, 0x0D	; 13
     d96:	20 e0       	ldi	r18, 0x00	; 0
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	75 df       	rcall	.-278    	; 0xc8a <_ZN7Sd2Card11cardCommandEhm>
     da0:	88 23       	and	r24, r24
     da2:	41 f4       	brne	.+16     	; 0xdb4 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	8e bd       	out	0x2e, r24	; 46
     da8:	0d b4       	in	r0, 0x2d	; 45
     daa:	07 fe       	sbrs	r0, 7
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
     dae:	8e b5       	in	r24, 0x2e	; 46
  while (!(SPSR & (1 << SPIF)));
     db0:	88 23       	and	r24, r24
     db2:	71 f0       	breq	.+28     	; 0xdd0 <_ZN7Sd2Card10writeBlockEmPKh+0xa6>
     db4:	84 e1       	ldi	r24, 0x14	; 20
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     db6:	8d 83       	std	Y+5, r24	; 0x05
     db8:	ce 01       	movw	r24, r28
     dba:	db de       	rcall	.-586    	; 0xb72 <_ZN7Sd2Card14chipSelectHighEv>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	df 91       	pop	r29
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
  return false;
}
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret
     dd0:	ce 01       	movw	r24, r28
     dd2:	cf de       	rcall	.-610    	; 0xb72 <_ZN7Sd2Card14chipSelectHighEv>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	f3 cf       	rjmp	.-26     	; 0xdbe <_ZN7Sd2Card10writeBlockEmPKh+0x94>

00000dd8 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
     dd8:	8f 92       	push	r8
     dda:	9f 92       	push	r9
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
     df2:	5a 01       	movw	r10, r20
     df4:	6b 01       	movw	r12, r22
     df6:	49 01       	movw	r8, r18
  uint16_t n;
  if (count == 0) return true;
     df8:	01 15       	cp	r16, r1
     dfa:	11 05       	cpc	r17, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <_ZN7Sd2Card8readDataEmjjPh+0x28>
     dfe:	77 c0       	rjmp	.+238    	; 0xeee <_ZN7Sd2Card8readDataEmjjPh+0x116>
  if ((count + offset) > 512) {
     e00:	c8 01       	movw	r24, r16
     e02:	82 0f       	add	r24, r18
     e04:	93 1f       	adc	r25, r19
     e06:	81 50       	subi	r24, 0x01	; 1
     e08:	92 40       	sbci	r25, 0x02	; 2
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <_ZN7Sd2Card8readDataEmjjPh+0x36>
     e0c:	6c c0       	rjmp	.+216    	; 0xee6 <_ZN7Sd2Card8readDataEmjjPh+0x10e>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
     e0e:	8e 81       	ldd	r24, Y+6	; 0x06
     e10:	88 23       	and	r24, r24
     e12:	71 f0       	breq	.+28     	; 0xe30 <_ZN7Sd2Card8readDataEmjjPh+0x58>
     e14:	88 81       	ld	r24, Y
     e16:	99 81       	ldd	r25, Y+1	; 0x01
     e18:	aa 81       	ldd	r26, Y+2	; 0x02
     e1a:	bb 81       	ldd	r27, Y+3	; 0x03
     e1c:	48 17       	cp	r20, r24
     e1e:	59 07       	cpc	r21, r25
     e20:	6a 07       	cpc	r22, r26
     e22:	7b 07       	cpc	r23, r27
     e24:	29 f4       	brne	.+10     	; 0xe30 <_ZN7Sd2Card8readDataEmjjPh+0x58>
     e26:	8f 81       	ldd	r24, Y+7	; 0x07
     e28:	98 85       	ldd	r25, Y+8	; 0x08
     e2a:	88 16       	cp	r8, r24
     e2c:	99 06       	cpc	r9, r25
     e2e:	08 f5       	brcc	.+66     	; 0xe72 <_ZN7Sd2Card8readDataEmjjPh+0x9a>
    block_ = block;
     e30:	a8 82       	st	Y, r10
     e32:	b9 82       	std	Y+1, r11	; 0x01
     e34:	ca 82       	std	Y+2, r12	; 0x02
     e36:	db 82       	std	Y+3, r13	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
     e38:	8b 85       	ldd	r24, Y+11	; 0x0b
     e3a:	83 30       	cpi	r24, 0x03	; 3
     e3c:	39 f0       	breq	.+14     	; 0xe4c <_ZN7Sd2Card8readDataEmjjPh+0x74>
     e3e:	69 e0       	ldi	r22, 0x09	; 9
     e40:	aa 0c       	add	r10, r10
     e42:	bb 1c       	adc	r11, r11
     e44:	cc 1c       	adc	r12, r12
     e46:	dd 1c       	adc	r13, r13
     e48:	6a 95       	dec	r22
     e4a:	d1 f7       	brne	.-12     	; 0xe40 <_ZN7Sd2Card8readDataEmjjPh+0x68>
    if (cardCommand(CMD17, block)) {
     e4c:	ce 01       	movw	r24, r28
     e4e:	61 e1       	ldi	r22, 0x11	; 17
     e50:	a6 01       	movw	r20, r12
     e52:	95 01       	movw	r18, r10
     e54:	1a df       	rcall	.-460    	; 0xc8a <_ZN7Sd2Card11cardCommandEhm>
     e56:	88 23       	and	r24, r24
     e58:	19 f0       	breq	.+6      	; 0xe60 <_ZN7Sd2Card8readDataEmjjPh+0x88>
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	8d 83       	std	Y+5, r24	; 0x05
     e5e:	43 c0       	rjmp	.+134    	; 0xee6 <_ZN7Sd2Card8readDataEmjjPh+0x10e>
     e60:	ce 01       	movw	r24, r28
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
     e62:	c5 de       	rcall	.-630    	; 0xbee <_ZN7Sd2Card14waitStartBlockEv>
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <_ZN7Sd2Card8readDataEmjjPh+0x92>
     e68:	3e c0       	rjmp	.+124    	; 0xee6 <_ZN7Sd2Card8readDataEmjjPh+0x10e>
     e6a:	18 86       	std	Y+8, r1	; 0x08
     e6c:	1f 82       	std	Y+7, r1	; 0x07
      goto fail;
    }
    offset_ = 0;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	8e 83       	std	Y+6, r24	; 0x06
    inBlock_ = 1;
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	8e bd       	out	0x2e, r24	; 46
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <_ZN7Sd2Card8readDataEmjjPh+0xb0>

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
     e7e:	0d b4       	in	r0, 0x2d	; 45
     e80:	07 fe       	sbrs	r0, 7
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
     e82:	fd cf       	rjmp	.-6      	; 0xe7e <_ZN7Sd2Card8readDataEmjjPh+0xa6>
     e84:	2e bd       	out	0x2e, r18	; 46
     e86:	01 96       	adiw	r24, 0x01	; 1
    SPDR = 0XFF;
     e88:	88 15       	cp	r24, r8
     e8a:	99 05       	cpc	r25, r9
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
     e8c:	c0 f3       	brcs	.-16     	; 0xe7e <_ZN7Sd2Card8readDataEmjjPh+0xa6>
     e8e:	98 87       	std	Y+8, r25	; 0x08
     e90:	8f 83       	std	Y+7, r24	; 0x07
     e92:	d8 01       	movw	r26, r16
     e94:	11 97       	sbiw	r26, 0x01	; 1
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	9f ef       	ldi	r25, 0xFF	; 255
     e9c:	0b c0       	rjmp	.+22     	; 0xeb4 <_ZN7Sd2Card8readDataEmjjPh+0xdc>
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
     e9e:	0d b4       	in	r0, 0x2d	; 45
     ea0:	07 fe       	sbrs	r0, 7
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
     ea2:	fd cf       	rjmp	.-6      	; 0xe9e <_ZN7Sd2Card8readDataEmjjPh+0xc6>
     ea4:	8e b5       	in	r24, 0x2e	; 46
     ea6:	f7 01       	movw	r30, r14
    dst[i] = SPDR;
     ea8:	e2 0f       	add	r30, r18
     eaa:	f3 1f       	adc	r31, r19
     eac:	80 83       	st	Z, r24
     eae:	9e bd       	out	0x2e, r25	; 46
     eb0:	2f 5f       	subi	r18, 0xFF	; 255
    SPDR = 0XFF;
     eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
     eb4:	2a 17       	cp	r18, r26
     eb6:	3b 07       	cpc	r19, r27
     eb8:	90 f3       	brcs	.-28     	; 0xe9e <_ZN7Sd2Card8readDataEmjjPh+0xc6>
     eba:	0d b4       	in	r0, 0x2d	; 45
     ebc:	07 fe       	sbrs	r0, 7
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
     ebe:	fd cf       	rjmp	.-6      	; 0xeba <_ZN7Sd2Card8readDataEmjjPh+0xe2>
     ec0:	8e b5       	in	r24, 0x2e	; 46
     ec2:	ae 0d       	add	r26, r14
  dst[n] = SPDR;
     ec4:	bf 1d       	adc	r27, r15
     ec6:	8c 93       	st	X, r24
     ec8:	2f 81       	ldd	r18, Y+7	; 0x07
     eca:	38 85       	ldd	r19, Y+8	; 0x08
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
     ecc:	20 0f       	add	r18, r16
     ece:	31 1f       	adc	r19, r17
     ed0:	38 87       	std	Y+8, r19	; 0x08
     ed2:	2f 83       	std	Y+7, r18	; 0x07
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	88 23       	and	r24, r24
  if (!partialBlockRead_ || offset_ >= 512) {
     ed8:	19 f0       	breq	.+6      	; 0xee0 <_ZN7Sd2Card8readDataEmjjPh+0x108>
     eda:	20 50       	subi	r18, 0x00	; 0
     edc:	32 40       	sbci	r19, 0x02	; 2
     ede:	38 f0       	brcs	.+14     	; 0xeee <_ZN7Sd2Card8readDataEmjjPh+0x116>
     ee0:	ce 01       	movw	r24, r28
     ee2:	b1 de       	rcall	.-670    	; 0xc46 <_ZN7Sd2Card7readEndEv>
    // read rest of data, checksum and set chip select high
    readEnd();
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <_ZN7Sd2Card8readDataEmjjPh+0x116>
     ee6:	ce 01       	movw	r24, r28
     ee8:	44 de       	rcall	.-888    	; 0xb72 <_ZN7Sd2Card14chipSelectHighEv>
     eea:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  chipSelectHigh();
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <_ZN7Sd2Card8readDataEmjjPh+0x118>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
  return false;
     ef6:	0f 91       	pop	r16
}
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	bf 90       	pop	r11
     f02:	af 90       	pop	r10
     f04:	9f 90       	pop	r9
     f06:	8f 90       	pop	r8
     f08:	08 95       	ret

00000f0a <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	79 01       	movw	r14, r18
  return readData(block, 0, 512, dst);
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	00 e0       	ldi	r16, 0x00	; 0
     f1a:	12 e0       	ldi	r17, 0x02	; 2
     f1c:	5d df       	rcall	.-326    	; 0xdd8 <_ZN7Sd2Card8readDataEmjjPh>
     f1e:	1f 91       	pop	r17
}
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	08 95       	ret

00000f28 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
     f28:	6f 92       	push	r6
     f2a:	7f 92       	push	r7
     f2c:	8f 92       	push	r8
     f2e:	9f 92       	push	r9
     f30:	af 92       	push	r10
     f32:	bf 92       	push	r11
     f34:	cf 92       	push	r12
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	ec 01       	movw	r28, r24
     f46:	7a 01       	movw	r14, r20
     f48:	8b 01       	movw	r16, r22
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
     f4a:	2d 81       	ldd	r18, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     f4c:	22 23       	and	r18, r18
     f4e:	09 f4       	brne	.+2      	; 0xf52 <_ZN6SdFile7seekSetEm+0x2a>
     f50:	7f c0       	rjmp	.+254    	; 0x1050 <_ZN6SdFile7seekSetEm+0x128>
     f52:	8b 89       	ldd	r24, Y+19	; 0x13
     f54:	9c 89       	ldd	r25, Y+20	; 0x14
     f56:	ad 89       	ldd	r26, Y+21	; 0x15
     f58:	be 89       	ldd	r27, Y+22	; 0x16
     f5a:	84 17       	cp	r24, r20
     f5c:	95 07       	cpc	r25, r21
     f5e:	a6 07       	cpc	r26, r22
     f60:	b7 07       	cpc	r27, r23
     f62:	08 f4       	brcc	.+2      	; 0xf66 <_ZN6SdFile7seekSetEm+0x3e>
     f64:	75 c0       	rjmp	.+234    	; 0x1050 <_ZN6SdFile7seekSetEm+0x128>
     f66:	84 c0       	rjmp	.+264    	; 0x1070 <_ZN6SdFile7seekSetEm+0x148>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
     f68:	e1 14       	cp	r14, r1
     f6a:	f1 04       	cpc	r15, r1
     f6c:	01 05       	cpc	r16, r1
     f6e:	11 05       	cpc	r17, r1
     f70:	49 f4       	brne	.+18     	; 0xf84 <_ZN6SdFile7seekSetEm+0x5c>
    // set position to start of file
    curCluster_ = 0;
     f72:	1e 82       	std	Y+6, r1	; 0x06
     f74:	1f 82       	std	Y+7, r1	; 0x07
     f76:	18 86       	std	Y+8, r1	; 0x08
     f78:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
     f7a:	1a 86       	std	Y+10, r1	; 0x0a
     f7c:	1b 86       	std	Y+11, r1	; 0x0b
     f7e:	1c 86       	std	Y+12, r1	; 0x0c
     f80:	1d 86       	std	Y+13, r1	; 0x0d
     f82:	64 c0       	rjmp	.+200    	; 0x104c <_ZN6SdFile7seekSetEm+0x124>
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
     f84:	2a 85       	ldd	r18, Y+10	; 0x0a
     f86:	3b 85       	ldd	r19, Y+11	; 0x0b
     f88:	4c 85       	ldd	r20, Y+12	; 0x0c
     f8a:	5d 85       	ldd	r21, Y+13	; 0x0d
     f8c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     f8e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     f90:	85 85       	ldd	r24, Z+13	; 0x0d
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	09 96       	adiw	r24, 0x09	; 9
     f96:	21 50       	subi	r18, 0x01	; 1
     f98:	30 40       	sbci	r19, 0x00	; 0
     f9a:	40 40       	sbci	r20, 0x00	; 0
     f9c:	50 40       	sbci	r21, 0x00	; 0
     f9e:	39 01       	movw	r6, r18
     fa0:	4a 01       	movw	r8, r20
     fa2:	08 2e       	mov	r0, r24
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <_ZN6SdFile7seekSetEm+0x86>
     fa6:	96 94       	lsr	r9
     fa8:	87 94       	ror	r8
     faa:	77 94       	ror	r7
     fac:	67 94       	ror	r6
     fae:	0a 94       	dec	r0
     fb0:	d2 f7       	brpl	.-12     	; 0xfa6 <_ZN6SdFile7seekSetEm+0x7e>
     fb2:	2f 5f       	subi	r18, 0xFF	; 255
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	4f 4f       	sbci	r20, 0xFF	; 255
     fb8:	5f 4f       	sbci	r21, 0xFF	; 255
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
     fba:	08 94       	sec
     fbc:	e1 08       	sbc	r14, r1
     fbe:	f1 08       	sbc	r15, r1
     fc0:	01 09       	sbc	r16, r1
     fc2:	11 09       	sbc	r17, r1
     fc4:	57 01       	movw	r10, r14
     fc6:	68 01       	movw	r12, r16
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <_ZN6SdFile7seekSetEm+0xaa>
     fca:	d6 94       	lsr	r13
     fcc:	c7 94       	ror	r12
     fce:	b7 94       	ror	r11
     fd0:	a7 94       	ror	r10
     fd2:	8a 95       	dec	r24
     fd4:	d2 f7       	brpl	.-12     	; 0xfca <_ZN6SdFile7seekSetEm+0xa2>
     fd6:	08 94       	sec
     fd8:	e1 1c       	adc	r14, r1
     fda:	f1 1c       	adc	r15, r1
     fdc:	01 1d       	adc	r16, r1
     fde:	11 1d       	adc	r17, r1

  if (nNew < nCur || curPosition_ == 0) {
     fe0:	a6 14       	cp	r10, r6
     fe2:	b7 04       	cpc	r11, r7
     fe4:	c8 04       	cpc	r12, r8
     fe6:	d9 04       	cpc	r13, r9
     fe8:	28 f0       	brcs	.+10     	; 0xff4 <_ZN6SdFile7seekSetEm+0xcc>
     fea:	21 15       	cp	r18, r1
     fec:	31 05       	cpc	r19, r1
     fee:	41 05       	cpc	r20, r1
     ff0:	51 05       	cpc	r21, r1
     ff2:	49 f4       	brne	.+18     	; 0x1006 <_ZN6SdFile7seekSetEm+0xde>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
     ff4:	8f 89       	ldd	r24, Y+23	; 0x17
     ff6:	98 8d       	ldd	r25, Y+24	; 0x18
     ff8:	a9 8d       	ldd	r26, Y+25	; 0x19
     ffa:	ba 8d       	ldd	r27, Y+26	; 0x1a
     ffc:	8e 83       	std	Y+6, r24	; 0x06
     ffe:	9f 83       	std	Y+7, r25	; 0x07
    1000:	a8 87       	std	Y+8, r26	; 0x08
    1002:	b9 87       	std	Y+9, r27	; 0x09
    1004:	15 c0       	rjmp	.+42     	; 0x1030 <_ZN6SdFile7seekSetEm+0x108>
  } else {
    // advance from curPosition
    nNew -= nCur;
    1006:	a6 18       	sub	r10, r6
    1008:	b7 08       	sbc	r11, r7
    100a:	c8 08       	sbc	r12, r8
    100c:	d9 08       	sbc	r13, r9
    100e:	10 c0       	rjmp	.+32     	; 0x1030 <_ZN6SdFile7seekSetEm+0x108>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    1010:	4e 81       	ldd	r20, Y+6	; 0x06
    1012:	5f 81       	ldd	r21, Y+7	; 0x07
    1014:	68 85       	ldd	r22, Y+8	; 0x08
    1016:	79 85       	ldd	r23, Y+9	; 0x09
    1018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101c:	94 01       	movw	r18, r8
    101e:	84 d3       	rcall	.+1800   	; 0x1728 <_ZNK8SdVolume6fatGetEmPm>
    1020:	08 94       	sec
    1022:	a1 08       	sbc	r10, r1
    1024:	b1 08       	sbc	r11, r1
    1026:	c1 08       	sbc	r12, r1
    1028:	d1 08       	sbc	r13, r1
    102a:	88 23       	and	r24, r24
    102c:	31 f4       	brne	.+12     	; 0x103a <_ZN6SdFile7seekSetEm+0x112>
    102e:	10 c0       	rjmp	.+32     	; 0x1050 <_ZN6SdFile7seekSetEm+0x128>
    1030:	86 e0       	ldi	r24, 0x06	; 6
    1032:	88 2e       	mov	r8, r24
    1034:	91 2c       	mov	r9, r1
    1036:	8c 0e       	add	r8, r28
    1038:	9d 1e       	adc	r9, r29
    103a:	a1 14       	cp	r10, r1
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    103c:	b1 04       	cpc	r11, r1
    103e:	c1 04       	cpc	r12, r1
    1040:	d1 04       	cpc	r13, r1
    1042:	31 f7       	brne	.-52     	; 0x1010 <_ZN6SdFile7seekSetEm+0xe8>
    1044:	ea 86       	std	Y+10, r14	; 0x0a
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    1046:	fb 86       	std	Y+11, r15	; 0x0b
    1048:	0c 87       	std	Y+12, r16	; 0x0c
    104a:	1d 87       	std	Y+13, r17	; 0x0d
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <_ZN6SdFile7seekSetEm+0x12a>
    1050:	80 e0       	ldi	r24, 0x00	; 0
  return true;
    1052:	df 91       	pop	r29
}
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	bf 90       	pop	r11
    1064:	af 90       	pop	r10
    1066:	9f 90       	pop	r9
    1068:	8f 90       	pop	r8
    106a:	7f 90       	pop	r7
    106c:	6f 90       	pop	r6
    106e:	08 95       	ret
    1070:	22 30       	cpi	r18, 0x02	; 2
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    1072:	09 f0       	breq	.+2      	; 0x1076 <_ZN6SdFile7seekSetEm+0x14e>
    1074:	79 cf       	rjmp	.-270    	; 0xf68 <_ZN6SdFile7seekSetEm+0x40>
    1076:	e6 cf       	rjmp	.-52     	; 0x1044 <_ZN6SdFile7seekSetEm+0x11c>

00001078 <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	ec 01       	movw	r28, r24
    107e:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    1080:	6e 85       	ldd	r22, Y+14	; 0x0e
    1082:	7f 85       	ldd	r23, Y+15	; 0x0f
    1084:	88 89       	ldd	r24, Y+16	; 0x10
    1086:	99 89       	ldd	r25, Y+17	; 0x11
    1088:	7b d2       	rcall	.+1270   	; 0x1580 <_ZN8SdVolume13cacheRawBlockEmh>
    108a:	88 23       	and	r24, r24
    108c:	19 f4       	brne	.+6      	; 0x1094 <_ZN6SdFile13cacheDirEntryEh+0x1c>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	0a c0       	rjmp	.+20     	; 0x10a8 <_ZN6SdFile13cacheDirEntryEh+0x30>
    1094:	8a 89       	ldd	r24, Y+18	; 0x12
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	95 e0       	ldi	r25, 0x05	; 5
    109c:	22 0f       	add	r18, r18
    109e:	33 1f       	adc	r19, r19
    10a0:	9a 95       	dec	r25
    10a2:	e1 f7       	brne	.-8      	; 0x109c <_ZN6SdFile13cacheDirEntryEh+0x24>
    10a4:	23 5c       	subi	r18, 0xC3	; 195
    10a6:	3c 4f       	sbci	r19, 0xFC	; 252
    10a8:	c9 01       	movw	r24, r18
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    10ba:	fc 01       	movw	r30, r24
    10bc:	85 81       	ldd	r24, Z+5	; 0x05
    10be:	88 23       	and	r24, r24
    10c0:	c9 f1       	breq	.+114    	; 0x1134 <_ZN6SdFile4syncEv+0x84>

  if (flags_ & F_FILE_DIR_DIRTY) {
    10c2:	84 81       	ldd	r24, Z+4	; 0x04
    10c4:	87 ff       	sbrs	r24, 7
    10c6:	34 c0       	rjmp	.+104    	; 0x1130 <_ZN6SdFile4syncEv+0x80>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    10c8:	c8 01       	movw	r24, r16
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	d5 df       	rcall	.-86     	; 0x1078 <_ZN6SdFile13cacheDirEntryEh>
    10ce:	ec 01       	movw	r28, r24
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    if (!d) return false;
    10d2:	81 f1       	breq	.+96     	; 0x1134 <_ZN6SdFile4syncEv+0x84>
    10d4:	f8 01       	movw	r30, r16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    10d6:	85 81       	ldd	r24, Z+5	; 0x05
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	40 f4       	brcc	.+16     	; 0x10ec <_ZN6SdFile4syncEv+0x3c>
    10dc:	83 89       	ldd	r24, Z+19	; 0x13
    10de:	94 89       	ldd	r25, Z+20	; 0x14
    10e0:	a5 89       	ldd	r26, Z+21	; 0x15
    10e2:	b6 89       	ldd	r27, Z+22	; 0x16
    10e4:	8c 8f       	std	Y+28, r24	; 0x1c
    10e6:	9d 8f       	std	Y+29, r25	; 0x1d
    10e8:	ae 8f       	std	Y+30, r26	; 0x1e
    10ea:	bf 8f       	std	Y+31, r27	; 0x1f
    10ec:	f8 01       	movw	r30, r16

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    10ee:	87 89       	ldd	r24, Z+23	; 0x17
    10f0:	90 8d       	ldd	r25, Z+24	; 0x18
    10f2:	9b 8f       	std	Y+27, r25	; 0x1b
    10f4:	8a 8f       	std	Y+26, r24	; 0x1a
    10f6:	87 89       	ldd	r24, Z+23	; 0x17
    d->firstClusterHigh = firstCluster_ >> 16;
    10f8:	90 8d       	ldd	r25, Z+24	; 0x18
    10fa:	a1 8d       	ldd	r26, Z+25	; 0x19
    10fc:	b2 8d       	ldd	r27, Z+26	; 0x1a
    10fe:	cd 01       	movw	r24, r26
    1100:	aa 27       	eor	r26, r26
    1102:	bb 27       	eor	r27, r27
    1104:	9d 8b       	std	Y+21, r25	; 0x15
    1106:	8c 8b       	std	Y+20, r24	; 0x14
    1108:	e0 91 3b 03 	lds	r30, 0x033B

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    110c:	f0 91 3c 03 	lds	r31, 0x033C
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	51 f0       	breq	.+20     	; 0x1128 <_ZN6SdFile4syncEv+0x78>
    1114:	be 01       	movw	r22, r28
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    1116:	6a 5e       	subi	r22, 0xEA	; 234
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	ce 01       	movw	r24, r28
    111c:	48 96       	adiw	r24, 0x18	; 24
    111e:	09 95       	icall
    1120:	88 8d       	ldd	r24, Y+24	; 0x18
      d->lastAccessDate = d->lastWriteDate;
    1122:	99 8d       	ldd	r25, Y+25	; 0x19
    1124:	9b 8b       	std	Y+19, r25	; 0x13
    1126:	8a 8b       	std	Y+18, r24	; 0x12
    1128:	f8 01       	movw	r30, r16
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    112a:	84 81       	ldd	r24, Z+4	; 0x04
    112c:	8f 77       	andi	r24, 0x7F	; 127
    112e:	84 83       	std	Z+4, r24	; 0x04
    1130:	ee d1       	rcall	.+988    	; 0x150e <_ZN8SdVolume10cacheFlushEv>
  }
  return SdVolume::cacheFlush();
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <_ZN6SdFile4syncEv+0x86>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
}
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    1146:	9c 01       	movw	r18, r24
    1148:	2a 5f       	subi	r18, 0xFA	; 250
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    114e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	59 d3       	rcall	.+1714   	; 0x180c <_ZN8SdVolume15allocContiguousEmPm>
    115a:	88 23       	and	r24, r24
    115c:	a1 f0       	breq	.+40     	; 0x1186 <_ZN6SdFile10addClusterEv+0x46>
    115e:	8f 89       	ldd	r24, Y+23	; 0x17

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    1160:	98 8d       	ldd	r25, Y+24	; 0x18
    1162:	a9 8d       	ldd	r26, Y+25	; 0x19
    1164:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	a1 05       	cpc	r26, r1
    116a:	b1 05       	cpc	r27, r1
    116c:	59 f4       	brne	.+22     	; 0x1184 <_ZN6SdFile10addClusterEv+0x44>
    116e:	8e 81       	ldd	r24, Y+6	; 0x06
    firstCluster_ = curCluster_;
    1170:	9f 81       	ldd	r25, Y+7	; 0x07
    1172:	a8 85       	ldd	r26, Y+8	; 0x08
    1174:	b9 85       	ldd	r27, Y+9	; 0x09
    1176:	8f 8b       	std	Y+23, r24	; 0x17
    1178:	98 8f       	std	Y+24, r25	; 0x18
    117a:	a9 8f       	std	Y+25, r26	; 0x19
    117c:	ba 8f       	std	Y+26, r27	; 0x1a
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    flags_ |= F_FILE_DIR_DIRTY;
    1180:	80 68       	ori	r24, 0x80	; 128
    1182:	8c 83       	std	Y+4, r24	; 0x04
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	df 91       	pop	r29
  }
  return true;
}
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    118c:	2f 92       	push	r2
    118e:	3f 92       	push	r3
    1190:	4f 92       	push	r4
    1192:	5f 92       	push	r5
    1194:	7f 92       	push	r7
    1196:	8f 92       	push	r8
    1198:	9f 92       	push	r9
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <_ZN6SdFile5writeEPKvj+0x24>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <_ZN6SdFile5writeEPKvj+0x26>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <_ZN6SdFile5writeEPKvj+0x28>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	6c 01       	movw	r12, r24
    11ba:	16 2f       	mov	r17, r22
    11bc:	07 2f       	mov	r16, r23
    11be:	5e 83       	std	Y+6, r21	; 0x06
    11c0:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    11c2:	dc 01       	movw	r26, r24
    11c4:	15 96       	adiw	r26, 0x05	; 5
    11c6:	8c 91       	ld	r24, X
    11c8:	15 97       	sbiw	r26, 0x05	; 5
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <_ZN6SdFile5writeEPKvj+0x44>
    11ce:	69 c1       	rjmp	.+722    	; 0x14a2 <_ZN6SdFile5writeEPKvj+0x316>
    11d0:	14 96       	adiw	r26, 0x04	; 4
    11d2:	8c 91       	ld	r24, X
    11d4:	81 ff       	sbrs	r24, 1
    11d6:	65 c1       	rjmp	.+714    	; 0x14a2 <_ZN6SdFile5writeEPKvj+0x316>
    11d8:	87 c1       	rjmp	.+782    	; 0x14e8 <_ZN6SdFile5writeEPKvj+0x35c>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    11da:	f6 01       	movw	r30, r12
    11dc:	43 89       	ldd	r20, Z+19	; 0x13
    11de:	54 89       	ldd	r21, Z+20	; 0x14
    11e0:	65 89       	ldd	r22, Z+21	; 0x15
    11e2:	76 89       	ldd	r23, Z+22	; 0x16
    11e4:	82 85       	ldd	r24, Z+10	; 0x0a
    11e6:	93 85       	ldd	r25, Z+11	; 0x0b
    11e8:	a4 85       	ldd	r26, Z+12	; 0x0c
    11ea:	b5 85       	ldd	r27, Z+13	; 0x0d
    11ec:	84 17       	cp	r24, r20
    11ee:	95 07       	cpc	r25, r21
    11f0:	a6 07       	cpc	r26, r22
    11f2:	b7 07       	cpc	r27, r23
    11f4:	29 f0       	breq	.+10     	; 0x1200 <_ZN6SdFile5writeEPKvj+0x74>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    11f6:	c6 01       	movw	r24, r12
    11f8:	97 de       	rcall	.-722    	; 0xf28 <_ZN6SdFile7seekSetEm>
    11fa:	88 23       	and	r24, r24
    if (!seekEnd()) goto writeErrorReturn;
    11fc:	09 f4       	brne	.+2      	; 0x1200 <_ZN6SdFile5writeEPKvj+0x74>
    11fe:	51 c1       	rjmp	.+674    	; 0x14a2 <_ZN6SdFile5writeEPKvj+0x316>
    1200:	81 2f       	mov	r24, r17
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    1202:	90 2f       	mov	r25, r16
    1204:	9c 01       	movw	r18, r24
    1206:	29 01       	movw	r4, r18
    1208:	2d 80       	ldd	r2, Y+5	; 0x05
    120a:	3e 80       	ldd	r3, Y+6	; 0x06
    120c:	12 c1       	rjmp	.+548    	; 0x1432 <_ZN6SdFile5writeEPKvj+0x2a6>
    120e:	d6 01       	movw	r26, r12
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    1210:	5b 96       	adiw	r26, 0x1b	; 27
    1212:	ed 91       	ld	r30, X+
    1214:	fc 91       	ld	r31, X
    1216:	5c 97       	sbiw	r26, 0x1c	; 28
    1218:	da 01       	movw	r26, r20
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    121a:	c9 01       	movw	r24, r18
    121c:	19 e0       	ldi	r17, 0x09	; 9
    121e:	b6 95       	lsr	r27
    1220:	a7 95       	ror	r26
    1222:	97 95       	ror	r25
    1224:	87 95       	ror	r24
    1226:	1a 95       	dec	r17
    1228:	d1 f7       	brne	.-12     	; 0x121e <_ZN6SdFile5writeEPKvj+0x92>
    122a:	74 80       	ldd	r7, Z+4	; 0x04
    122c:	7a 94       	dec	r7
    122e:	78 22       	and	r7, r24
    1230:	7f ef       	ldi	r23, 0xFF	; 255
    uint16_t blockOffset = curPosition_ & 0X1FF;
    1232:	87 2e       	mov	r8, r23
    1234:	71 e0       	ldi	r23, 0x01	; 1
    1236:	97 2e       	mov	r9, r23
    1238:	82 22       	and	r8, r18
    123a:	93 22       	and	r9, r19
    123c:	77 20       	and	r7, r7
    if (blockOfCluster == 0 && blockOffset == 0) {
    123e:	09 f0       	breq	.+2      	; 0x1242 <_ZN6SdFile5writeEPKvj+0xb6>
    1240:	4c c0       	rjmp	.+152    	; 0x12da <_ZN6SdFile5writeEPKvj+0x14e>
    1242:	81 14       	cp	r8, r1
    1244:	91 04       	cpc	r9, r1
    1246:	09 f0       	breq	.+2      	; 0x124a <_ZN6SdFile5writeEPKvj+0xbe>
    1248:	48 c0       	rjmp	.+144    	; 0x12da <_ZN6SdFile5writeEPKvj+0x14e>
    124a:	d6 01       	movw	r26, r12
      // start of new cluster
      if (curCluster_ == 0) {
    124c:	16 96       	adiw	r26, 0x06	; 6
    124e:	4d 91       	ld	r20, X+
    1250:	5d 91       	ld	r21, X+
    1252:	6d 91       	ld	r22, X+
    1254:	7c 91       	ld	r23, X
    1256:	19 97       	sbiw	r26, 0x09	; 9
    1258:	41 15       	cp	r20, r1
    125a:	51 05       	cpc	r21, r1
    125c:	61 05       	cpc	r22, r1
    125e:	71 05       	cpc	r23, r1
    1260:	81 f4       	brne	.+32     	; 0x1282 <_ZN6SdFile5writeEPKvj+0xf6>
    1262:	57 96       	adiw	r26, 0x17	; 23
        if (firstCluster_ == 0) {
    1264:	8d 91       	ld	r24, X+
    1266:	9d 91       	ld	r25, X+
    1268:	0d 90       	ld	r0, X+
    126a:	bc 91       	ld	r27, X
    126c:	a0 2d       	mov	r26, r0
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	a1 05       	cpc	r26, r1
    1272:	b1 05       	cpc	r27, r1
    1274:	41 f1       	breq	.+80     	; 0x12c6 <_ZN6SdFile5writeEPKvj+0x13a>
    1276:	f6 01       	movw	r30, r12
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = firstCluster_;
    1278:	86 83       	std	Z+6, r24	; 0x06
    127a:	97 83       	std	Z+7, r25	; 0x07
    127c:	a0 87       	std	Z+8, r26	; 0x08
    127e:	b1 87       	std	Z+9, r27	; 0x09
    1280:	2c c0       	rjmp	.+88     	; 0x12da <_ZN6SdFile5writeEPKvj+0x14e>
    1282:	cf 01       	movw	r24, r30
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1284:	9e 01       	movw	r18, r28
    1286:	2f 5f       	subi	r18, 0xFF	; 255
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	4e d2       	rcall	.+1180   	; 0x1728 <_ZNK8SdVolume6fatGetEmPm>
    128c:	88 23       	and	r24, r24
    128e:	09 f4       	brne	.+2      	; 0x1292 <_ZN6SdFile5writeEPKvj+0x106>
    1290:	0f c1       	rjmp	.+542    	; 0x14b0 <_ZN6SdFile5writeEPKvj+0x324>
    1292:	29 81       	ldd	r18, Y+1	; 0x01
    1294:	3a 81       	ldd	r19, Y+2	; 0x02
        if (vol_->isEOC(next)) {
    1296:	4b 81       	ldd	r20, Y+3	; 0x03
    1298:	5c 81       	ldd	r21, Y+4	; 0x04
    129a:	d6 01       	movw	r26, r12
    129c:	5b 96       	adiw	r26, 0x1b	; 27
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	5c 97       	sbiw	r26, 0x1c	; 28
    12a4:	87 89       	ldd	r24, Z+23	; 0x17
    12a6:	80 31       	cpi	r24, 0x10	; 16
    12a8:	29 f0       	breq	.+10     	; 0x12b4 <_ZN6SdFile5writeEPKvj+0x128>
    12aa:	88 ef       	ldi	r24, 0xF8	; 248
    12ac:	9f ef       	ldi	r25, 0xFF	; 255
    12ae:	af ef       	ldi	r26, 0xFF	; 255
    12b0:	bf e0       	ldi	r27, 0x0F	; 15
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <_ZN6SdFile5writeEPKvj+0x130>
    12b4:	88 ef       	ldi	r24, 0xF8	; 248
    12b6:	9f ef       	ldi	r25, 0xFF	; 255
    12b8:	a0 e0       	ldi	r26, 0x00	; 0
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	28 17       	cp	r18, r24
    12be:	39 07       	cpc	r19, r25
    12c0:	4a 07       	cpc	r20, r26
    12c2:	5b 07       	cpc	r21, r27
    12c4:	28 f0       	brcs	.+10     	; 0x12d0 <_ZN6SdFile5writeEPKvj+0x144>
    12c6:	c6 01       	movw	r24, r12
    12c8:	3b df       	rcall	.-394    	; 0x1140 <_ZN6SdFile10addClusterEv>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    12ca:	88 23       	and	r24, r24
    12cc:	31 f4       	brne	.+12     	; 0x12da <_ZN6SdFile5writeEPKvj+0x14e>
    12ce:	e9 c0       	rjmp	.+466    	; 0x14a2 <_ZN6SdFile5writeEPKvj+0x316>
    12d0:	f6 01       	movw	r30, r12
    12d2:	26 83       	std	Z+6, r18	; 0x06
    12d4:	37 83       	std	Z+7, r19	; 0x07
        } else {
          curCluster_ = next;
    12d6:	40 87       	std	Z+8, r20	; 0x08
    12d8:	51 87       	std	Z+9, r21	; 0x09
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	88 19       	sub	r24, r8
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    12e0:	99 09       	sbc	r25, r9
    12e2:	51 01       	movw	r10, r2
    12e4:	82 15       	cp	r24, r2
    12e6:	93 05       	cpc	r25, r3
    12e8:	08 f4       	brcc	.+2      	; 0x12ec <_ZN6SdFile5writeEPKvj+0x160>
    12ea:	5c 01       	movw	r10, r24
    12ec:	d6 01       	movw	r26, r12
    12ee:	5b 96       	adiw	r26, 0x1b	; 27
    12f0:	ed 91       	ld	r30, X+

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    12f2:	fc 91       	ld	r31, X
    12f4:	5c 97       	sbiw	r26, 0x1c	; 28
    12f6:	16 96       	adiw	r26, 0x06	; 6
    12f8:	ed 90       	ld	r14, X+
    12fa:	fd 90       	ld	r15, X+
    12fc:	0d 91       	ld	r16, X+
    12fe:	1c 91       	ld	r17, X
    1300:	19 97       	sbiw	r26, 0x09	; 9
    1302:	8e ef       	ldi	r24, 0xFE	; 254
    1304:	9f ef       	ldi	r25, 0xFF	; 255
    1306:	af ef       	ldi	r26, 0xFF	; 255
    1308:	bf ef       	ldi	r27, 0xFF	; 255
    130a:	e8 0e       	add	r14, r24
    130c:	f9 1e       	adc	r15, r25
    130e:	0a 1f       	adc	r16, r26
    1310:	1b 1f       	adc	r17, r27
    1312:	05 84       	ldd	r0, Z+13	; 0x0d
    1314:	04 c0       	rjmp	.+8      	; 0x131e <_ZN6SdFile5writeEPKvj+0x192>
    1316:	ee 0c       	add	r14, r14
    1318:	ff 1c       	adc	r15, r15
    131a:	00 1f       	adc	r16, r16
    131c:	11 1f       	adc	r17, r17
    131e:	0a 94       	dec	r0
    1320:	d2 f7       	brpl	.-12     	; 0x1316 <_ZN6SdFile5writeEPKvj+0x18a>
    1322:	86 85       	ldd	r24, Z+14	; 0x0e
    1324:	97 85       	ldd	r25, Z+15	; 0x0f
    1326:	a0 89       	ldd	r26, Z+16	; 0x10
    1328:	b1 89       	ldd	r27, Z+17	; 0x11
    132a:	e8 0e       	add	r14, r24
    132c:	f9 1e       	adc	r15, r25
    132e:	0a 1f       	adc	r16, r26
    1330:	1b 1f       	adc	r17, r27
    1332:	e7 0c       	add	r14, r7
    1334:	f1 1c       	adc	r15, r1
    1336:	01 1d       	adc	r16, r1
    1338:	11 1d       	adc	r17, r1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a9 16       	cp	r10, r25
    133e:	92 e0       	ldi	r25, 0x02	; 2
    if (n == 512) {
    1340:	b9 06       	cpc	r11, r25
    1342:	49 f5       	brne	.+82     	; 0x1396 <_ZN6SdFile5writeEPKvj+0x20a>
    1344:	80 91 1e 02 	lds	r24, 0x021E
    1348:	90 91 1f 02 	lds	r25, 0x021F
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    134c:	a0 91 20 02 	lds	r26, 0x0220
    1350:	b0 91 21 02 	lds	r27, 0x0221
    1354:	8e 15       	cp	r24, r14
    1356:	9f 05       	cpc	r25, r15
    1358:	a0 07       	cpc	r26, r16
    135a:	b1 07       	cpc	r27, r17
    135c:	61 f4       	brne	.+24     	; 0x1376 <_ZN6SdFile5writeEPKvj+0x1ea>
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	af ef       	ldi	r26, 0xFF	; 255
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    1364:	bf ef       	ldi	r27, 0xFF	; 255
    1366:	80 93 1e 02 	sts	0x021E, r24
    136a:	90 93 1f 02 	sts	0x021F, r25
    136e:	a0 93 20 02 	sts	0x0220, r26
    1372:	b0 93 21 02 	sts	0x0221, r27
    1376:	80 91 3d 05 	lds	r24, 0x053D
    137a:	90 91 3e 05 	lds	r25, 0x053E
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    137e:	b8 01       	movw	r22, r16
    1380:	a7 01       	movw	r20, r14
    1382:	92 01       	movw	r18, r4
    1384:	d2 dc       	rcall	.-1628   	; 0xd2a <_ZN7Sd2Card10writeBlockEmPKh>
    1386:	88 23       	and	r24, r24
    1388:	09 f4       	brne	.+2      	; 0x138c <_ZN6SdFile5writeEPKvj+0x200>
    138a:	8b c0       	rjmp	.+278    	; 0x14a2 <_ZN6SdFile5writeEPKvj+0x316>
    138c:	a0 e0       	ldi	r26, 0x00	; 0
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    138e:	b2 e0       	ldi	r27, 0x02	; 2
    1390:	4a 0e       	add	r4, r26
    1392:	5b 1e       	adc	r5, r27
      src += 512;
    1394:	3c c0       	rjmp	.+120    	; 0x140e <_ZN6SdFile5writeEPKvj+0x282>
    1396:	81 14       	cp	r8, r1
    1398:	91 04       	cpc	r9, r1
    139a:	01 f5       	brne	.+64     	; 0x13dc <_ZN6SdFile5writeEPKvj+0x250>
    139c:	f6 01       	movw	r30, r12
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    139e:	22 85       	ldd	r18, Z+10	; 0x0a
    13a0:	33 85       	ldd	r19, Z+11	; 0x0b
    13a2:	44 85       	ldd	r20, Z+12	; 0x0c
    13a4:	55 85       	ldd	r21, Z+13	; 0x0d
    13a6:	83 89       	ldd	r24, Z+19	; 0x13
    13a8:	94 89       	ldd	r25, Z+20	; 0x14
    13aa:	a5 89       	ldd	r26, Z+21	; 0x15
    13ac:	b6 89       	ldd	r27, Z+22	; 0x16
    13ae:	28 17       	cp	r18, r24
    13b0:	39 07       	cpc	r19, r25
    13b2:	4a 07       	cpc	r20, r26
    13b4:	5b 07       	cpc	r21, r27
    13b6:	90 f0       	brcs	.+36     	; 0x13dc <_ZN6SdFile5writeEPKvj+0x250>
    13b8:	aa d0       	rcall	.+340    	; 0x150e <_ZN8SdVolume10cacheFlushEv>
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <_ZN6SdFile5writeEPKvj+0x234>
    13be:	71 c0       	rjmp	.+226    	; 0x14a2 <_ZN6SdFile5writeEPKvj+0x316>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    13c0:	e0 92 1e 02 	sts	0x021E, r14
    13c4:	f0 92 1f 02 	sts	0x021F, r15
    13c8:	00 93 20 02 	sts	0x0220, r16
        SdVolume::cacheBlockNumber_ = block;
    13cc:	10 93 21 02 	sts	0x0221, r17
    13d0:	80 91 3f 05 	lds	r24, 0x053F
    13d4:	81 60       	ori	r24, 0x01	; 1
    13d6:	80 93 3f 05 	sts	0x053F, r24
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <_ZN6SdFile5writeEPKvj+0x25e>
    13dc:	c8 01       	movw	r24, r16
    13de:	b7 01       	movw	r22, r14
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	ce d0       	rcall	.+412    	; 0x1580 <_ZN8SdVolume13cacheRawBlockEmh>
    13e4:	88 23       	and	r24, r24
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    13e6:	09 f4       	brne	.+2      	; 0x13ea <_ZN6SdFile5writeEPKvj+0x25e>
    13e8:	5c c0       	rjmp	.+184    	; 0x14a2 <_ZN6SdFile5writeEPKvj+0x316>
    13ea:	94 01       	movw	r18, r8
    13ec:	23 5c       	subi	r18, 0xC3	; 195
    13ee:	3c 4f       	sbci	r19, 0xFC	; 252
    13f0:	a9 01       	movw	r20, r18
    13f2:	4a 0d       	add	r20, r10
    13f4:	5b 1d       	adc	r21, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    13f6:	d2 01       	movw	r26, r4
    13f8:	f9 01       	movw	r30, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <_ZN6SdFile5writeEPKvj+0x274>
      uint8_t* end = dst + n;
    13fc:	8d 91       	ld	r24, X+
    13fe:	81 93       	st	Z+, r24
    1400:	e4 17       	cp	r30, r20
    1402:	f5 07       	cpc	r31, r21
    1404:	d9 f7       	brne	.-10     	; 0x13fc <_ZN6SdFile5writeEPKvj+0x270>
    1406:	e2 1b       	sub	r30, r18
      while (dst != end) *dst++ = *src++;
    1408:	f3 0b       	sbc	r31, r19
    140a:	4e 0e       	add	r4, r30
    140c:	5f 1e       	adc	r5, r31
    140e:	2a 18       	sub	r2, r10
    1410:	3b 08       	sbc	r3, r11
    1412:	95 01       	movw	r18, r10
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	f6 01       	movw	r30, r12
    }
    nToWrite -= n;
    141a:	82 85       	ldd	r24, Z+10	; 0x0a
    141c:	93 85       	ldd	r25, Z+11	; 0x0b
    curPosition_ += n;
    141e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1420:	b5 85       	ldd	r27, Z+13	; 0x0d
    1422:	82 0f       	add	r24, r18
    1424:	93 1f       	adc	r25, r19
    1426:	a4 1f       	adc	r26, r20
    1428:	b5 1f       	adc	r27, r21
    142a:	82 87       	std	Z+10, r24	; 0x0a
    142c:	93 87       	std	Z+11, r25	; 0x0b
    142e:	a4 87       	std	Z+12, r26	; 0x0c
    1430:	b5 87       	std	Z+13, r27	; 0x0d
    1432:	d6 01       	movw	r26, r12
    1434:	1a 96       	adiw	r26, 0x0a	; 10
    1436:	2d 91       	ld	r18, X+
    1438:	3d 91       	ld	r19, X+
    143a:	4d 91       	ld	r20, X+
    143c:	5c 91       	ld	r21, X
    143e:	1d 97       	sbiw	r26, 0x0d	; 13
    1440:	21 14       	cp	r2, r1
    1442:	31 04       	cpc	r3, r1
    1444:	09 f0       	breq	.+2      	; 0x1448 <_ZN6SdFile5writeEPKvj+0x2bc>
    1446:	e3 ce       	rjmp	.-570    	; 0x120e <_ZN6SdFile5writeEPKvj+0x82>
    1448:	53 96       	adiw	r26, 0x13	; 19
    144a:	8d 91       	ld	r24, X+
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    144c:	9d 91       	ld	r25, X+
    144e:	0d 90       	ld	r0, X+
    1450:	bc 91       	ld	r27, X
    1452:	a0 2d       	mov	r26, r0
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1454:	82 17       	cp	r24, r18
    1456:	93 07       	cpc	r25, r19
    1458:	a4 07       	cpc	r26, r20
    145a:	b5 07       	cpc	r27, r21
    145c:	48 f4       	brcc	.+18     	; 0x1470 <_ZN6SdFile5writeEPKvj+0x2e4>
    145e:	f6 01       	movw	r30, r12
    1460:	23 8b       	std	Z+19, r18	; 0x13
    1462:	34 8b       	std	Z+20, r19	; 0x14
    1464:	45 8b       	std	Z+21, r20	; 0x15
    1466:	56 8b       	std	Z+22, r21	; 0x16
    1468:	84 81       	ldd	r24, Z+4	; 0x04
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    146a:	80 68       	ori	r24, 0x80	; 128
    146c:	84 83       	std	Z+4, r24	; 0x04
    146e:	11 c0       	rjmp	.+34     	; 0x1492 <_ZN6SdFile5writeEPKvj+0x306>
    1470:	80 91 3b 03 	lds	r24, 0x033B
    flags_ |= F_FILE_DIR_DIRTY;
    1474:	90 91 3c 03 	lds	r25, 0x033C
    1478:	89 2b       	or	r24, r25
    147a:	59 f0       	breq	.+22     	; 0x1492 <_ZN6SdFile5writeEPKvj+0x306>
  } else if (dateTime_ && nbyte) {
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	89 2b       	or	r24, r25
    1482:	39 f0       	breq	.+14     	; 0x1492 <_ZN6SdFile5writeEPKvj+0x306>
    1484:	d6 01       	movw	r26, r12
    1486:	14 96       	adiw	r26, 0x04	; 4
    1488:	8c 91       	ld	r24, X
    148a:	14 97       	sbiw	r26, 0x04	; 4
    148c:	80 68       	ori	r24, 0x80	; 128
    148e:	14 96       	adiw	r26, 0x04	; 4
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1490:	8c 93       	st	X, r24
    1492:	f6 01       	movw	r30, r12
    1494:	84 81       	ldd	r24, Z+4	; 0x04
    1496:	83 ff       	sbrs	r24, 3
    1498:	0d c0       	rjmp	.+26     	; 0x14b4 <_ZN6SdFile5writeEPKvj+0x328>
    149a:	c6 01       	movw	r24, r12
    149c:	09 de       	rcall	.-1006   	; 0x10b0 <_ZN6SdFile4syncEv>
  }

  if (flags_ & O_SYNC) {
    149e:	88 23       	and	r24, r24
    14a0:	49 f4       	brne	.+18     	; 0x14b4 <_ZN6SdFile5writeEPKvj+0x328>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	d6 01       	movw	r26, r12
    14a8:	13 96       	adiw	r26, 0x03	; 3
    14aa:	9c 93       	st	X, r25
    14ac:	8e 93       	st	-X, r24
    14ae:	12 97       	sbiw	r26, 0x02	; 2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    14b0:	1e 82       	std	Y+6, r1	; 0x06
    14b2:	1d 82       	std	Y+5, r1	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	26 96       	adiw	r28, 0x06	; 6
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	7f 90       	pop	r7
    14de:	5f 90       	pop	r5
    14e0:	4f 90       	pop	r4
    14e2:	3f 90       	pop	r3
    14e4:	2f 90       	pop	r2
    14e6:	08 95       	ret
    14e8:	82 fd       	sbrc	r24, 2
    14ea:	77 ce       	rjmp	.-786    	; 0x11da <_ZN6SdFile5writeEPKvj+0x4e>
    14ec:	89 ce       	rjmp	.-750    	; 0x1200 <_ZN6SdFile5writeEPKvj+0x74>

000014ee <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    14fa:	be 01       	movw	r22, r28
    14fc:	6f 5f       	subi	r22, 0xFF	; 255
    14fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	43 de       	rcall	.-890    	; 0x118c <_ZN6SdFile5writeEPKvj>
    1506:	0f 90       	pop	r0
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    150e:	80 91 3f 05 	lds	r24, 0x053F
    1512:	88 23       	and	r24, r24
    1514:	89 f1       	breq	.+98     	; 0x1578 <_ZN8SdVolume10cacheFlushEv+0x6a>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    1516:	40 91 1e 02 	lds	r20, 0x021E
    151a:	50 91 1f 02 	lds	r21, 0x021F
    151e:	60 91 20 02 	lds	r22, 0x0220
    1522:	70 91 21 02 	lds	r23, 0x0221
    1526:	80 91 3d 05 	lds	r24, 0x053D
    152a:	90 91 3e 05 	lds	r25, 0x053E
    152e:	2d e3       	ldi	r18, 0x3D	; 61
    1530:	33 e0       	ldi	r19, 0x03	; 3
    1532:	fb db       	rcall	.-2058   	; 0xd2a <_ZN7Sd2Card10writeBlockEmPKh>
    1534:	88 23       	and	r24, r24
    1536:	11 f1       	breq	.+68     	; 0x157c <_ZN8SdVolume10cacheFlushEv+0x6e>
    1538:	40 91 40 05 	lds	r20, 0x0540
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    153c:	50 91 41 05 	lds	r21, 0x0541
    1540:	60 91 42 05 	lds	r22, 0x0542
    1544:	70 91 43 05 	lds	r23, 0x0543
    1548:	41 15       	cp	r20, r1
    154a:	51 05       	cpc	r21, r1
    154c:	61 05       	cpc	r22, r1
    154e:	71 05       	cpc	r23, r1
    1550:	89 f0       	breq	.+34     	; 0x1574 <_ZN8SdVolume10cacheFlushEv+0x66>
    1552:	80 91 3d 05 	lds	r24, 0x053D
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1556:	90 91 3e 05 	lds	r25, 0x053E
    155a:	2d e3       	ldi	r18, 0x3D	; 61
    155c:	33 e0       	ldi	r19, 0x03	; 3
    155e:	e5 db       	rcall	.-2102   	; 0xd2a <_ZN7Sd2Card10writeBlockEmPKh>
    1560:	88 23       	and	r24, r24
    1562:	61 f0       	breq	.+24     	; 0x157c <_ZN8SdVolume10cacheFlushEv+0x6e>
    1564:	10 92 40 05 	sts	0x0540, r1
        return false;
      }
      cacheMirrorBlock_ = 0;
    1568:	10 92 41 05 	sts	0x0541, r1
    156c:	10 92 42 05 	sts	0x0542, r1
    1570:	10 92 43 05 	sts	0x0543, r1
    1574:	10 92 3f 05 	sts	0x053F, r1
    }
    cacheDirty_ = 0;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	08 95       	ret
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	08 95       	ret

00001580 <_ZN8SdVolume13cacheRawBlockEmh>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    1580:	df 92       	push	r13
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	7b 01       	movw	r14, r22
    158c:	8c 01       	movw	r16, r24
    158e:	d4 2e       	mov	r13, r20
  if (cacheBlockNumber_ != blockNumber) {
    1590:	80 91 1e 02 	lds	r24, 0x021E
    1594:	90 91 1f 02 	lds	r25, 0x021F
    1598:	a0 91 20 02 	lds	r26, 0x0220
    159c:	b0 91 21 02 	lds	r27, 0x0221
    15a0:	8e 15       	cp	r24, r14
    15a2:	9f 05       	cpc	r25, r15
    15a4:	a0 07       	cpc	r26, r16
    15a6:	b1 07       	cpc	r27, r17
    15a8:	b1 f0       	breq	.+44     	; 0x15d6 <_ZN8SdVolume13cacheRawBlockEmh+0x56>
    if (!cacheFlush()) return false;
    15aa:	b1 df       	rcall	.-158    	; 0x150e <_ZN8SdVolume10cacheFlushEv>
    15ac:	88 23       	and	r24, r24
    15ae:	d1 f0       	breq	.+52     	; 0x15e4 <_ZN8SdVolume13cacheRawBlockEmh+0x64>
    15b0:	80 91 3d 05 	lds	r24, 0x053D
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    15b4:	90 91 3e 05 	lds	r25, 0x053E
    15b8:	b8 01       	movw	r22, r16
    15ba:	a7 01       	movw	r20, r14
    15bc:	2d e3       	ldi	r18, 0x3D	; 61
    15be:	33 e0       	ldi	r19, 0x03	; 3
    15c0:	a4 dc       	rcall	.-1720   	; 0xf0a <_ZN7Sd2Card9readBlockEmPh>
    15c2:	88 23       	and	r24, r24
    15c4:	79 f0       	breq	.+30     	; 0x15e4 <_ZN8SdVolume13cacheRawBlockEmh+0x64>
    15c6:	e0 92 1e 02 	sts	0x021E, r14
    cacheBlockNumber_ = blockNumber;
    15ca:	f0 92 1f 02 	sts	0x021F, r15
    15ce:	00 93 20 02 	sts	0x0220, r16
    15d2:	10 93 21 02 	sts	0x0221, r17
    15d6:	80 91 3f 05 	lds	r24, 0x053F
  }
  cacheDirty_ |= action;
    15da:	8d 29       	or	r24, r13
    15dc:	80 93 3f 05 	sts	0x053F, r24
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	1f 91       	pop	r17
  return true;
    15e8:	0f 91       	pop	r16
}
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	df 90       	pop	r13
    15f0:	08 95       	ret

000015f2 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    15f2:	4f 92       	push	r4
    15f4:	5f 92       	push	r5
    15f6:	6f 92       	push	r6
    15f8:	7f 92       	push	r7
    15fa:	8f 92       	push	r8
    15fc:	9f 92       	push	r9
    15fe:	af 92       	push	r10
    1600:	bf 92       	push	r11
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	6a 01       	movw	r12, r20
    1616:	7b 01       	movw	r14, r22
    1618:	28 01       	movw	r4, r16
    161a:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    161c:	42 30       	cpi	r20, 0x02	; 2
    161e:	51 05       	cpc	r21, r1
    1620:	61 05       	cpc	r22, r1
    1622:	71 05       	cpc	r23, r1
    1624:	08 f4       	brcc	.+2      	; 0x1628 <_ZN8SdVolume6fatPutEmm+0x36>
    1626:	6e c0       	rjmp	.+220    	; 0x1704 <_ZN8SdVolume6fatPutEmm+0x112>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1628:	89 85       	ldd	r24, Y+9	; 0x09
    162a:	9a 85       	ldd	r25, Y+10	; 0x0a
    162c:	ab 85       	ldd	r26, Y+11	; 0x0b
    162e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	a1 1d       	adc	r26, r1
    1634:	b1 1d       	adc	r27, r1
    1636:	84 17       	cp	r24, r20
    1638:	95 07       	cpc	r25, r21
    163a:	a6 07       	cpc	r26, r22
    163c:	b7 07       	cpc	r27, r23
    163e:	08 f4       	brcc	.+2      	; 0x1642 <_ZN8SdVolume6fatPutEmm+0x50>
    1640:	61 c0       	rjmp	.+194    	; 0x1704 <_ZN8SdVolume6fatPutEmm+0x112>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    1642:	2b 89       	ldd	r18, Y+19	; 0x13
    1644:	3c 89       	ldd	r19, Y+20	; 0x14
    1646:	4d 89       	ldd	r20, Y+21	; 0x15
    1648:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    164a:	8f 89       	ldd	r24, Y+23	; 0x17
    164c:	80 31       	cpi	r24, 0x10	; 16
    164e:	29 f4       	brne	.+10     	; 0x165a <_ZN8SdVolume6fatPutEmm+0x68>
    1650:	99 27       	eor	r25, r25
    1652:	8f 2d       	mov	r24, r15
    1654:	7e 2d       	mov	r23, r14
    1656:	6d 2d       	mov	r22, r13
    1658:	09 c0       	rjmp	.+18     	; 0x166c <_ZN8SdVolume6fatPutEmm+0x7a>
    165a:	c7 01       	movw	r24, r14
    165c:	b6 01       	movw	r22, r12
    165e:	17 e0       	ldi	r17, 0x07	; 7
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	77 95       	ror	r23
    1666:	67 95       	ror	r22
    1668:	1a 95       	dec	r17
    166a:	d1 f7       	brne	.-12     	; 0x1660 <_ZN8SdVolume6fatPutEmm+0x6e>
    166c:	4b 01       	movw	r8, r22
    166e:	5c 01       	movw	r10, r24
    1670:	82 0e       	add	r8, r18
    1672:	93 1e       	adc	r9, r19
    1674:	a4 1e       	adc	r10, r20
    1676:	b5 1e       	adc	r11, r21

  if (lba != cacheBlockNumber_) {
    1678:	80 91 1e 02 	lds	r24, 0x021E
    167c:	90 91 1f 02 	lds	r25, 0x021F
    1680:	a0 91 20 02 	lds	r26, 0x0220
    1684:	b0 91 21 02 	lds	r27, 0x0221
    1688:	88 16       	cp	r8, r24
    168a:	99 06       	cpc	r9, r25
    168c:	aa 06       	cpc	r10, r26
    168e:	bb 06       	cpc	r11, r27
    1690:	31 f0       	breq	.+12     	; 0x169e <_ZN8SdVolume6fatPutEmm+0xac>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1692:	c5 01       	movw	r24, r10
    1694:	b4 01       	movw	r22, r8
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	73 df       	rcall	.-282    	; 0x1580 <_ZN8SdVolume13cacheRawBlockEmh>
    169a:	88 23       	and	r24, r24
    169c:	99 f1       	breq	.+102    	; 0x1704 <_ZN8SdVolume6fatPutEmm+0x112>
    169e:	8f 89       	ldd	r24, Y+23	; 0x17
  }
  // store entry
  if (fatType_ == 16) {
    16a0:	80 31       	cpi	r24, 0x10	; 16
    16a2:	49 f4       	brne	.+18     	; 0x16b6 <_ZN8SdVolume6fatPutEmm+0xc4>
    16a4:	f6 01       	movw	r30, r12
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    16a6:	f0 70       	andi	r31, 0x00	; 0
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	e3 5c       	subi	r30, 0xC3	; 195
    16ae:	fc 4f       	sbci	r31, 0xFC	; 252
    16b0:	51 82       	std	Z+1, r5	; 0x01
    16b2:	40 82       	st	Z, r4
    16b4:	0d c0       	rjmp	.+26     	; 0x16d0 <_ZN8SdVolume6fatPutEmm+0xde>
    16b6:	f6 01       	movw	r30, r12
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    16b8:	ef 77       	andi	r30, 0x7F	; 127
    16ba:	f0 70       	andi	r31, 0x00	; 0
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	e3 5c       	subi	r30, 0xC3	; 195
    16c6:	fc 4f       	sbci	r31, 0xFC	; 252
    16c8:	40 82       	st	Z, r4
    16ca:	51 82       	std	Z+1, r5	; 0x01
    16cc:	62 82       	std	Z+2, r6	; 0x02
    16ce:	73 82       	std	Z+3, r7	; 0x03
    16d0:	80 91 3f 05 	lds	r24, 0x053F
    16d4:	81 60       	ori	r24, 0x01	; 1
    16d6:	80 93 3f 05 	sts	0x053F, r24
    16da:	8a 89       	ldd	r24, Y+18	; 0x12
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	80 f0       	brcs	.+32     	; 0x1700 <_ZN8SdVolume6fatPutEmm+0x10e>
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	af 81       	ldd	r26, Y+7	; 0x07
    16e6:	b8 85       	ldd	r27, Y+8	; 0x08
    16e8:	88 0e       	add	r8, r24
    16ea:	99 1e       	adc	r9, r25
    16ec:	aa 1e       	adc	r10, r26
    16ee:	bb 1e       	adc	r11, r27
    16f0:	80 92 40 05 	sts	0x0540, r8
    16f4:	90 92 41 05 	sts	0x0541, r9
    16f8:	a0 92 42 05 	sts	0x0542, r10
    16fc:	b0 92 43 05 	sts	0x0543, r11
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <_ZN8SdVolume6fatPutEmm+0x114>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	df 91       	pop	r29
  return true;
}
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	8f 90       	pop	r8
    171e:	7f 90       	pop	r7
    1720:	6f 90       	pop	r6
    1722:	5f 90       	pop	r5
    1724:	4f 90       	pop	r4
    1726:	08 95       	ret

00001728 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    1728:	cf 92       	push	r12
    172a:	df 92       	push	r13
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	ec 01       	movw	r28, r24
    173a:	7a 01       	movw	r14, r20
    173c:	8b 01       	movw	r16, r22
    173e:	69 01       	movw	r12, r18
  if (cluster > (clusterCount_ + 1)) return false;
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	ab 85       	ldd	r26, Y+11	; 0x0b
    1746:	bc 85       	ldd	r27, Y+12	; 0x0c
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	a1 1d       	adc	r26, r1
    174c:	b1 1d       	adc	r27, r1
    174e:	84 17       	cp	r24, r20
    1750:	95 07       	cpc	r25, r21
    1752:	a6 07       	cpc	r26, r22
    1754:	b7 07       	cpc	r27, r23
    1756:	08 f4       	brcc	.+2      	; 0x175a <_ZNK8SdVolume6fatGetEmPm+0x32>
    1758:	4f c0       	rjmp	.+158    	; 0x17f8 <_ZNK8SdVolume6fatGetEmPm+0xd0>
  uint32_t lba = fatStartBlock_;
    175a:	2b 89       	ldd	r18, Y+19	; 0x13
    175c:	3c 89       	ldd	r19, Y+20	; 0x14
    175e:	4d 89       	ldd	r20, Y+21	; 0x15
    1760:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1762:	8f 89       	ldd	r24, Y+23	; 0x17
    1764:	80 31       	cpi	r24, 0x10	; 16
    1766:	29 f4       	brne	.+10     	; 0x1772 <_ZNK8SdVolume6fatGetEmPm+0x4a>
    1768:	99 27       	eor	r25, r25
    176a:	81 2f       	mov	r24, r17
    176c:	70 2f       	mov	r23, r16
    176e:	6f 2d       	mov	r22, r15
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <_ZNK8SdVolume6fatGetEmPm+0x5c>
    1772:	c8 01       	movw	r24, r16
    1774:	b7 01       	movw	r22, r14
    1776:	e7 e0       	ldi	r30, 0x07	; 7
    1778:	96 95       	lsr	r25
    177a:	87 95       	ror	r24
    177c:	77 95       	ror	r23
    177e:	67 95       	ror	r22
    1780:	ea 95       	dec	r30
    1782:	d1 f7       	brne	.-12     	; 0x1778 <_ZNK8SdVolume6fatGetEmPm+0x50>
    1784:	26 0f       	add	r18, r22
    1786:	37 1f       	adc	r19, r23
    1788:	48 1f       	adc	r20, r24
    178a:	59 1f       	adc	r21, r25
  if (lba != cacheBlockNumber_) {
    178c:	80 91 1e 02 	lds	r24, 0x021E
    1790:	90 91 1f 02 	lds	r25, 0x021F
    1794:	a0 91 20 02 	lds	r26, 0x0220
    1798:	b0 91 21 02 	lds	r27, 0x0221
    179c:	28 17       	cp	r18, r24
    179e:	39 07       	cpc	r19, r25
    17a0:	4a 07       	cpc	r20, r26
    17a2:	5b 07       	cpc	r21, r27
    17a4:	31 f0       	breq	.+12     	; 0x17b2 <_ZNK8SdVolume6fatGetEmPm+0x8a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    17a6:	ca 01       	movw	r24, r20
    17a8:	b9 01       	movw	r22, r18
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	e9 de       	rcall	.-558    	; 0x1580 <_ZN8SdVolume13cacheRawBlockEmh>
    17ae:	88 23       	and	r24, r24
    17b0:	19 f1       	breq	.+70     	; 0x17f8 <_ZNK8SdVolume6fatGetEmPm+0xd0>
    17b2:	8f 89       	ldd	r24, Y+23	; 0x17
  }
  if (fatType_ == 16) {
    17b4:	80 31       	cpi	r24, 0x10	; 16
    17b6:	59 f4       	brne	.+22     	; 0x17ce <_ZNK8SdVolume6fatGetEmPm+0xa6>
    17b8:	f7 01       	movw	r30, r14
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    17ba:	f0 70       	andi	r31, 0x00	; 0
    17bc:	ee 0f       	add	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	e3 5c       	subi	r30, 0xC3	; 195
    17c2:	fc 4f       	sbci	r31, 0xFC	; 252
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	0e c0       	rjmp	.+28     	; 0x17ea <_ZNK8SdVolume6fatGetEmPm+0xc2>
    17ce:	f7 01       	movw	r30, r14
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    17d0:	ef 77       	andi	r30, 0x7F	; 127
    17d2:	f0 70       	andi	r31, 0x00	; 0
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	e3 5c       	subi	r30, 0xC3	; 195
    17de:	fc 4f       	sbci	r31, 0xFC	; 252
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	a2 81       	ldd	r26, Z+2	; 0x02
    17e6:	b3 81       	ldd	r27, Z+3	; 0x03
    17e8:	bf 70       	andi	r27, 0x0F	; 15
    17ea:	f6 01       	movw	r30, r12
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <_ZNK8SdVolume6fatGetEmPm+0xd2>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	df 91       	pop	r29
  }
  return true;
}
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	cf 90       	pop	r12
    180a:	08 95       	ret

0000180c <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    180c:	2f 92       	push	r2
    180e:	3f 92       	push	r3
    1810:	4f 92       	push	r4
    1812:	5f 92       	push	r5
    1814:	6f 92       	push	r6
    1816:	7f 92       	push	r7
    1818:	8f 92       	push	r8
    181a:	9f 92       	push	r9
    181c:	af 92       	push	r10
    181e:	bf 92       	push	r11
    1820:	cf 92       	push	r12
    1822:	df 92       	push	r13
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	2f 97       	sbiw	r28, 0x0f	; 15
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	1c 01       	movw	r2, r24
    1842:	4a 87       	std	Y+10, r20	; 0x0a
    1844:	5b 87       	std	Y+11, r21	; 0x0b
    1846:	6c 87       	std	Y+12, r22	; 0x0c
    1848:	7d 87       	std	Y+13, r23	; 0x0d
    184a:	3f 87       	std	Y+15, r19	; 0x0f
    184c:	2e 87       	std	Y+14, r18	; 0x0e

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    184e:	d9 01       	movw	r26, r18
    1850:	0d 91       	ld	r16, X+
    1852:	1d 91       	ld	r17, X+
    1854:	2d 91       	ld	r18, X+
    1856:	3c 91       	ld	r19, X
    1858:	01 15       	cp	r16, r1
    185a:	11 05       	cpc	r17, r1
    185c:	21 05       	cpc	r18, r1
    185e:	31 05       	cpc	r19, r1
    1860:	49 f0       	breq	.+18     	; 0x1874 <_ZN8SdVolume15allocContiguousEmPm+0x68>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    1862:	48 01       	movw	r8, r16
    1864:	59 01       	movw	r10, r18
    1866:	08 94       	sec
    1868:	81 1c       	adc	r8, r1
    186a:	91 1c       	adc	r9, r1
    186c:	a1 1c       	adc	r10, r1
    186e:	b1 1c       	adc	r11, r1
    1870:	19 86       	std	Y+9, r1	; 0x09
    1872:	10 c0       	rjmp	.+32     	; 0x1894 <_ZN8SdVolume15allocContiguousEmPm+0x88>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    1874:	fc 01       	movw	r30, r24
    1876:	80 80       	ld	r8, Z
    1878:	91 80       	ldd	r9, Z+1	; 0x01
    187a:	a2 80       	ldd	r10, Z+2	; 0x02
    187c:	b3 80       	ldd	r11, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    187e:	19 86       	std	Y+9, r1	; 0x09
    1880:	8a 85       	ldd	r24, Y+10	; 0x0a
    1882:	9b 85       	ldd	r25, Y+11	; 0x0b
    1884:	ac 85       	ldd	r26, Y+12	; 0x0c
    1886:	bd 85       	ldd	r27, Y+13	; 0x0d
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	a1 05       	cpc	r26, r1
    188c:	b1 05       	cpc	r27, r1
    188e:	11 f4       	brne	.+4      	; 0x1894 <_ZN8SdVolume15allocContiguousEmPm+0x88>
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	99 87       	std	Y+9, r25	; 0x09
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    1894:	d1 01       	movw	r26, r2
    1896:	19 96       	adiw	r26, 0x09	; 9
    1898:	8d 91       	ld	r24, X+
    189a:	9d 91       	ld	r25, X+
    189c:	0d 90       	ld	r0, X+
    189e:	bc 91       	ld	r27, X
    18a0:	a0 2d       	mov	r26, r0
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	a1 1d       	adc	r26, r1
    18a6:	b1 1d       	adc	r27, r1
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	af 83       	std	Y+7, r26	; 0x07
    18ae:	b8 87       	std	Y+8, r27	; 0x08
    18b0:	75 01       	movw	r14, r10
    18b2:	64 01       	movw	r12, r8
    18b4:	44 24       	eor	r4, r4
    18b6:	55 24       	eor	r5, r5
    18b8:	32 01       	movw	r6, r4
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    18ba:	8e 01       	movw	r16, r28
    18bc:	0f 5f       	subi	r16, 0xFF	; 255
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    18c0:	f1 01       	movw	r30, r2
    18c2:	81 85       	ldd	r24, Z+9	; 0x09
    18c4:	92 85       	ldd	r25, Z+10	; 0x0a
    18c6:	a3 85       	ldd	r26, Z+11	; 0x0b
    18c8:	b4 85       	ldd	r27, Z+12	; 0x0c
    18ca:	48 16       	cp	r4, r24
    18cc:	59 06       	cpc	r5, r25
    18ce:	6a 06       	cpc	r6, r26
    18d0:	7b 06       	cpc	r7, r27
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <_ZN8SdVolume15allocContiguousEmPm+0xca>
    18d4:	8c c0       	rjmp	.+280    	; 0x19ee <_ZN8SdVolume15allocContiguousEmPm+0x1e2>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    18d6:	8d 81       	ldd	r24, Y+5	; 0x05
    18d8:	9e 81       	ldd	r25, Y+6	; 0x06
    18da:	af 81       	ldd	r26, Y+7	; 0x07
    18dc:	b8 85       	ldd	r27, Y+8	; 0x08
    18de:	8c 15       	cp	r24, r12
    18e0:	9d 05       	cpc	r25, r13
    18e2:	ae 05       	cpc	r26, r14
    18e4:	bf 05       	cpc	r27, r15
    18e6:	50 f4       	brcc	.+20     	; 0x18fc <_ZN8SdVolume15allocContiguousEmPm+0xf0>
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	88 2e       	mov	r8, r24
    18ec:	91 2c       	mov	r9, r1
    18ee:	a1 2c       	mov	r10, r1
    18f0:	b1 2c       	mov	r11, r1
    18f2:	b2 e0       	ldi	r27, 0x02	; 2
    18f4:	cb 2e       	mov	r12, r27
    18f6:	d1 2c       	mov	r13, r1
    18f8:	e1 2c       	mov	r14, r1
    18fa:	f1 2c       	mov	r15, r1
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    18fc:	c1 01       	movw	r24, r2
    18fe:	b7 01       	movw	r22, r14
    1900:	a6 01       	movw	r20, r12
    1902:	98 01       	movw	r18, r16
    1904:	11 df       	rcall	.-478    	; 0x1728 <_ZNK8SdVolume6fatGetEmPm>
    1906:	88 23       	and	r24, r24
    1908:	09 f4       	brne	.+2      	; 0x190c <_ZN8SdVolume15allocContiguousEmPm+0x100>
    190a:	71 c0       	rjmp	.+226    	; 0x19ee <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    190c:	89 81       	ldd	r24, Y+1	; 0x01

    if (f != 0) {
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	ab 81       	ldd	r26, Y+3	; 0x03
    1912:	bc 81       	ldd	r27, Y+4	; 0x04
    1914:	a7 01       	movw	r20, r14
    1916:	96 01       	movw	r18, r12
    1918:	2f 5f       	subi	r18, 0xFF	; 255
    191a:	3f 4f       	sbci	r19, 0xFF	; 255
    191c:	4f 4f       	sbci	r20, 0xFF	; 255
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	a1 05       	cpc	r26, r1
    1924:	b1 05       	cpc	r27, r1
    1926:	19 f0       	breq	.+6      	; 0x192e <_ZN8SdVolume15allocContiguousEmPm+0x122>
    1928:	49 01       	movw	r8, r18
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    192a:	5a 01       	movw	r10, r20
    192c:	0d c0       	rjmp	.+26     	; 0x1948 <_ZN8SdVolume15allocContiguousEmPm+0x13c>
    192e:	28 19       	sub	r18, r8
    } else if ((endCluster - bgnCluster + 1) == count) {
    1930:	39 09       	sbc	r19, r9
    1932:	4a 09       	sbc	r20, r10
    1934:	5b 09       	sbc	r21, r11
    1936:	8a 85       	ldd	r24, Y+10	; 0x0a
    1938:	9b 85       	ldd	r25, Y+11	; 0x0b
    193a:	ac 85       	ldd	r26, Y+12	; 0x0c
    193c:	bd 85       	ldd	r27, Y+13	; 0x0d
    193e:	28 17       	cp	r18, r24
    1940:	39 07       	cpc	r19, r25
    1942:	4a 07       	cpc	r20, r26
    1944:	5b 07       	cpc	r21, r27
    1946:	59 f0       	breq	.+22     	; 0x195e <_ZN8SdVolume15allocContiguousEmPm+0x152>
    1948:	08 94       	sec

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    194a:	41 1c       	adc	r4, r1
    194c:	51 1c       	adc	r5, r1
    194e:	61 1c       	adc	r6, r1
    1950:	71 1c       	adc	r7, r1
    1952:	08 94       	sec
    1954:	c1 1c       	adc	r12, r1
    1956:	d1 1c       	adc	r13, r1
    1958:	e1 1c       	adc	r14, r1
    195a:	f1 1c       	adc	r15, r1
    195c:	b1 cf       	rjmp	.-158    	; 0x18c0 <_ZN8SdVolume15allocContiguousEmPm+0xb4>
    195e:	c1 01       	movw	r24, r2
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    1960:	a6 01       	movw	r20, r12
    1962:	b7 01       	movw	r22, r14
    1964:	0f ef       	ldi	r16, 0xFF	; 255
    1966:	1f ef       	ldi	r17, 0xFF	; 255
    1968:	2f ef       	ldi	r18, 0xFF	; 255
    196a:	3f e0       	ldi	r19, 0x0F	; 15
    196c:	42 de       	rcall	.-892    	; 0x15f2 <_ZN8SdVolume6fatPutEmm>
    196e:	88 23       	and	r24, r24
    1970:	91 f4       	brne	.+36     	; 0x1996 <_ZN8SdVolume15allocContiguousEmPm+0x18a>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1972:	3d c0       	rjmp	.+122    	; 0x19ee <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    1974:	26 01       	movw	r4, r12
    1976:	37 01       	movw	r6, r14

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1978:	08 94       	sec
    197a:	41 08       	sbc	r4, r1
    197c:	51 08       	sbc	r5, r1
    197e:	61 08       	sbc	r6, r1
    1980:	71 08       	sbc	r7, r1
    1982:	c1 01       	movw	r24, r2
    1984:	b3 01       	movw	r22, r6
    1986:	a2 01       	movw	r20, r4
    1988:	97 01       	movw	r18, r14
    198a:	86 01       	movw	r16, r12
    198c:	32 de       	rcall	.-924    	; 0x15f2 <_ZN8SdVolume6fatPutEmm>
    198e:	88 23       	and	r24, r24
    1990:	71 f1       	breq	.+92     	; 0x19ee <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    1992:	73 01       	movw	r14, r6
    1994:	62 01       	movw	r12, r4
    1996:	8c 14       	cp	r8, r12
    1998:	9d 04       	cpc	r9, r13
    199a:	ae 04       	cpc	r10, r14
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    199c:	bf 04       	cpc	r11, r15
    199e:	50 f3       	brcs	.-44     	; 0x1974 <_ZN8SdVolume15allocContiguousEmPm+0x168>
    19a0:	ae 85       	ldd	r26, Y+14	; 0x0e
    19a2:	bf 85       	ldd	r27, Y+15	; 0x0f
    19a4:	4d 91       	ld	r20, X+
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    19a6:	5d 91       	ld	r21, X+
    19a8:	6d 91       	ld	r22, X+
    19aa:	7c 91       	ld	r23, X
    19ac:	41 15       	cp	r20, r1
    19ae:	51 05       	cpc	r21, r1
    19b0:	61 05       	cpc	r22, r1
    19b2:	71 05       	cpc	r23, r1
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <_ZN8SdVolume15allocContiguousEmPm+0x1b6>
    19b6:	c1 01       	movw	r24, r2
    19b8:	95 01       	movw	r18, r10
    19ba:	84 01       	movw	r16, r8
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    19bc:	1a de       	rcall	.-972    	; 0x15f2 <_ZN8SdVolume6fatPutEmm>
    19be:	88 23       	and	r24, r24
    19c0:	b1 f0       	breq	.+44     	; 0x19ee <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    19c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    19c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    19c6:	80 82       	st	Z, r8
    19c8:	91 82       	std	Z+1, r9	; 0x01
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    19ca:	a2 82       	std	Z+2, r10	; 0x02
    19cc:	b3 82       	std	Z+3, r11	; 0x03
    19ce:	f9 85       	ldd	r31, Y+9	; 0x09
    19d0:	ff 23       	and	r31, r31
    19d2:	59 f0       	breq	.+22     	; 0x19ea <_ZN8SdVolume15allocContiguousEmPm+0x1de>
    19d4:	08 94       	sec

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    19d6:	81 1c       	adc	r8, r1
    19d8:	91 1c       	adc	r9, r1
    19da:	a1 1c       	adc	r10, r1
    19dc:	b1 1c       	adc	r11, r1
    19de:	d1 01       	movw	r26, r2
    19e0:	8d 92       	st	X+, r8
    19e2:	9d 92       	st	X+, r9
    19e4:	ad 92       	st	X+, r10
    19e6:	bc 92       	st	X, r11
    19e8:	13 97       	sbiw	r26, 0x03	; 3
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	2f 96       	adiw	r28, 0x0f	; 15
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62

  return true;
}
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	bf 90       	pop	r11
    1a0e:	af 90       	pop	r10
    1a10:	9f 90       	pop	r9
    1a12:	8f 90       	pop	r8
    1a14:	7f 90       	pop	r7
    1a16:	6f 90       	pop	r6
    1a18:	5f 90       	pop	r5
    1a1a:	4f 90       	pop	r4
    1a1c:	3f 90       	pop	r3
    1a1e:	2f 90       	pop	r2
    1a20:	08 95       	ret

00001a22 <_ZN11EEPROMClass4readEi>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a22:	f9 99       	sbic	0x1f, 1	; 31
    1a24:	fe cf       	rjmp	.-4      	; 0x1a22 <_ZN11EEPROMClass4readEi>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1a26:	72 bd       	out	0x22, r23	; 34
    1a28:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1a2a:	f8 9a       	sbi	0x1f, 0	; 31
    1a2c:	80 b5       	in	r24, 0x20	; 32
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
    1a2e:	08 95       	ret

00001a30 <_ZN11EEPROMClass5writeEih>:
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1a30:	f9 99       	sbic	0x1f, 1	; 31
    1a32:	fe cf       	rjmp	.-4      	; 0x1a30 <_ZN11EEPROMClass5writeEih>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1a34:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1a36:	72 bd       	out	0x22, r23	; 34
    1a38:	61 bd       	out	0x21, r22	; 33
#endif
    EEDR = __value;
    1a3a:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	fa 9a       	sbi	0x1f, 2	; 31
    1a42:	f9 9a       	sbi	0x1f, 1	; 31
    1a44:	0f be       	out	0x3f, r0	; 63

void EEPROMClass::write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
}
    1a46:	08 95       	ret

00001a48 <_GLOBAL__I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    1a48:	10 92 4a 05 	sts	0x054A, r1
    1a4c:	10 92 4b 05 	sts	0x054B, r1
    1a50:	10 92 4e 05 	sts	0x054E, r1
    1a54:	10 92 50 05 	sts	0x0550, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e0       	ldi	r26, 0x00	; 0
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	80 93 51 05 	sts	0x0551, r24
    1a64:	90 93 52 05 	sts	0x0552, r25
    1a68:	a0 93 53 05 	sts	0x0553, r26
    1a6c:	b0 93 54 05 	sts	0x0554, r27
    1a70:	10 92 68 05 	sts	0x0568, r1
  public:
    Print() : write_error(0) {}
    1a74:	10 92 72 05 	sts	0x0572, r1
    1a78:	10 92 71 05 	sts	0x0571, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1a7c:	86 e2       	ldi	r24, 0x26	; 38
    1a7e:	92 e0       	ldi	r25, 0x02	; 2
    1a80:	90 93 70 05 	sts	0x0570, r25
    1a84:	80 93 6f 05 	sts	0x056F, r24
    1a88:	10 92 74 05 	sts	0x0574, r1
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
    1a8c:	08 95       	ret

00001a8e <_ZN8SPIClass11setBitOrderEh>:
  SPCR &= ~_BV(SPE);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    1a8e:	88 23       	and	r24, r24
    1a90:	19 f4       	brne	.+6      	; 0x1a98 <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
    1a92:	8c b5       	in	r24, 0x2c	; 44
    1a94:	80 62       	ori	r24, 0x20	; 32
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
    1a98:	8c b5       	in	r24, 0x2c	; 44
    1a9a:	8f 7d       	andi	r24, 0xDF	; 223
    1a9c:	8c bd       	out	0x2c, r24	; 44
    1a9e:	08 95       	ret

00001aa0 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1aa0:	9c b5       	in	r25, 0x2c	; 44
    1aa2:	93 7f       	andi	r25, 0xF3	; 243
    1aa4:	98 2b       	or	r25, r24
    1aa6:	9c bd       	out	0x2c, r25	; 44
}
    1aa8:	08 95       	ret

00001aaa <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
    1aaa:	8a e0       	ldi	r24, 0x0A	; 10
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	d4 d3       	rcall	.+1960   	; 0x2258 <digitalWrite>
    1ab0:	8a e0       	ldi	r24, 0x0A	; 10

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	92 d3       	rcall	.+1828   	; 0x21da <pinMode>
    1ab6:	8c b5       	in	r24, 0x2c	; 44
    1ab8:	80 61       	ori	r24, 0x10	; 16

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    1aba:	8c bd       	out	0x2c, r24	; 44
    1abc:	8c b5       	in	r24, 0x2c	; 44
    1abe:	80 64       	ori	r24, 0x40	; 64
  SPCR |= _BV(SPE);
    1ac0:	8c bd       	out	0x2c, r24	; 44
    1ac2:	8d e0       	ldi	r24, 0x0D	; 13
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
    1ac6:	89 d3       	rcall	.+1810   	; 0x21da <pinMode>
    1ac8:	8b e0       	ldi	r24, 0x0B	; 11
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	86 c3       	rjmp	.+1804   	; 0x21da <pinMode>

00001ace <_Z11serialEventv>:
    1ace:	08 95       	ret

00001ad0 <__vector_18>:
    1ad0:	1f 92       	push	r1
    1ad2:	0f 92       	push	r0
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	0f 92       	push	r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	8f 93       	push	r24
    1ae2:	9f 93       	push	r25
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
    1ae8:	80 91 c0 00 	lds	r24, 0x00C0
    1aec:	82 fd       	sbrc	r24, 2
    1aee:	1d c0       	rjmp	.+58     	; 0x1b2a <__vector_18+0x5a>
    1af0:	40 91 c6 00 	lds	r20, 0x00C6
    1af4:	20 91 ce 05 	lds	r18, 0x05CE
    1af8:	30 91 cf 05 	lds	r19, 0x05CF
    1afc:	2f 5f       	subi	r18, 0xFF	; 255
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	2f 73       	andi	r18, 0x3F	; 63
    1b02:	30 70       	andi	r19, 0x00	; 0
    1b04:	80 91 d0 05 	lds	r24, 0x05D0
    1b08:	90 91 d1 05 	lds	r25, 0x05D1
    1b0c:	28 17       	cp	r18, r24
    1b0e:	39 07       	cpc	r19, r25
    1b10:	71 f0       	breq	.+28     	; 0x1b2e <__vector_18+0x5e>
    1b12:	e0 91 ce 05 	lds	r30, 0x05CE
    1b16:	f0 91 cf 05 	lds	r31, 0x05CF
    1b1a:	e2 57       	subi	r30, 0x72	; 114
    1b1c:	fa 4f       	sbci	r31, 0xFA	; 250
    1b1e:	40 83       	st	Z, r20
    1b20:	30 93 cf 05 	sts	0x05CF, r19
    1b24:	20 93 ce 05 	sts	0x05CE, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <__vector_18+0x5e>
    1b2a:	80 91 c6 00 	lds	r24, 0x00C6
    1b2e:	ff 91       	pop	r31
    1b30:	ef 91       	pop	r30
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	4f 91       	pop	r20
    1b38:	3f 91       	pop	r19
    1b3a:	2f 91       	pop	r18
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	0f 90       	pop	r0
    1b42:	1f 90       	pop	r1
    1b44:	18 95       	reti

00001b46 <_Z14serialEventRunv>:
    1b46:	e0 91 22 06 	lds	r30, 0x0622
    1b4a:	f0 91 23 06 	lds	r31, 0x0623
    1b4e:	e0 5c       	subi	r30, 0xC0	; 192
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	81 91       	ld	r24, Z+
    1b54:	91 91       	ld	r25, Z+
    1b56:	20 81       	ld	r18, Z
    1b58:	31 81       	ldd	r19, Z+1	; 0x01
    1b5a:	82 1b       	sub	r24, r18
    1b5c:	93 0b       	sbc	r25, r19
    1b5e:	8f 73       	andi	r24, 0x3F	; 63
    1b60:	90 70       	andi	r25, 0x00	; 0
    1b62:	89 2b       	or	r24, r25
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <_Z14serialEventRunv+0x22>
    1b66:	b3 cf       	rjmp	.-154    	; 0x1ace <_Z11serialEventv>
    1b68:	08 95       	ret

00001b6a <__vector_19>:
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	2f 93       	push	r18
    1b76:	3f 93       	push	r19
    1b78:	8f 93       	push	r24
    1b7a:	9f 93       	push	r25
    1b7c:	ef 93       	push	r30
    1b7e:	ff 93       	push	r31
    1b80:	20 91 12 06 	lds	r18, 0x0612
    1b84:	30 91 13 06 	lds	r19, 0x0613
    1b88:	80 91 14 06 	lds	r24, 0x0614
    1b8c:	90 91 15 06 	lds	r25, 0x0615
    1b90:	28 17       	cp	r18, r24
    1b92:	39 07       	cpc	r19, r25
    1b94:	31 f4       	brne	.+12     	; 0x1ba2 <__vector_19+0x38>
    1b96:	80 91 c1 00 	lds	r24, 0x00C1
    1b9a:	8f 7d       	andi	r24, 0xDF	; 223
    1b9c:	80 93 c1 00 	sts	0x00C1, r24
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <__vector_19+0x60>
    1ba2:	e0 91 14 06 	lds	r30, 0x0614
    1ba6:	f0 91 15 06 	lds	r31, 0x0615
    1baa:	ee 52       	subi	r30, 0x2E	; 46
    1bac:	fa 4f       	sbci	r31, 0xFA	; 250
    1bae:	20 81       	ld	r18, Z
    1bb0:	80 91 14 06 	lds	r24, 0x0614
    1bb4:	90 91 15 06 	lds	r25, 0x0615
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	8f 73       	andi	r24, 0x3F	; 63
    1bbc:	90 70       	andi	r25, 0x00	; 0
    1bbe:	90 93 15 06 	sts	0x0615, r25
    1bc2:	80 93 14 06 	sts	0x0614, r24
    1bc6:	20 93 c6 00 	sts	0x00C6, r18
    1bca:	ff 91       	pop	r31
    1bcc:	ef 91       	pop	r30
    1bce:	9f 91       	pop	r25
    1bd0:	8f 91       	pop	r24
    1bd2:	3f 91       	pop	r19
    1bd4:	2f 91       	pop	r18
    1bd6:	0f 90       	pop	r0
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	0f 90       	pop	r0
    1bdc:	1f 90       	pop	r1
    1bde:	18 95       	reti

00001be0 <_ZN14HardwareSerial5beginEmh>:
    1be0:	af 92       	push	r10
    1be2:	bf 92       	push	r11
    1be4:	cf 92       	push	r12
    1be6:	df 92       	push	r13
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	ec 01       	movw	r28, r24
    1bf6:	7a 01       	movw	r14, r20
    1bf8:	8b 01       	movw	r16, r22
    1bfa:	c2 2e       	mov	r12, r18
    1bfc:	dd 24       	eor	r13, r13
    1bfe:	40 30       	cpi	r20, 0x00	; 0
    1c00:	81 ee       	ldi	r24, 0xE1	; 225
    1c02:	58 07       	cpc	r21, r24
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	68 07       	cpc	r22, r24
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	78 07       	cpc	r23, r24
    1c0c:	11 f0       	breq	.+4      	; 0x1c12 <_ZN14HardwareSerial5beginEmh+0x32>
    1c0e:	dd 24       	eor	r13, r13
    1c10:	d3 94       	inc	r13
    1c12:	71 e0       	ldi	r23, 0x01	; 1
    1c14:	a7 2e       	mov	r10, r23
    1c16:	b1 2c       	mov	r11, r1
    1c18:	ec 89       	ldd	r30, Y+20	; 0x14
    1c1a:	fd 89       	ldd	r31, Y+21	; 0x15
    1c1c:	dd 20       	and	r13, r13
    1c1e:	69 f0       	breq	.+26     	; 0x1c3a <_ZN14HardwareSerial5beginEmh+0x5a>
    1c20:	c5 01       	movw	r24, r10
    1c22:	08 a0       	ldd	r0, Y+32	; 0x20
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <_ZN14HardwareSerial5beginEmh+0x4a>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <_ZN14HardwareSerial5beginEmh+0x46>
    1c2e:	80 83       	st	Z, r24
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	79 e0       	ldi	r23, 0x09	; 9
    1c34:	8d e3       	ldi	r24, 0x3D	; 61
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <_ZN14HardwareSerial5beginEmh+0x64>
    1c3a:	10 82       	st	Z, r1
    1c3c:	60 e8       	ldi	r22, 0x80	; 128
    1c3e:	74 e8       	ldi	r23, 0x84	; 132
    1c40:	8e e1       	ldi	r24, 0x1E	; 30
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a8 01       	movw	r20, r16
    1c46:	97 01       	movw	r18, r14
    1c48:	ae d3       	rcall	.+1884   	; 0x23a6 <__udivmodsi4>
    1c4a:	21 50       	subi	r18, 0x01	; 1
    1c4c:	30 40       	sbci	r19, 0x00	; 0
    1c4e:	40 40       	sbci	r20, 0x00	; 0
    1c50:	50 40       	sbci	r21, 0x00	; 0
    1c52:	56 95       	lsr	r21
    1c54:	47 95       	ror	r20
    1c56:	37 95       	ror	r19
    1c58:	27 95       	ror	r18
    1c5a:	80 e1       	ldi	r24, 0x10	; 16
    1c5c:	20 30       	cpi	r18, 0x00	; 0
    1c5e:	38 07       	cpc	r19, r24
    1c60:	20 f0       	brcs	.+8      	; 0x1c6a <_ZN14HardwareSerial5beginEmh+0x8a>
    1c62:	dd 20       	and	r13, r13
    1c64:	11 f0       	breq	.+4      	; 0x1c6a <_ZN14HardwareSerial5beginEmh+0x8a>
    1c66:	dd 24       	eor	r13, r13
    1c68:	d7 cf       	rjmp	.-82     	; 0x1c18 <_ZN14HardwareSerial5beginEmh+0x38>
    1c6a:	e8 89       	ldd	r30, Y+16	; 0x10
    1c6c:	f9 89       	ldd	r31, Y+17	; 0x11
    1c6e:	30 83       	st	Z, r19
    1c70:	ea 89       	ldd	r30, Y+18	; 0x12
    1c72:	fb 89       	ldd	r31, Y+19	; 0x13
    1c74:	20 83       	st	Z, r18
    1c76:	e8 8d       	ldd	r30, Y+24	; 0x18
    1c78:	f9 8d       	ldd	r31, Y+25	; 0x19
    1c7a:	c0 82       	st	Z, r12
    1c7c:	ee 89       	ldd	r30, Y+22	; 0x16
    1c7e:	ff 89       	ldd	r31, Y+23	; 0x17
    1c80:	40 81       	ld	r20, Z
    1c82:	21 e0       	ldi	r18, 0x01	; 1
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	c9 01       	movw	r24, r18
    1c88:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <_ZN14HardwareSerial5beginEmh+0xb0>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <_ZN14HardwareSerial5beginEmh+0xac>
    1c94:	48 2b       	or	r20, r24
    1c96:	40 83       	st	Z, r20
    1c98:	ee 89       	ldd	r30, Y+22	; 0x16
    1c9a:	ff 89       	ldd	r31, Y+23	; 0x17
    1c9c:	40 81       	ld	r20, Z
    1c9e:	c9 01       	movw	r24, r18
    1ca0:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <_ZN14HardwareSerial5beginEmh+0xc8>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <_ZN14HardwareSerial5beginEmh+0xc4>
    1cac:	48 2b       	or	r20, r24
    1cae:	40 83       	st	Z, r20
    1cb0:	ee 89       	ldd	r30, Y+22	; 0x16
    1cb2:	ff 89       	ldd	r31, Y+23	; 0x17
    1cb4:	40 81       	ld	r20, Z
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <_ZN14HardwareSerial5beginEmh+0xe0>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	0a 94       	dec	r0
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <_ZN14HardwareSerial5beginEmh+0xdc>
    1cc4:	48 2b       	or	r20, r24
    1cc6:	40 83       	st	Z, r20
    1cc8:	ee 89       	ldd	r30, Y+22	; 0x16
    1cca:	ff 89       	ldd	r31, Y+23	; 0x17
    1ccc:	80 81       	ld	r24, Z
    1cce:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <_ZN14HardwareSerial5beginEmh+0xf6>
    1cd2:	22 0f       	add	r18, r18
    1cd4:	33 1f       	adc	r19, r19
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <_ZN14HardwareSerial5beginEmh+0xf2>
    1cda:	20 95       	com	r18
    1cdc:	28 23       	and	r18, r24
    1cde:	20 83       	st	Z, r18
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	af 90       	pop	r10
    1cf4:	08 95       	ret

00001cf6 <_ZN14HardwareSerial9availableEv>:
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	1c 96       	adiw	r26, 0x0c	; 12
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	1d 97       	sbiw	r26, 0x0d	; 13
    1d00:	e0 5c       	subi	r30, 0xC0	; 192
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	21 91       	ld	r18, Z+
    1d06:	31 91       	ld	r19, Z+
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	28 1b       	sub	r18, r24
    1d0e:	39 0b       	sbc	r19, r25
    1d10:	2f 73       	andi	r18, 0x3F	; 63
    1d12:	30 70       	andi	r19, 0x00	; 0
    1d14:	c9 01       	movw	r24, r18
    1d16:	08 95       	ret

00001d18 <_ZN14HardwareSerial4peekEv>:
    1d18:	dc 01       	movw	r26, r24
    1d1a:	1c 96       	adiw	r26, 0x0c	; 12
    1d1c:	ed 91       	ld	r30, X+
    1d1e:	fc 91       	ld	r31, X
    1d20:	1d 97       	sbiw	r26, 0x0d	; 13
    1d22:	e0 5c       	subi	r30, 0xC0	; 192
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	20 81       	ld	r18, Z
    1d28:	31 81       	ldd	r19, Z+1	; 0x01
    1d2a:	e0 54       	subi	r30, 0x40	; 64
    1d2c:	f0 40       	sbci	r31, 0x00	; 0
    1d2e:	df 01       	movw	r26, r30
    1d30:	ae 5b       	subi	r26, 0xBE	; 190
    1d32:	bf 4f       	sbci	r27, 0xFF	; 255
    1d34:	8d 91       	ld	r24, X+
    1d36:	9c 91       	ld	r25, X
    1d38:	11 97       	sbiw	r26, 0x01	; 1
    1d3a:	28 17       	cp	r18, r24
    1d3c:	39 07       	cpc	r19, r25
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <_ZN14HardwareSerial4peekEv+0x2e>
    1d40:	2f ef       	ldi	r18, 0xFF	; 255
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <_ZN14HardwareSerial4peekEv+0x3c>
    1d46:	8d 91       	ld	r24, X+
    1d48:	9c 91       	ld	r25, X
    1d4a:	e8 0f       	add	r30, r24
    1d4c:	f9 1f       	adc	r31, r25
    1d4e:	80 81       	ld	r24, Z
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	c9 01       	movw	r24, r18
    1d56:	08 95       	ret

00001d58 <_ZN14HardwareSerial4readEv>:
    1d58:	dc 01       	movw	r26, r24
    1d5a:	1c 96       	adiw	r26, 0x0c	; 12
    1d5c:	ed 91       	ld	r30, X+
    1d5e:	fc 91       	ld	r31, X
    1d60:	1d 97       	sbiw	r26, 0x0d	; 13
    1d62:	e0 5c       	subi	r30, 0xC0	; 192
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	20 81       	ld	r18, Z
    1d68:	31 81       	ldd	r19, Z+1	; 0x01
    1d6a:	e0 54       	subi	r30, 0x40	; 64
    1d6c:	f0 40       	sbci	r31, 0x00	; 0
    1d6e:	df 01       	movw	r26, r30
    1d70:	ae 5b       	subi	r26, 0xBE	; 190
    1d72:	bf 4f       	sbci	r27, 0xFF	; 255
    1d74:	8d 91       	ld	r24, X+
    1d76:	9c 91       	ld	r25, X
    1d78:	11 97       	sbiw	r26, 0x01	; 1
    1d7a:	28 17       	cp	r18, r24
    1d7c:	39 07       	cpc	r19, r25
    1d7e:	19 f4       	brne	.+6      	; 0x1d86 <_ZN14HardwareSerial4readEv+0x2e>
    1d80:	2f ef       	ldi	r18, 0xFF	; 255
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	10 c0       	rjmp	.+32     	; 0x1da6 <_ZN14HardwareSerial4readEv+0x4e>
    1d86:	8d 91       	ld	r24, X+
    1d88:	9c 91       	ld	r25, X
    1d8a:	11 97       	sbiw	r26, 0x01	; 1
    1d8c:	e8 0f       	add	r30, r24
    1d8e:	f9 1f       	adc	r31, r25
    1d90:	20 81       	ld	r18, Z
    1d92:	8d 91       	ld	r24, X+
    1d94:	9c 91       	ld	r25, X
    1d96:	11 97       	sbiw	r26, 0x01	; 1
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	8f 73       	andi	r24, 0x3F	; 63
    1d9c:	90 70       	andi	r25, 0x00	; 0
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	9c 93       	st	X, r25
    1da2:	8e 93       	st	-X, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	c9 01       	movw	r24, r18
    1da8:	08 95       	ret

00001daa <_ZN14HardwareSerial5flushEv>:
    1daa:	dc 01       	movw	r26, r24
    1dac:	91 96       	adiw	r26, 0x21	; 33
    1dae:	8c 91       	ld	r24, X
    1db0:	91 97       	sbiw	r26, 0x21	; 33
    1db2:	88 23       	and	r24, r24
    1db4:	39 f0       	breq	.+14     	; 0x1dc4 <_ZN14HardwareSerial5flushEv+0x1a>
    1db6:	54 96       	adiw	r26, 0x14	; 20
    1db8:	ed 91       	ld	r30, X+
    1dba:	fc 91       	ld	r31, X
    1dbc:	55 97       	sbiw	r26, 0x15	; 21
    1dbe:	80 81       	ld	r24, Z
    1dc0:	86 ff       	sbrs	r24, 6
    1dc2:	f9 cf       	rjmp	.-14     	; 0x1db6 <_ZN14HardwareSerial5flushEv+0xc>
    1dc4:	91 96       	adiw	r26, 0x21	; 33
    1dc6:	1c 92       	st	X, r1
    1dc8:	08 95       	ret

00001dca <_ZN14HardwareSerial5writeEh>:
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	ec 01       	movw	r28, r24
    1dd0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1dd2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dd4:	e0 5c       	subi	r30, 0xC0	; 192
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	20 81       	ld	r18, Z
    1dda:	31 81       	ldd	r19, Z+1	; 0x01
    1ddc:	e0 54       	subi	r30, 0x40	; 64
    1dde:	f0 40       	sbci	r31, 0x00	; 0
    1de0:	2f 5f       	subi	r18, 0xFF	; 255
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255
    1de4:	2f 73       	andi	r18, 0x3F	; 63
    1de6:	30 70       	andi	r19, 0x00	; 0
    1de8:	df 01       	movw	r26, r30
    1dea:	ae 5b       	subi	r26, 0xBE	; 190
    1dec:	bf 4f       	sbci	r27, 0xFF	; 255
    1dee:	8d 91       	ld	r24, X+
    1df0:	9c 91       	ld	r25, X
    1df2:	11 97       	sbiw	r26, 0x01	; 1
    1df4:	28 17       	cp	r18, r24
    1df6:	39 07       	cpc	r19, r25
    1df8:	d1 f3       	breq	.-12     	; 0x1dee <_ZN14HardwareSerial5writeEh+0x24>
    1dfa:	e0 5c       	subi	r30, 0xC0	; 192
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	e0 54       	subi	r30, 0x40	; 64
    1e04:	f0 40       	sbci	r31, 0x00	; 0
    1e06:	e8 0f       	add	r30, r24
    1e08:	f9 1f       	adc	r31, r25
    1e0a:	60 83       	st	Z, r22
    1e0c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e0e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e10:	e0 5c       	subi	r30, 0xC0	; 192
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	31 83       	std	Z+1, r19	; 0x01
    1e16:	20 83       	st	Z, r18
    1e18:	ee 89       	ldd	r30, Y+22	; 0x16
    1e1a:	ff 89       	ldd	r31, Y+23	; 0x17
    1e1c:	20 81       	ld	r18, Z
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <_ZN14HardwareSerial5writeEh+0x60>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <_ZN14HardwareSerial5writeEh+0x5c>
    1e2e:	28 2b       	or	r18, r24
    1e30:	20 83       	st	Z, r18
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 a3       	std	Y+33, r24	; 0x21
    1e36:	ec 89       	ldd	r30, Y+20	; 0x14
    1e38:	fd 89       	ldd	r31, Y+21	; 0x15
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	80 83       	st	Z, r24
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <_ZN14HardwareSerialcvbEv>:
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	08 95       	ret

00001e4e <_GLOBAL__I_rx_buffer>:
    1e4e:	10 92 19 06 	sts	0x0619, r1
    1e52:	10 92 18 06 	sts	0x0618, r1
    1e56:	88 ee       	ldi	r24, 0xE8	; 232
    1e58:	93 e0       	ldi	r25, 0x03	; 3
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	80 93 1a 06 	sts	0x061A, r24
    1e62:	90 93 1b 06 	sts	0x061B, r25
    1e66:	a0 93 1c 06 	sts	0x061C, r26
    1e6a:	b0 93 1d 06 	sts	0x061D, r27
    1e6e:	8e e2       	ldi	r24, 0x2E	; 46
    1e70:	92 e0       	ldi	r25, 0x02	; 2
    1e72:	90 93 17 06 	sts	0x0617, r25
    1e76:	80 93 16 06 	sts	0x0616, r24
    1e7a:	8e e8       	ldi	r24, 0x8E	; 142
    1e7c:	95 e0       	ldi	r25, 0x05	; 5
    1e7e:	90 93 23 06 	sts	0x0623, r25
    1e82:	80 93 22 06 	sts	0x0622, r24
    1e86:	82 ed       	ldi	r24, 0xD2	; 210
    1e88:	95 e0       	ldi	r25, 0x05	; 5
    1e8a:	90 93 25 06 	sts	0x0625, r25
    1e8e:	80 93 24 06 	sts	0x0624, r24
    1e92:	85 ec       	ldi	r24, 0xC5	; 197
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	90 93 27 06 	sts	0x0627, r25
    1e9a:	80 93 26 06 	sts	0x0626, r24
    1e9e:	84 ec       	ldi	r24, 0xC4	; 196
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	90 93 29 06 	sts	0x0629, r25
    1ea6:	80 93 28 06 	sts	0x0628, r24
    1eaa:	80 ec       	ldi	r24, 0xC0	; 192
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	90 93 2b 06 	sts	0x062B, r25
    1eb2:	80 93 2a 06 	sts	0x062A, r24
    1eb6:	81 ec       	ldi	r24, 0xC1	; 193
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	90 93 2d 06 	sts	0x062D, r25
    1ebe:	80 93 2c 06 	sts	0x062C, r24
    1ec2:	82 ec       	ldi	r24, 0xC2	; 194
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	90 93 2f 06 	sts	0x062F, r25
    1eca:	80 93 2e 06 	sts	0x062E, r24
    1ece:	86 ec       	ldi	r24, 0xC6	; 198
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	90 93 31 06 	sts	0x0631, r25
    1ed6:	80 93 30 06 	sts	0x0630, r24
    1eda:	84 e0       	ldi	r24, 0x04	; 4
    1edc:	80 93 32 06 	sts	0x0632, r24
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	80 93 33 06 	sts	0x0633, r24
    1ee6:	87 e0       	ldi	r24, 0x07	; 7
    1ee8:	80 93 34 06 	sts	0x0634, r24
    1eec:	85 e0       	ldi	r24, 0x05	; 5
    1eee:	80 93 35 06 	sts	0x0635, r24
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 36 06 	sts	0x0636, r24
    1ef8:	08 95       	ret

00001efa <_ZN5Print5writeEPKhj>:
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	7c 01       	movw	r14, r24
    1f0c:	6b 01       	movw	r12, r22
    1f0e:	8a 01       	movw	r16, r20
    1f10:	c0 e0       	ldi	r28, 0x00	; 0
    1f12:	d0 e0       	ldi	r29, 0x00	; 0
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <_ZN5Print5writeEPKhj+0x3a>
    1f16:	d6 01       	movw	r26, r12
    1f18:	6d 91       	ld	r22, X+
    1f1a:	6d 01       	movw	r12, r26
    1f1c:	d7 01       	movw	r26, r14
    1f1e:	ed 91       	ld	r30, X+
    1f20:	fc 91       	ld	r31, X
    1f22:	01 90       	ld	r0, Z+
    1f24:	f0 81       	ld	r31, Z
    1f26:	e0 2d       	mov	r30, r0
    1f28:	c7 01       	movw	r24, r14
    1f2a:	09 95       	icall
    1f2c:	c8 0f       	add	r28, r24
    1f2e:	d9 1f       	adc	r29, r25
    1f30:	01 50       	subi	r16, 0x01	; 1
    1f32:	10 40       	sbci	r17, 0x00	; 0
    1f34:	01 15       	cp	r16, r1
    1f36:	11 05       	cpc	r17, r1
    1f38:	71 f7       	brne	.-36     	; 0x1f16 <_ZN5Print5writeEPKhj+0x1c>
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	08 95       	ret

00001f4e <_ZN5Print7printlnEv>:
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	8c 01       	movw	r16, r24
    1f58:	dc 01       	movw	r26, r24
    1f5a:	ed 91       	ld	r30, X+
    1f5c:	fc 91       	ld	r31, X
    1f5e:	01 90       	ld	r0, Z+
    1f60:	f0 81       	ld	r31, Z
    1f62:	e0 2d       	mov	r30, r0
    1f64:	6d e0       	ldi	r22, 0x0D	; 13
    1f66:	09 95       	icall
    1f68:	7c 01       	movw	r14, r24
    1f6a:	d8 01       	movw	r26, r16
    1f6c:	ed 91       	ld	r30, X+
    1f6e:	fc 91       	ld	r31, X
    1f70:	01 90       	ld	r0, Z+
    1f72:	f0 81       	ld	r31, Z
    1f74:	e0 2d       	mov	r30, r0
    1f76:	c8 01       	movw	r24, r16
    1f78:	6a e0       	ldi	r22, 0x0A	; 10
    1f7a:	09 95       	icall
    1f7c:	9c 01       	movw	r18, r24
    1f7e:	2e 0d       	add	r18, r14
    1f80:	3f 1d       	adc	r19, r15
    1f82:	c9 01       	movw	r24, r18
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	ff 90       	pop	r15
    1f8a:	ef 90       	pop	r14
    1f8c:	08 95       	ret

00001f8e <_ZN5Print5writeEPKc>:
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
    1f94:	61 15       	cp	r22, r1
    1f96:	71 05       	cpc	r23, r1
    1f98:	19 f4       	brne	.+6      	; 0x1fa0 <_ZN5Print5writeEPKc+0x12>
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <_ZN5Print5writeEPKc+0x30>
    1fa0:	db 01       	movw	r26, r22
    1fa2:	0d 90       	ld	r0, X+
    1fa4:	00 20       	and	r0, r0
    1fa6:	e9 f7       	brne	.-6      	; 0x1fa2 <_ZN5Print5writeEPKc+0x14>
    1fa8:	11 97       	sbiw	r26, 0x01	; 1
    1faa:	a6 1b       	sub	r26, r22
    1fac:	b7 0b       	sbc	r27, r23
    1fae:	e8 81       	ld	r30, Y
    1fb0:	f9 81       	ldd	r31, Y+1	; 0x01
    1fb2:	02 80       	ldd	r0, Z+2	; 0x02
    1fb4:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb6:	e0 2d       	mov	r30, r0
    1fb8:	ad 01       	movw	r20, r26
    1fba:	09 95       	icall
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <_ZN5Print5printEPKc>:
    1fc6:	e3 cf       	rjmp	.-58     	; 0x1f8e <_ZN5Print5writeEPKc>
    1fc8:	08 95       	ret

00001fca <_ZN5Print7printlnEPKc>:
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
    1fce:	0f 93       	push	r16
    1fd0:	1f 93       	push	r17
    1fd2:	7c 01       	movw	r14, r24
    1fd4:	dc df       	rcall	.-72     	; 0x1f8e <_ZN5Print5writeEPKc>
    1fd6:	8c 01       	movw	r16, r24
    1fd8:	c7 01       	movw	r24, r14
    1fda:	b9 df       	rcall	.-142    	; 0x1f4e <_ZN5Print7printlnEv>
    1fdc:	08 0f       	add	r16, r24
    1fde:	19 1f       	adc	r17, r25
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	08 95       	ret

00001fec <main>:
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	b9 d0       	rcall	.+370    	; 0x2164 <init>
    1ff2:	0e 94 a6 04 	call	0x94c	; 0x94c <setup>
    1ff6:	c3 ea       	ldi	r28, 0xA3	; 163
    1ff8:	dd e0       	ldi	r29, 0x0D	; 13
    1ffa:	0e 94 2d 04 	call	0x85a	; 0x85a <loop>
    1ffe:	20 97       	sbiw	r28, 0x00	; 0
    2000:	e1 f3       	breq	.-8      	; 0x1ffa <main+0xe>
    2002:	a1 dd       	rcall	.-1214   	; 0x1b46 <_Z14serialEventRunv>
    2004:	fa cf       	rjmp	.-12     	; 0x1ffa <main+0xe>

00002006 <__vector_16>:
    2006:	1f 92       	push	r1
    2008:	0f 92       	push	r0
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	0f 92       	push	r0
    200e:	11 24       	eor	r1, r1
    2010:	2f 93       	push	r18
    2012:	3f 93       	push	r19
    2014:	8f 93       	push	r24
    2016:	9f 93       	push	r25
    2018:	af 93       	push	r26
    201a:	bf 93       	push	r27
    201c:	80 91 3c 06 	lds	r24, 0x063C
    2020:	90 91 3d 06 	lds	r25, 0x063D
    2024:	a0 91 3e 06 	lds	r26, 0x063E
    2028:	b0 91 3f 06 	lds	r27, 0x063F
    202c:	30 91 40 06 	lds	r19, 0x0640
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	a1 1d       	adc	r26, r1
    2034:	b1 1d       	adc	r27, r1
    2036:	23 2f       	mov	r18, r19
    2038:	2d 5f       	subi	r18, 0xFD	; 253
    203a:	2d 37       	cpi	r18, 0x7D	; 125
    203c:	20 f0       	brcs	.+8      	; 0x2046 <__vector_16+0x40>
    203e:	2d 57       	subi	r18, 0x7D	; 125
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	a1 1d       	adc	r26, r1
    2044:	b1 1d       	adc	r27, r1
    2046:	20 93 40 06 	sts	0x0640, r18
    204a:	80 93 3c 06 	sts	0x063C, r24
    204e:	90 93 3d 06 	sts	0x063D, r25
    2052:	a0 93 3e 06 	sts	0x063E, r26
    2056:	b0 93 3f 06 	sts	0x063F, r27
    205a:	80 91 38 06 	lds	r24, 0x0638
    205e:	90 91 39 06 	lds	r25, 0x0639
    2062:	a0 91 3a 06 	lds	r26, 0x063A
    2066:	b0 91 3b 06 	lds	r27, 0x063B
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	a1 1d       	adc	r26, r1
    206e:	b1 1d       	adc	r27, r1
    2070:	80 93 38 06 	sts	0x0638, r24
    2074:	90 93 39 06 	sts	0x0639, r25
    2078:	a0 93 3a 06 	sts	0x063A, r26
    207c:	b0 93 3b 06 	sts	0x063B, r27
    2080:	bf 91       	pop	r27
    2082:	af 91       	pop	r26
    2084:	9f 91       	pop	r25
    2086:	8f 91       	pop	r24
    2088:	3f 91       	pop	r19
    208a:	2f 91       	pop	r18
    208c:	0f 90       	pop	r0
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	0f 90       	pop	r0
    2092:	1f 90       	pop	r1
    2094:	18 95       	reti

00002096 <millis>:
    2096:	8f b7       	in	r24, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	20 91 3c 06 	lds	r18, 0x063C
    209e:	30 91 3d 06 	lds	r19, 0x063D
    20a2:	40 91 3e 06 	lds	r20, 0x063E
    20a6:	50 91 3f 06 	lds	r21, 0x063F
    20aa:	8f bf       	out	0x3f, r24	; 63
    20ac:	b9 01       	movw	r22, r18
    20ae:	ca 01       	movw	r24, r20
    20b0:	08 95       	ret

000020b2 <delay>:
    20b2:	9b 01       	movw	r18, r22
    20b4:	ac 01       	movw	r20, r24
    20b6:	7f b7       	in	r23, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	80 91 38 06 	lds	r24, 0x0638
    20be:	90 91 39 06 	lds	r25, 0x0639
    20c2:	a0 91 3a 06 	lds	r26, 0x063A
    20c6:	b0 91 3b 06 	lds	r27, 0x063B
    20ca:	66 b5       	in	r22, 0x26	; 38
    20cc:	a8 9b       	sbis	0x15, 0	; 21
    20ce:	05 c0       	rjmp	.+10     	; 0x20da <delay+0x28>
    20d0:	6f 3f       	cpi	r22, 0xFF	; 255
    20d2:	19 f0       	breq	.+6      	; 0x20da <delay+0x28>
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	a1 1d       	adc	r26, r1
    20d8:	b1 1d       	adc	r27, r1
    20da:	7f bf       	out	0x3f, r23	; 63
    20dc:	ba 2f       	mov	r27, r26
    20de:	a9 2f       	mov	r26, r25
    20e0:	98 2f       	mov	r25, r24
    20e2:	88 27       	eor	r24, r24
    20e4:	86 0f       	add	r24, r22
    20e6:	91 1d       	adc	r25, r1
    20e8:	a1 1d       	adc	r26, r1
    20ea:	b1 1d       	adc	r27, r1
    20ec:	62 e0       	ldi	r22, 0x02	; 2
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	aa 1f       	adc	r26, r26
    20f4:	bb 1f       	adc	r27, r27
    20f6:	6a 95       	dec	r22
    20f8:	d1 f7       	brne	.-12     	; 0x20ee <delay+0x3c>
    20fa:	bc 01       	movw	r22, r24
    20fc:	2d c0       	rjmp	.+90     	; 0x2158 <delay+0xa6>
    20fe:	ff b7       	in	r31, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	80 91 38 06 	lds	r24, 0x0638
    2106:	90 91 39 06 	lds	r25, 0x0639
    210a:	a0 91 3a 06 	lds	r26, 0x063A
    210e:	b0 91 3b 06 	lds	r27, 0x063B
    2112:	e6 b5       	in	r30, 0x26	; 38
    2114:	a8 9b       	sbis	0x15, 0	; 21
    2116:	05 c0       	rjmp	.+10     	; 0x2122 <delay+0x70>
    2118:	ef 3f       	cpi	r30, 0xFF	; 255
    211a:	19 f0       	breq	.+6      	; 0x2122 <delay+0x70>
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	a1 1d       	adc	r26, r1
    2120:	b1 1d       	adc	r27, r1
    2122:	ff bf       	out	0x3f, r31	; 63
    2124:	ba 2f       	mov	r27, r26
    2126:	a9 2f       	mov	r26, r25
    2128:	98 2f       	mov	r25, r24
    212a:	88 27       	eor	r24, r24
    212c:	8e 0f       	add	r24, r30
    212e:	91 1d       	adc	r25, r1
    2130:	a1 1d       	adc	r26, r1
    2132:	b1 1d       	adc	r27, r1
    2134:	e2 e0       	ldi	r30, 0x02	; 2
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	aa 1f       	adc	r26, r26
    213c:	bb 1f       	adc	r27, r27
    213e:	ea 95       	dec	r30
    2140:	d1 f7       	brne	.-12     	; 0x2136 <delay+0x84>
    2142:	86 1b       	sub	r24, r22
    2144:	97 0b       	sbc	r25, r23
    2146:	88 5e       	subi	r24, 0xE8	; 232
    2148:	93 40       	sbci	r25, 0x03	; 3
    214a:	c8 f2       	brcs	.-78     	; 0x20fe <delay+0x4c>
    214c:	21 50       	subi	r18, 0x01	; 1
    214e:	30 40       	sbci	r19, 0x00	; 0
    2150:	40 40       	sbci	r20, 0x00	; 0
    2152:	50 40       	sbci	r21, 0x00	; 0
    2154:	68 51       	subi	r22, 0x18	; 24
    2156:	7c 4f       	sbci	r23, 0xFC	; 252
    2158:	21 15       	cp	r18, r1
    215a:	31 05       	cpc	r19, r1
    215c:	41 05       	cpc	r20, r1
    215e:	51 05       	cpc	r21, r1
    2160:	71 f6       	brne	.-100    	; 0x20fe <delay+0x4c>
    2162:	08 95       	ret

00002164 <init>:
    2164:	78 94       	sei
    2166:	84 b5       	in	r24, 0x24	; 36
    2168:	82 60       	ori	r24, 0x02	; 2
    216a:	84 bd       	out	0x24, r24	; 36
    216c:	84 b5       	in	r24, 0x24	; 36
    216e:	81 60       	ori	r24, 0x01	; 1
    2170:	84 bd       	out	0x24, r24	; 36
    2172:	85 b5       	in	r24, 0x25	; 37
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	85 bd       	out	0x25, r24	; 37
    2178:	85 b5       	in	r24, 0x25	; 37
    217a:	81 60       	ori	r24, 0x01	; 1
    217c:	85 bd       	out	0x25, r24	; 37
    217e:	ee e6       	ldi	r30, 0x6E	; 110
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	81 60       	ori	r24, 0x01	; 1
    2186:	80 83       	st	Z, r24
    2188:	e1 e8       	ldi	r30, 0x81	; 129
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	10 82       	st	Z, r1
    218e:	80 81       	ld	r24, Z
    2190:	82 60       	ori	r24, 0x02	; 2
    2192:	80 83       	st	Z, r24
    2194:	80 81       	ld	r24, Z
    2196:	81 60       	ori	r24, 0x01	; 1
    2198:	80 83       	st	Z, r24
    219a:	e0 e8       	ldi	r30, 0x80	; 128
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	81 60       	ori	r24, 0x01	; 1
    21a2:	80 83       	st	Z, r24
    21a4:	e1 eb       	ldi	r30, 0xB1	; 177
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	84 60       	ori	r24, 0x04	; 4
    21ac:	80 83       	st	Z, r24
    21ae:	e0 eb       	ldi	r30, 0xB0	; 176
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	81 60       	ori	r24, 0x01	; 1
    21b6:	80 83       	st	Z, r24
    21b8:	ea e7       	ldi	r30, 0x7A	; 122
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	84 60       	ori	r24, 0x04	; 4
    21c0:	80 83       	st	Z, r24
    21c2:	80 81       	ld	r24, Z
    21c4:	82 60       	ori	r24, 0x02	; 2
    21c6:	80 83       	st	Z, r24
    21c8:	80 81       	ld	r24, Z
    21ca:	81 60       	ori	r24, 0x01	; 1
    21cc:	80 83       	st	Z, r24
    21ce:	80 81       	ld	r24, Z
    21d0:	80 68       	ori	r24, 0x80	; 128
    21d2:	80 83       	st	Z, r24
    21d4:	10 92 c1 00 	sts	0x00C1, r1
    21d8:	08 95       	ret

000021da <pinMode>:
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	48 2f       	mov	r20, r24
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	ca 01       	movw	r24, r20
    21e4:	86 56       	subi	r24, 0x66	; 102
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	fc 01       	movw	r30, r24
    21ea:	34 91       	lpm	r19, Z+
    21ec:	4a 57       	subi	r20, 0x7A	; 122
    21ee:	5f 4f       	sbci	r21, 0xFF	; 255
    21f0:	fa 01       	movw	r30, r20
    21f2:	84 91       	lpm	r24, Z+
    21f4:	88 23       	and	r24, r24
    21f6:	69 f1       	breq	.+90     	; 0x2252 <pinMode+0x78>
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	fc 01       	movw	r30, r24
    2200:	e8 59       	subi	r30, 0x98	; 152
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	a5 91       	lpm	r26, Z+
    2206:	b4 91       	lpm	r27, Z+
    2208:	fc 01       	movw	r30, r24
    220a:	ee 58       	subi	r30, 0x8E	; 142
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	c5 91       	lpm	r28, Z+
    2210:	d4 91       	lpm	r29, Z+
    2212:	66 23       	and	r22, r22
    2214:	51 f4       	brne	.+20     	; 0x222a <pinMode+0x50>
    2216:	2f b7       	in	r18, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	8c 91       	ld	r24, X
    221c:	93 2f       	mov	r25, r19
    221e:	90 95       	com	r25
    2220:	89 23       	and	r24, r25
    2222:	8c 93       	st	X, r24
    2224:	88 81       	ld	r24, Y
    2226:	89 23       	and	r24, r25
    2228:	0b c0       	rjmp	.+22     	; 0x2240 <pinMode+0x66>
    222a:	62 30       	cpi	r22, 0x02	; 2
    222c:	61 f4       	brne	.+24     	; 0x2246 <pinMode+0x6c>
    222e:	2f b7       	in	r18, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	8c 91       	ld	r24, X
    2234:	93 2f       	mov	r25, r19
    2236:	90 95       	com	r25
    2238:	89 23       	and	r24, r25
    223a:	8c 93       	st	X, r24
    223c:	88 81       	ld	r24, Y
    223e:	83 2b       	or	r24, r19
    2240:	88 83       	st	Y, r24
    2242:	2f bf       	out	0x3f, r18	; 63
    2244:	06 c0       	rjmp	.+12     	; 0x2252 <pinMode+0x78>
    2246:	9f b7       	in	r25, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	8c 91       	ld	r24, X
    224c:	83 2b       	or	r24, r19
    224e:	8c 93       	st	X, r24
    2250:	9f bf       	out	0x3f, r25	; 63
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <digitalWrite>:
    2258:	48 2f       	mov	r20, r24
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	ca 01       	movw	r24, r20
    225e:	82 55       	subi	r24, 0x52	; 82
    2260:	9f 4f       	sbci	r25, 0xFF	; 255
    2262:	fc 01       	movw	r30, r24
    2264:	24 91       	lpm	r18, Z+
    2266:	ca 01       	movw	r24, r20
    2268:	86 56       	subi	r24, 0x66	; 102
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	fc 01       	movw	r30, r24
    226e:	94 91       	lpm	r25, Z+
    2270:	4a 57       	subi	r20, 0x7A	; 122
    2272:	5f 4f       	sbci	r21, 0xFF	; 255
    2274:	fa 01       	movw	r30, r20
    2276:	34 91       	lpm	r19, Z+
    2278:	33 23       	and	r19, r19
    227a:	09 f4       	brne	.+2      	; 0x227e <digitalWrite+0x26>
    227c:	40 c0       	rjmp	.+128    	; 0x22fe <digitalWrite+0xa6>
    227e:	22 23       	and	r18, r18
    2280:	51 f1       	breq	.+84     	; 0x22d6 <digitalWrite+0x7e>
    2282:	23 30       	cpi	r18, 0x03	; 3
    2284:	71 f0       	breq	.+28     	; 0x22a2 <digitalWrite+0x4a>
    2286:	24 30       	cpi	r18, 0x04	; 4
    2288:	28 f4       	brcc	.+10     	; 0x2294 <digitalWrite+0x3c>
    228a:	21 30       	cpi	r18, 0x01	; 1
    228c:	a1 f0       	breq	.+40     	; 0x22b6 <digitalWrite+0x5e>
    228e:	22 30       	cpi	r18, 0x02	; 2
    2290:	11 f5       	brne	.+68     	; 0x22d6 <digitalWrite+0x7e>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <digitalWrite+0x64>
    2294:	26 30       	cpi	r18, 0x06	; 6
    2296:	b1 f0       	breq	.+44     	; 0x22c4 <digitalWrite+0x6c>
    2298:	27 30       	cpi	r18, 0x07	; 7
    229a:	c1 f0       	breq	.+48     	; 0x22cc <digitalWrite+0x74>
    229c:	24 30       	cpi	r18, 0x04	; 4
    229e:	d9 f4       	brne	.+54     	; 0x22d6 <digitalWrite+0x7e>
    22a0:	04 c0       	rjmp	.+8      	; 0x22aa <digitalWrite+0x52>
    22a2:	80 91 80 00 	lds	r24, 0x0080
    22a6:	8f 77       	andi	r24, 0x7F	; 127
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <digitalWrite+0x58>
    22aa:	80 91 80 00 	lds	r24, 0x0080
    22ae:	8f 7d       	andi	r24, 0xDF	; 223
    22b0:	80 93 80 00 	sts	0x0080, r24
    22b4:	10 c0       	rjmp	.+32     	; 0x22d6 <digitalWrite+0x7e>
    22b6:	84 b5       	in	r24, 0x24	; 36
    22b8:	8f 77       	andi	r24, 0x7F	; 127
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <digitalWrite+0x68>
    22bc:	84 b5       	in	r24, 0x24	; 36
    22be:	8f 7d       	andi	r24, 0xDF	; 223
    22c0:	84 bd       	out	0x24, r24	; 36
    22c2:	09 c0       	rjmp	.+18     	; 0x22d6 <digitalWrite+0x7e>
    22c4:	80 91 b0 00 	lds	r24, 0x00B0
    22c8:	8f 77       	andi	r24, 0x7F	; 127
    22ca:	03 c0       	rjmp	.+6      	; 0x22d2 <digitalWrite+0x7a>
    22cc:	80 91 b0 00 	lds	r24, 0x00B0
    22d0:	8f 7d       	andi	r24, 0xDF	; 223
    22d2:	80 93 b0 00 	sts	0x00B0, r24
    22d6:	e3 2f       	mov	r30, r19
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	ee 58       	subi	r30, 0x8E	; 142
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	a5 91       	lpm	r26, Z+
    22e4:	b4 91       	lpm	r27, Z+
    22e6:	2f b7       	in	r18, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	66 23       	and	r22, r22
    22ec:	21 f4       	brne	.+8      	; 0x22f6 <digitalWrite+0x9e>
    22ee:	8c 91       	ld	r24, X
    22f0:	90 95       	com	r25
    22f2:	89 23       	and	r24, r25
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <digitalWrite+0xa2>
    22f6:	8c 91       	ld	r24, X
    22f8:	89 2b       	or	r24, r25
    22fa:	8c 93       	st	X, r24
    22fc:	2f bf       	out	0x3f, r18	; 63
    22fe:	08 95       	ret

00002300 <digitalRead>:
    2300:	68 2f       	mov	r22, r24
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	cb 01       	movw	r24, r22
    2306:	82 55       	subi	r24, 0x52	; 82
    2308:	9f 4f       	sbci	r25, 0xFF	; 255
    230a:	fc 01       	movw	r30, r24
    230c:	24 91       	lpm	r18, Z+
    230e:	cb 01       	movw	r24, r22
    2310:	86 56       	subi	r24, 0x66	; 102
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	fc 01       	movw	r30, r24
    2316:	44 91       	lpm	r20, Z+
    2318:	6a 57       	subi	r22, 0x7A	; 122
    231a:	7f 4f       	sbci	r23, 0xFF	; 255
    231c:	fb 01       	movw	r30, r22
    231e:	94 91       	lpm	r25, Z+
    2320:	99 23       	and	r25, r25
    2322:	19 f4       	brne	.+6      	; 0x232a <digitalRead+0x2a>
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	3c c0       	rjmp	.+120    	; 0x23a2 <digitalRead+0xa2>
    232a:	22 23       	and	r18, r18
    232c:	51 f1       	breq	.+84     	; 0x2382 <digitalRead+0x82>
    232e:	23 30       	cpi	r18, 0x03	; 3
    2330:	71 f0       	breq	.+28     	; 0x234e <digitalRead+0x4e>
    2332:	24 30       	cpi	r18, 0x04	; 4
    2334:	28 f4       	brcc	.+10     	; 0x2340 <digitalRead+0x40>
    2336:	21 30       	cpi	r18, 0x01	; 1
    2338:	a1 f0       	breq	.+40     	; 0x2362 <digitalRead+0x62>
    233a:	22 30       	cpi	r18, 0x02	; 2
    233c:	11 f5       	brne	.+68     	; 0x2382 <digitalRead+0x82>
    233e:	14 c0       	rjmp	.+40     	; 0x2368 <digitalRead+0x68>
    2340:	26 30       	cpi	r18, 0x06	; 6
    2342:	b1 f0       	breq	.+44     	; 0x2370 <digitalRead+0x70>
    2344:	27 30       	cpi	r18, 0x07	; 7
    2346:	c1 f0       	breq	.+48     	; 0x2378 <digitalRead+0x78>
    2348:	24 30       	cpi	r18, 0x04	; 4
    234a:	d9 f4       	brne	.+54     	; 0x2382 <digitalRead+0x82>
    234c:	04 c0       	rjmp	.+8      	; 0x2356 <digitalRead+0x56>
    234e:	80 91 80 00 	lds	r24, 0x0080
    2352:	8f 77       	andi	r24, 0x7F	; 127
    2354:	03 c0       	rjmp	.+6      	; 0x235c <digitalRead+0x5c>
    2356:	80 91 80 00 	lds	r24, 0x0080
    235a:	8f 7d       	andi	r24, 0xDF	; 223
    235c:	80 93 80 00 	sts	0x0080, r24
    2360:	10 c0       	rjmp	.+32     	; 0x2382 <digitalRead+0x82>
    2362:	84 b5       	in	r24, 0x24	; 36
    2364:	8f 77       	andi	r24, 0x7F	; 127
    2366:	02 c0       	rjmp	.+4      	; 0x236c <digitalRead+0x6c>
    2368:	84 b5       	in	r24, 0x24	; 36
    236a:	8f 7d       	andi	r24, 0xDF	; 223
    236c:	84 bd       	out	0x24, r24	; 36
    236e:	09 c0       	rjmp	.+18     	; 0x2382 <digitalRead+0x82>
    2370:	80 91 b0 00 	lds	r24, 0x00B0
    2374:	8f 77       	andi	r24, 0x7F	; 127
    2376:	03 c0       	rjmp	.+6      	; 0x237e <digitalRead+0x7e>
    2378:	80 91 b0 00 	lds	r24, 0x00B0
    237c:	8f 7d       	andi	r24, 0xDF	; 223
    237e:	80 93 b0 00 	sts	0x00B0, r24
    2382:	89 2f       	mov	r24, r25
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	84 58       	subi	r24, 0x84	; 132
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	fc 01       	movw	r30, r24
    2390:	a5 91       	lpm	r26, Z+
    2392:	b4 91       	lpm	r27, Z+
    2394:	8c 91       	ld	r24, X
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	84 23       	and	r24, r20
    239c:	11 f0       	breq	.+4      	; 0x23a2 <digitalRead+0xa2>
    239e:	21 e0       	ldi	r18, 0x01	; 1
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	c9 01       	movw	r24, r18
    23a4:	08 95       	ret

000023a6 <__udivmodsi4>:
    23a6:	a1 e2       	ldi	r26, 0x21	; 33
    23a8:	1a 2e       	mov	r1, r26
    23aa:	aa 1b       	sub	r26, r26
    23ac:	bb 1b       	sub	r27, r27
    23ae:	fd 01       	movw	r30, r26
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <__udivmodsi4_ep>

000023b2 <__udivmodsi4_loop>:
    23b2:	aa 1f       	adc	r26, r26
    23b4:	bb 1f       	adc	r27, r27
    23b6:	ee 1f       	adc	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	a2 17       	cp	r26, r18
    23bc:	b3 07       	cpc	r27, r19
    23be:	e4 07       	cpc	r30, r20
    23c0:	f5 07       	cpc	r31, r21
    23c2:	20 f0       	brcs	.+8      	; 0x23cc <__udivmodsi4_ep>
    23c4:	a2 1b       	sub	r26, r18
    23c6:	b3 0b       	sbc	r27, r19
    23c8:	e4 0b       	sbc	r30, r20
    23ca:	f5 0b       	sbc	r31, r21

000023cc <__udivmodsi4_ep>:
    23cc:	66 1f       	adc	r22, r22
    23ce:	77 1f       	adc	r23, r23
    23d0:	88 1f       	adc	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	1a 94       	dec	r1
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <__udivmodsi4_loop>
    23d8:	60 95       	com	r22
    23da:	70 95       	com	r23
    23dc:	80 95       	com	r24
    23de:	90 95       	com	r25
    23e0:	9b 01       	movw	r18, r22
    23e2:	ac 01       	movw	r20, r24
    23e4:	bd 01       	movw	r22, r26
    23e6:	cf 01       	movw	r24, r30
    23e8:	08 95       	ret

000023ea <__prologue_saves__>:
    23ea:	2f 92       	push	r2
    23ec:	3f 92       	push	r3
    23ee:	4f 92       	push	r4
    23f0:	5f 92       	push	r5
    23f2:	6f 92       	push	r6
    23f4:	7f 92       	push	r7
    23f6:	8f 92       	push	r8
    23f8:	9f 92       	push	r9
    23fa:	af 92       	push	r10
    23fc:	bf 92       	push	r11
    23fe:	cf 92       	push	r12
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	ca 1b       	sub	r28, r26
    2414:	db 0b       	sbc	r29, r27
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	09 94       	ijmp

00002422 <__epilogue_restores__>:
    2422:	2a 88       	ldd	r2, Y+18	; 0x12
    2424:	39 88       	ldd	r3, Y+17	; 0x11
    2426:	48 88       	ldd	r4, Y+16	; 0x10
    2428:	5f 84       	ldd	r5, Y+15	; 0x0f
    242a:	6e 84       	ldd	r6, Y+14	; 0x0e
    242c:	7d 84       	ldd	r7, Y+13	; 0x0d
    242e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2430:	9b 84       	ldd	r9, Y+11	; 0x0b
    2432:	aa 84       	ldd	r10, Y+10	; 0x0a
    2434:	b9 84       	ldd	r11, Y+9	; 0x09
    2436:	c8 84       	ldd	r12, Y+8	; 0x08
    2438:	df 80       	ldd	r13, Y+7	; 0x07
    243a:	ee 80       	ldd	r14, Y+6	; 0x06
    243c:	fd 80       	ldd	r15, Y+5	; 0x05
    243e:	0c 81       	ldd	r16, Y+4	; 0x04
    2440:	1b 81       	ldd	r17, Y+3	; 0x03
    2442:	aa 81       	ldd	r26, Y+2	; 0x02
    2444:	b9 81       	ldd	r27, Y+1	; 0x01
    2446:	ce 0f       	add	r28, r30
    2448:	d1 1d       	adc	r29, r1
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	ed 01       	movw	r28, r26
    2456:	08 95       	ret

00002458 <__tablejump2__>:
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31

0000245c <__tablejump__>:
    245c:	05 90       	lpm	r0, Z+
    245e:	f4 91       	lpm	r31, Z+
    2460:	e0 2d       	mov	r30, r0
    2462:	09 94       	ijmp

00002464 <_exit>:
    2464:	f8 94       	cli

00002466 <__stop_program>:
    2466:	ff cf       	rjmp	.-2      	; 0x2466 <__stop_program>
